---
http_interactions:
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cx=&fileType=-pdf&key=&language=es&q=allintext:%22durante%20la%22&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Sat, 11 Mar 2017 19:59:15 GMT
      Expires:
      - Sat, 11 Mar 2017 19:59:15 GMT
      Cache-Control:
      - private, max-age=0
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
         "error": {
          "errors": [
           {
            "domain": "usageLimits",
            "reason": "keyInvalid",
            "message": "Bad Request"
           }
          ],
          "code": 400,
          "message": "Bad Request"
         }
        }
    http_version: 
  recorded_at: Sat, 11 Mar 2017 19:59:15 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=&fileType=-pdf&key=&language=es&q=allintext:%22durante%20la%22&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Sat, 11 Mar 2017 23:14:28 GMT
      Expires:
      - Sat, 11 Mar 2017 23:14:28 GMT
      Cache-Control:
      - private, max-age=0
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
         "error": {
          "errors": [
           {
            "domain": "usageLimits",
            "reason": "keyInvalid",
            "message": "Bad Request"
           }
          ],
          "code": 400,
          "message": "Bad Request"
         }
        }
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:14:28 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:37 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:37 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/k9Xt1Cu_Oa1J5BO3zLhCKGX5a-U"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '32916'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:38 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=11
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:39 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:39 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/BdVQGVNd3XE5a2KqJvJMBkvgoJY"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '34916'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogImtpbmQiOiAiY3VzdG9tc2VhcmNoI3NlYXJjaCIsCiAidXJsIjogewogICJ0eXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICJ0ZW1wbGF0ZSI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9jdXN0b21zZWFyY2gvdjE/cT17c2VhcmNoVGVybXN9Jm51bT17Y291bnQ/fSZzdGFydD17c3RhcnRJbmRleD99JmxyPXtsYW5ndWFnZT99JnNhZmU9e3NhZmU/fSZjeD17Y3g/fSZjcmVmPXtjcmVmP30mc29ydD17c29ydD99JmZpbHRlcj17ZmlsdGVyP30mZ2w9e2dsP30mY3I9e2NyP30mZ29vZ2xlaG9zdD17Z29vZ2xlSG9zdD99JmMyY29mZj17ZGlzYWJsZUNuVHdUcmFuc2xhdGlvbj99JmhxPXtocT99JmhsPXtobD99JnNpdGVTZWFyY2g9e3NpdGVTZWFyY2g/fSZzaXRlU2VhcmNoRmlsdGVyPXtzaXRlU2VhcmNoRmlsdGVyP30mZXhhY3RUZXJtcz17ZXhhY3RUZXJtcz99JmV4Y2x1ZGVUZXJtcz17ZXhjbHVkZVRlcm1zP30mbGlua1NpdGU9e2xpbmtTaXRlP30mb3JUZXJtcz17b3JUZXJtcz99JnJlbGF0ZWRTaXRlPXtyZWxhdGVkU2l0ZT99JmRhdGVSZXN0cmljdD17ZGF0ZVJlc3RyaWN0P30mbG93UmFuZ2U9e2xvd1JhbmdlP30maGlnaFJhbmdlPXtoaWdoUmFuZ2U/fSZzZWFyY2hUeXBlPXtzZWFyY2hUeXBlfSZmaWxlVHlwZT17ZmlsZVR5cGU/fSZyaWdodHM9e3JpZ2h0cz99JmltZ1NpemU9e2ltZ1NpemU/fSZpbWdUeXBlPXtpbWdUeXBlP30maW1nQ29sb3JUeXBlPXtpbWdDb2xvclR5cGU/fSZpbWdEb21pbmFudENvbG9yPXtpbWdEb21pbmFudENvbG9yP30mYWx0PWpzb24iCiB9LAogInF1ZXJpZXMiOiB7CiAgInJlcXVlc3QiOiBbCiAgIHsKICAgICJ0aXRsZSI6ICJHb29nbGUgQ3VzdG9tIFNlYXJjaCAtIGFsbGludGV4dDpcImR1cmFudGUgbGFcIiIsCiAgICAidG90YWxSZXN1bHRzIjogIjc4NzAwMCIsCiAgICAic2VhcmNoVGVybXMiOiAiYWxsaW50ZXh0OlwiZHVyYW50ZSBsYVwiIiwKICAgICJjb3VudCI6IDEwLAogICAgInN0YXJ0SW5kZXgiOiAxMSwKICAgICJpbnB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgIm91dHB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgInNhZmUiOiAib2ZmIiwKICAgICJjeCI6ICIwMDgzNDk1MTIwOTk2MTYwODcyNTc6Ml9hYTVmeDVmN2UiLAogICAgImNyIjogImNvdW50cnlBUiIsCiAgICAiZmlsZVR5cGUiOiAiLXBkZiIKICAgfQogIF0sCiAgInByZXZpb3VzUGFnZSI6IFsKICAgewogICAgInRpdGxlIjogIkdvb2dsZSBDdXN0b20gU2VhcmNoIC0gYWxsaW50ZXh0OlwiZHVyYW50ZSBsYVwiIiwKICAgICJ0b3RhbFJlc3VsdHMiOiAiNzg3MDAwIiwKICAgICJzZWFyY2hUZXJtcyI6ICJhbGxpbnRleHQ6XCJkdXJhbnRlIGxhXCIiLAogICAgImNvdW50IjogMTAsCiAgICAic3RhcnRJbmRleCI6IDEsCiAgICAiaW5wdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICJvdXRwdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICJzYWZlIjogIm9mZiIsCiAgICAiY3giOiAiMDA4MzQ5NTEyMDk5NjE2MDg3MjU3OjJfYWE1Zng1ZjdlIiwKICAgICJjciI6ICJjb3VudHJ5QVIiLAogICAgImZpbGVUeXBlIjogIi1wZGYiCiAgIH0KICBdLAogICJuZXh0UGFnZSI6IFsKICAgewogICAgInRpdGxlIjogIkdvb2dsZSBDdXN0b20gU2VhcmNoIC0gYWxsaW50ZXh0OlwiZHVyYW50ZSBsYVwiIiwKICAgICJ0b3RhbFJlc3VsdHMiOiAiNzg3MDAwIiwKICAgICJzZWFyY2hUZXJtcyI6ICJhbGxpbnRleHQ6XCJkdXJhbnRlIGxhXCIiLAogICAgImNvdW50IjogMTAsCiAgICAic3RhcnRJbmRleCI6IDIxLAogICAgImlucHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAib3V0cHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAic2FmZSI6ICJvZmYiLAogICAgImN4IjogIjAwODM0OTUxMjA5OTYxNjA4NzI1NzoyX2FhNWZ4NWY3ZSIsCiAgICAiY3IiOiAiY291bnRyeUFSIiwKICAgICJmaWxlVHlwZSI6ICItcGRmIgogICB9CiAgXQogfSwKICJjb250ZXh0IjogewogICJ0aXRsZSI6ICJMaW5ndWFGaW5kZXIgZGV2ZWxvcG1lbnQiCiB9LAogInNlYXJjaEluZm9ybWF0aW9uIjogewogICJzZWFyY2hUaW1lIjogMC40OTM2NzUsCiAgImZvcm1hdHRlZFNlYXJjaFRpbWUiOiAiMC40OSIsCiAgInRvdGFsUmVzdWx0cyI6ICI3ODcwMDAiLAogICJmb3JtYXR0ZWRUb3RhbFJlc3VsdHMiOiAiNzg3LDAwMCIKIH0sCiAiaXRlbXMiOiBbCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIkRldGVjdGFuIHVuIHRlbWJsb3IgZHVyYW50ZSBsYSByZW1vbnRhZGEgZGVsIEJhcmNlbG9uYSIsCiAgICJodG1sVGl0bGUiOiAiRGV0ZWN0YW4gdW4gdGVtYmxvciBkdXJhbnRlIGxhIHJlbW9udGFkYSBkZWwgQmFyY2Vsb25hIiwKICAgImxpbmsiOiAiaHR0cDovL3d3dy5lc3BuLmNvbS5hci9mdXRib2wvY2hhbXBpb25zLWxlYWd1ZS9ub3RhL18vaWQvMzAxOTA5NS9kZXRlY3Rhbi11bi10ZW1ibG9yLWR1cmFudGUtbGEtcmVtb250YWRhLWRlbC1iYXJjZWxvbmEiLAogICAiZGlzcGxheUxpbmsiOiAid3d3LmVzcG4uY29tLmFyIiwKICAgInNuaXBwZXQiOiAiU2Vnw7puIETDrWF6LCBxdWUgZXMgYWZpY2lvbmFkbyBwZXJvIG5vIGZvcm9mbyBkZWwgQmFyw6dhLCBcImxhIGFtcGxpdHVkIGR1cmFudGUgbGEgXG5jZWxlYnJhY2nDs24gZGVsIHByaW1lciBnb2wgZXMgc2ltaWxhciBhIGxhIHJlZ2lzdHJhZGEgaGFiaXR1YWxtZW50ZSBlbiBsb3PCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJTZWfDum4gRMOtYXosIHF1ZSBlcyBhZmljaW9uYWRvIHBlcm8gbm8gZm9yb2ZvIGRlbCBCYXLDp2EsICZxdW90O2xhIGFtcGxpdHVkIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgXHUwMDNjYnJcdTAwM2VcbmNlbGVicmFjacOzbiBkZWwgcHJpbWVyIGdvbCBlcyBzaW1pbGFyIGEgbGEgcmVnaXN0cmFkYSBoYWJpdHVhbG1lbnRlIGVuIGxvcyZuYnNwOy4uLiIsCiAgICJjYWNoZUlkIjogIkpwX0ZHc2hNTHlzSiIsCiAgICJmb3JtYXR0ZWRVcmwiOiAid3d3LmVzcG4uY29tLmFyLy4uLi9kZXRlY3Rhbi11bi10ZW1ibG9yLWR1cmFudGUtbGEtcmVtb250YWRhLWRlbC0gYmFyY2Vsb25hIiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAid3d3LmVzcG4uY29tLmFyLy4uLi9kZXRlY3Rhbi11bi10ZW1ibG9yLVx1MDAzY2JcdTAwM2VkdXJhbnRlLWxhXHUwMDNjL2JcdTAwM2UtcmVtb250YWRhLWRlbC0gYmFyY2Vsb25hIiwKICAgInBhZ2VtYXAiOiB7CiAgICAidGh1bWJuYWlsIjogWwogICAgIHsKICAgICAgInNyYyI6ICJodHRwOi8vYTEuZXNwbmNkbi5jb20vY29tYmluZXIvaT9pbWc9JTJGbWVkaWElMkZtb3Rpb24lMkYyMDE3JTJGMDMwOCUyRkh1XzE3MDMwOF9EZXBvcnRlc19GT1RPX29rJTJGSHVfMTcwMzA4X0RlcG9ydGVzX0ZPVE9fb2suanBnIiwKICAgICAgIndpZHRoIjogIjU3NiIsCiAgICAgICJoZWlnaHQiOiAiMzI0IgogICAgIH0KICAgIF0sCiAgICAiZG9jdW1lbnQiOiBbCiAgICAgewogICAgICAidGl0bGUiOiAiRGV0ZWN0YW4gdW4gdGVtYmxvciBkdXJhbnRlIGxhIHJlbW9udGFkYSBkZWwgQmFyY2Vsb25hIgogICAgIH0KICAgIF0sCiAgICAibWV0YXRhZ3MiOiBbCiAgICAgewogICAgICAidmlld3BvcnQiOiAiaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vIiwKICAgICAgIm5ld3Nfa2V5d29yZHMiOiAiQmFyY2Vsb25hLCBVRUZBIENoYW1waW9ucyBMZWFndWUsIEJhcmNlbG9uYSwgVUVGQSBDaGFtcGlvbnMgTGVhZ3VlIiwKICAgICAgImRjLmRhdGUuaXNzdWVkIjogIjIwMTctMDMtMDlUMTg6MzY6MDJaIiwKICAgICAgImZiOmFwcF9pZCI6ICIxMTY2NTYxNjE3MDg5MTciLAogICAgICAib2c6c2l0ZV9uYW1lIjogIkVTUE4uY29tLmFyIiwKICAgICAgIm9nOnVybCI6ICJodHRwOi8vd3d3LmVzcG4uY29tLmFyL2Z1dGJvbC9jaGFtcGlvbnMtbGVhZ3VlL25vdGEvXy9pZC8zMDE5MDk1IiwKICAgICAgIm9nOnRpdGxlIjogIkRldGVjdGFuIHVuIHRlbWJsb3IgZHVyYW50ZSBsYSByZW1vbnRhZGEgZGVsIEJhcmNlbG9uYSIsCiAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJVbiBzaXNtw7NncmFmbyBhIDUwMCBtZXRyb3MgZGVsIENhbXAgTm91IHJlZ2lzdHLDsyBwZXF1ZcOxb3Mgc2lzbW9zIGVuIGNhZGEgZ29sIGN1bMOpIGFudGUgUFNHLiIsCiAgICAgICJvZzppbWFnZSI6ICJodHRwOi8vYTEuZXNwbmNkbi5jb20vY29tYmluZXIvaT9pbWc9JTJGbWVkaWElMkZtb3Rpb24lMkYyMDE3JTJGMDMwOCUyRkh1XzE3MDMwOF9EZXBvcnRlc19GT1RPX29rJTJGSHVfMTcwMzA4X0RlcG9ydGVzX0ZPVE9fb2suanBnIiwKICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICJ0d2l0dGVyOnNpdGUiOiAiZXNwbiIsCiAgICAgICJ0d2l0dGVyOnVybCI6ICJodHRwOi8vd3d3LmVzcG4uY29tLmFyL2Z1dGJvbC9jaGFtcGlvbnMtbGVhZ3VlL25vdGEvXy9pZC8zMDE5MDk1IiwKICAgICAgInR3aXR0ZXI6dGl0bGUiOiAiRGV0ZWN0YW4gdW4gdGVtYmxvciBkdXJhbnRlIGxhIHJlbW9udGFkYSBkZWwgQmFyY2Vsb25hIiwKICAgICAgInR3aXR0ZXI6ZGVzY3JpcHRpb24iOiAiVW4gc2lzbcOzZ3JhZm8gYSA1MDAgbWV0cm9zIGRlbCBDYW1wIE5vdSByZWdpc3Ryw7MgcGVxdWXDsW9zIHNpc21vcyBlbiBjYWRhIGdvbCBjdWzDqSBhbnRlIFBTRy4iLAogICAgICAidHdpdHRlcjppbWFnZSI6ICJodHRwOi8vYTEuZXNwbmNkbi5jb20vY29tYmluZXIvaT9pbWc9JTJGbWVkaWElMkZtb3Rpb24lMkYyMDE3JTJGMDMwOCUyRkh1XzE3MDMwOF9EZXBvcnRlc19GT1RPX29rJTJGSHVfMTcwMzA4X0RlcG9ydGVzX0ZPVE9fb2suanBnIiwKICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5IiwKICAgICAgInR3aXR0ZXI6YXBwOm5hbWU6aXBob25lIjogIkVTUE4iLAogICAgICAidHdpdHRlcjphcHA6aWQ6aXBob25lIjogIjMxNzQ2OTE4NCIsCiAgICAgICJ0d2l0dGVyOmFwcDp1cmw6aXBob25lIjogInNwb3J0c2NlbnRlcjovL3gtY2FsbGJhY2stdXJsL3Nob3dTdG9yeT91aWQ9MzAxOTA5NSIsCiAgICAgICJ0d2l0dGVyOmFwcDpuYW1lOmdvb2dsZXBsYXkiOiAiRVNQTiIsCiAgICAgICJ0d2l0dGVyOmFwcDppZDpnb29nbGVwbGF5IjogImNvbS5lc3BuLnNjb3JlX2NlbnRlciIsCiAgICAgICJ0d2l0dGVyOmFwcDp1cmw6Z29vZ2xlcGxheSI6ICJzcG9ydHNjZW50ZXI6Ly94LWNhbGxiYWNrLXVybC9zaG93U3Rvcnk/dWlkPTMwMTkwOTUiLAogICAgICAidGl0bGUiOiAiRGV0ZWN0YW4gdW4gdGVtYmxvciBkdXJhbnRlIGxhIHJlbW9udGFkYSBkZWwgQmFyY2Vsb25hIiwKICAgICAgIm1lZGl1bSI6ICJhcnRpY2xlIiwKICAgICAgImFwcGxlLWl0dW5lcy1hcHAiOiAiYXBwLWlkPTMxNzQ2OTE4NCwgYXBwLWFyZ3VtZW50PXNwb3J0c2NlbnRlcjovL3gtY2FsbGJhY2stdXJsL3Nob3dTdG9yeT91aWQ9MzAxOTA5NSIKICAgICB9CiAgICBdLAogICAgImNzZV9pbWFnZSI6IFsKICAgICB7CiAgICAgICJzcmMiOiAiaHR0cDovL2ExLmVzcG5jZG4uY29tL2NvbWJpbmVyL2k/aW1nPSUyRm1lZGlhJTJGbW90aW9uJTJGMjAxNyUyRjAzMDglMkZIdV8xNzAzMDhfRGVwb3J0ZXNfRk9UT19vayUyRkh1XzE3MDMwOF9EZXBvcnRlc19GT1RPX29rLmpwZyIsCiAgICAgICJ0eXBlIjogIjEiLAogICAgICAid2lkdGgiOiAiMzAwIiwKICAgICAgImhlaWdodCI6ICIxNjgiCiAgICAgfQogICAgXSwKICAgICJzaXRlbmF2aWdhdGlvbmVsZW1lbnQiOiBbCiAgICAgewogICAgICAibmFtZSI6ICJGw7p0Ym9sIiwKICAgICAgInVybCI6ICJGw7p0Ym9sIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIkRlbnVuY2lhbiBhbWVuYXphcyBkdXJhbnRlIGxhIG1hcmNoYSBjb250cmEgbGEgdmlvbGVuY2lhIGRlIGfDqW5lcm8iLAogICAiaHRtbFRpdGxlIjogIkRlbnVuY2lhbiBhbWVuYXphcyBkdXJhbnRlIGxhIG1hcmNoYSBjb250cmEgbGEgdmlvbGVuY2lhIGRlIGfDqW5lcm8iLAogICAibGluayI6ICJodHRwOi8vd3d3LnJpb25lZ3JvLmNvbS5hci9jaXBvbGxldHRpL2RlbnVuY2lhbi1hbWVuYXphcy1kdXJhbnRlLWxhLW1hcmNoYS1jb250cmEtbGEtdmlvbGVuY2lhLWRlLWdlbmVyby1DWDIzNjU0NDQiLAogICAiZGlzcGxheUxpbmsiOiAid3d3LnJpb25lZ3JvLmNvbS5hciIsCiAgICJzbmlwcGV0IjogImhhY2UgMiBkw61hcyAuLi4gRGVudW5jaWFuIGFtZW5hemFzIGR1cmFudGUgbGEgbWFyY2hhIGNvbnRyYSBsYSB2aW9sZW5jaWEgZGUgZ8OpbmVyby4gKEZvdG86IFxuQWdlbmNpYSBDaXBvbGxldHRpKS4gQ29tcGFydGUgZXN0YSBub3RpY2lhLiBJTVBSSU1JIExBIFZFUlNJT07CoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJoYWNlIDIgZMOtYXMgXHUwMDNjYlx1MDAzZS4uLlx1MDAzYy9iXHUwMDNlIERlbnVuY2lhbiBhbWVuYXphcyBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIG1hcmNoYSBjb250cmEgbGEgdmlvbGVuY2lhIGRlIGfDqW5lcm8uIChGb3RvOiBcdTAwM2Niclx1MDAzZVxuQWdlbmNpYSBDaXBvbGxldHRpKS4gQ29tcGFydGUgZXN0YSBub3RpY2lhLiBJTVBSSU1JIExBIFZFUlNJT04mbmJzcDsuLi4iLAogICAiY2FjaGVJZCI6ICJDc0FqR3ZERDJoRUoiLAogICAiZm9ybWF0dGVkVXJsIjogInd3dy5yaW9uZWdyby5jb20uYXIvLi4uL2RlbnVuY2lhbi1hbWVuYXphcy1kdXJhbnRlLWxhLW1hcmNoYS1jb250cmEtbGEtIHZpb2xlbmNpYS1kZS1nZW5lcm8tQ1gyMzY1NDQ0IiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAid3d3LnJpb25lZ3JvLmNvbS5hci8uLi4vZGVudW5jaWFuLWFtZW5hemFzLVx1MDAzY2JcdTAwM2VkdXJhbnRlLWxhXHUwMDNjL2JcdTAwM2UtbWFyY2hhLWNvbnRyYS1sYS0gdmlvbGVuY2lhLWRlLWdlbmVyby1DWDIzNjU0NDQiLAogICAicGFnZW1hcCI6IHsKICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgIHsKICAgICAgIndpZHRoIjogIjMwMCIsCiAgICAgICJoZWlnaHQiOiAiMTY4IiwKICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4xLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NTZjRuRk9kV1d5QjJ6ZnM2ZmZwNEcwZzVJTUVIa1h1ZmVUcU8tMWhqUzc1VkZOcWN5U05RenFiSk0iCiAgICAgfQogICAgXSwKICAgICJtZXRhdGFncyI6IFsKICAgICB7CiAgICAgICJ0d2l0dGVyOmNyZWF0b3IiOiAiUmlvIE5lZ3JvIiwKICAgICAgInR3aXR0ZXI6dGl0bGUiOiAiRGVudW5jaWFuIGFtZW5hemFzIGR1cmFudGUgbGEgbWFyY2hhIGNvbnRyYSBsYSB2aW9sZW5jaWEgZGUgZ8OpbmVybyIsCiAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIkRlc2RlIHZhcmlhcyBhZ3J1cGFjaW9uZXMgYWN1c2Fyb24gYSB1biBob21icmUgZGUgYXB1bnRhcmxlcyBjb24gdW4gYXJtYSBkZSBmdWVnby4gU3VjZWRpw7MgZHVyYW50ZSB1biBlc2NyYWNoZSBhIHVuIGNvbWVyY2lvIGxvY2FsLCByZWxhY2lvbmFkbyBjb24gVGV4dGlsIE5ldXF1w6luLiIsCiAgICAgICJvZzp0aXRsZSI6ICJEZW51bmNpYW4gYW1lbmF6YXMgZHVyYW50ZSBsYSBtYXJjaGEgY29udHJhIGxhIHZpb2xlbmNpYSBkZSBnw6luZXJvIiwKICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIlRyYXMgbGEgbWFzaXZhIG1hbmlmZXN0YWNpw7NuIHF1ZSBzZSByZWFsaXrDsyBheWVyIGVuIGNvbnRyYSBkZSBsYSB2aW9sZW5jaWEgZGUgZ8OpbmVybywgZGVzZGUgbnVtZXJvc2FzIGFncnVwYWNpb25lcyBwb2zDrXRpY2FzIHkgc29jaWFsZXMgcHJlc2VudGFyb24gdW4uLi4iLAogICAgICAib2c6aW1hZ2UiOiAiaHR0cDovL3d3dy5yaW9uZWdyby5jb20uYXIvZG9jdW1lbnRzLzEvMC82ODB4NTEwLzBjNjUvNjgwZDM4MC9ub25lLzEyMzUwL1BWSUMvaW1hZ2VfY29udGVudF84MTYyMjY5XzIwMTcwMzA5MTMwMjAyLmpwZyIsCiAgICAgICJvZzp0eXBlIjogIkFydGljbGUiLAogICAgICAib2c6dXJsIjogImh0dHA6Ly93d3cucmlvbmVncm8uY29tLmFyL2NpcG9sbGV0dGkvZGVudW5jaWFuLWFtZW5hemFzLWR1cmFudGUtbGEtbWFyY2hhLWNvbnRyYS1sYS12aW9sZW5jaWEtZGUtZ2VuZXJvLUNYMjM2NTQ0NCIsCiAgICAgICJvZzpzaXRlX25hbWUiOiAid3d3LnJpb25lZ3JvLmNvbS5hciIsCiAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgiLAogICAgICAiZmI6YXBwX2lkIjogIjE3NjAzNzU0NTkzNjI5OSIsCiAgICAgICJ0d2l0dGVyOmNhcmQiOiAic3VtbWFyeV9sYXJnZV9pbWFnZSIsCiAgICAgICJ0d2l0dGVyOnNpdGUiOiAiQHJpb25lZ3JvY29tYXIiCiAgICAgfQogICAgXSwKICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgewogICAgICAic3JjIjogImh0dHA6Ly93d3cucmlvbmVncm8uY29tLmFyL2RvY3VtZW50cy8xLzAvNjgweDUxMC8wYzY1LzY4MGQzODAvbm9uZS8xMjM1MC9QVklDL2ltYWdlX2NvbnRlbnRfODE2MjI2OV8yMDE3MDMwOTEzMDIwMi5qcGciCiAgICAgfQogICAgXSwKICAgICJuZXdzYXJ0aWNsZSI6IFsKICAgICB7CiAgICAgICJpbWFnZSI6ICJodHRwOi8vd3d3LnJpb25lZ3JvLmNvbS5hci9kb2N1bWVudHMvMS8wLzY2MHg0OTUvMGM2My82NjBkMzcwL25vbmUvMTIzNTAvUFZORS9pbWFnZV9jb250ZW50XzgxNjIyNjlfMjAxNzAzMDkxMzAyMDIuanBnIgogICAgIH0KICAgIF0sCiAgICAibGlzdGl0ZW0iOiBbCiAgICAgewogICAgICAiaXRlbSI6ICJJTklDSU8iLAogICAgICAibmFtZSI6ICJJTklDSU8iLAogICAgICAicG9zaXRpb24iOiAiMSIKICAgICB9LAogICAgIHsKICAgICAgIml0ZW0iOiAiSGlwZXJsb2NhbGVzIiwKICAgICAgIm5hbWUiOiAiSGlwZXJsb2NhbGVzIiwKICAgICAgInBvc2l0aW9uIjogIjIiCiAgICAgfSwKICAgICB7CiAgICAgICJpdGVtIjogIkRlQ2lwb2xsZXR0aSIsCiAgICAgICJuYW1lIjogIkRlQ2lwb2xsZXR0aSIsCiAgICAgICJwb3NpdGlvbiI6ICIzIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIkNvcGEgRGF2aXMuIEVsIGZpbmFsIG1lbm9zIHBlbnNhZG86IGR1cmFudGUgbGEgbWFkcnVnYWRhLCBodWJvIC4uLiIsCiAgICJodG1sVGl0bGUiOiAiQ29wYSBEYXZpcy4gRWwgZmluYWwgbWVub3MgcGVuc2FkbzogZHVyYW50ZSBsYSBtYWRydWdhZGEsIGh1Ym8gLi4uIiwKICAgImxpbmsiOiAiaHR0cDovL3d3dy5sYW5hY2lvbi5jb20uYXIvMTk2MDM4OC1jb3BhLWRhdmlzLWVsLWZpbmFsLW1lbm9zLXBlbnNhZG8tZHVyYW50ZS1sYS1tYWRydWdhZGEtaHViby1jb250cm9sLWFudGlkb3Bpbmctc29ycHJlc2EtcGFyYS1sb3MtY2FtcGVvbmVzIiwKICAgImRpc3BsYXlMaW5rIjogInd3dy5sYW5hY2lvbi5jb20uYXIiLAogICAic25pcHBldCI6ICIyOCBOb3YgMjAxNiAuLi4gRWwgZmluYWwgbWVub3MgcGVuc2FkbzogZHVyYW50ZSBsYSBtYWRydWdhZGEsIGh1Ym8gY29udHJvbCBhbnRpZG9waW5nIFxuc29ycHJlc2EgcGFyYSBsb3MgY2FtcGVvbmVzLiBMdWVnbyBkZSBsb3MgZmVzdGVqbyDDrW50aW1vcywgZWwgZXF1aXBvwqAuLi4iLAogICAiaHRtbFNuaXBwZXQiOiAiMjggTm92IDIwMTYgXHUwMDNjYlx1MDAzZS4uLlx1MDAzYy9iXHUwMDNlIEVsIGZpbmFsIG1lbm9zIHBlbnNhZG86IFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgbWFkcnVnYWRhLCBodWJvIGNvbnRyb2wgYW50aWRvcGluZyBcdTAwM2Niclx1MDAzZVxuc29ycHJlc2EgcGFyYSBsb3MgY2FtcGVvbmVzLiBMdWVnbyBkZSBsb3MgZmVzdGVqbyDDrW50aW1vcywgZWwgZXF1aXBvJm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAiT1Y0QS1fNnNJSkVKIiwKICAgImZvcm1hdHRlZFVybCI6ICJ3d3cubGFuYWNpb24uY29tLmFyLzE5NjAzODgtY29wYS1kYXZpcy1lbC1maW5hbC1tZW5vcy1wZW5zYWRvLWR1cmFudGUtIGxhLW1hZHJ1Z2FkYS1odWJvLWNvbnRyb2wtYW50aWRvcGluZy1zb3JwcmVzYS1wYXJhLWxvcy1jYW1wZW9uZXMiLAogICAiaHRtbEZvcm1hdHRlZFVybCI6ICJ3d3cubGFuYWNpb24uY29tLmFyLzE5NjAzODgtY29wYS1kYXZpcy1lbC1maW5hbC1tZW5vcy1wZW5zYWRvLVx1MDAzY2JcdTAwM2VkdXJhbnRlLSBsYVx1MDAzYy9iXHUwMDNlLW1hZHJ1Z2FkYS1odWJvLWNvbnRyb2wtYW50aWRvcGluZy1zb3JwcmVzYS1wYXJhLWxvcy1jYW1wZW9uZXMiLAogICAicGFnZW1hcCI6IHsKICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgIHsKICAgICAgIndpZHRoIjogIjMwMCIsCiAgICAgICJoZWlnaHQiOiAiMTY4IiwKICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4yLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NSaFlzRmQ1bmctcjRWMGhLTTBROGs0dUtIclBBV0JHam5TNTlSazBqbm9KZjYwS3l2dUM1bmdRemciCiAgICAgfQogICAgXSwKICAgICJtZXRhdGFncyI6IFsKICAgICB7CiAgICAgICJjb3B5cmlnaHQiOiAiTEEgTkFDSU9OIiwKICAgICAgInRpdGxlIjogIkNvcGEgRGF2aXMuIEVsIGZpbmFsIG1lbm9zIHBlbnNhZG86IGR1cmFudGUgbGEgbWFkcnVnYWRhLCBodWJvIGNvbnRyb2wgYW50aWRvcGluZyBzb3JwcmVzYSBwYXJhIGxvcyBjYW1wZW9uZXMgLSAyOC4xMS4yMDE2IiwKICAgICAgIm5ld3Nfa2V5d29yZHMiOiAiQ29wYSBEYXZpcy4gRWwgZmluYWwgbWVub3MgcGVuc2FkbzogZHVyYW50ZSBsYSBtYWRydWdhZGEsIGh1Ym8gY29udHJvbCBhbnRpZG9waW5nIHNvcnByZXNhIHBhcmEgbG9zIGNhbXBlb25lcywgRGVwb3J0aXZhLCBKdWFuIE1hcnTDrW4gZGVsIFBvdHJvLCBDb3BhIERhdmlzLCBHdWlkbyBQZWxsYSwgRmVkZXJpY28gRGVsYm9uaXMsIExlb25hcmRvIE1heWVyLCBEYW5pZWwgT3JzYW5pYywgRGVwb3J0ZXMsIFRlbmlzIiwKICAgICAgImZiOmFkbWlucyI6ICIxMDY5MjAzOTEyIiwKICAgICAgImZiOmFwcF9pZCI6ICIyMDUzMjYxOTk0OTAzMjEiLAogICAgICAib2c6dHlwZSI6ICJhcnRpY2xlIiwKICAgICAgIm9nOnRpdGxlIjogIkNvcGEgRGF2aXMuIEVsIGZpbmFsIG1lbm9zIHBlbnNhZG86IGR1cmFudGUgbGEgbWFkcnVnYWRhLCBodWJvIGNvbnRyb2wgYW50aWRvcGluZyBzb3JwcmVzYSBwYXJhIGxvcyBjYW1wZW9uZXMiLAogICAgICAib2c6ZGVzY3JpcHRpb24iOiAiTHVlZ28gZGUgbG9zIGZlc3Rlam8gw61udGltb3MsIGVsIGVxdWlwbyBhcmdlbnRpbm8gcmVjaWJpw7MgdW5hIGluZXNwZXJhZGEgdmlzaXRhIGRlIGxhIG9yZ2FuaXphY2nDs24gcGFyYSBzb21ldGVyIGEgbG9zIGp1Z2Fkb3JlcyBhIGV4w6FtZW5lcyBkZSBzYW5ncmUgeSBkZSBvcmluYSIsCiAgICAgICJvZzppbWFnZSI6ICJodHRwOi8vYnVja2V0LmdsYW5hY2lvbi5jb20vYW5leG9zL2ZvdG9zLzA2LzIzMDkxMDYuanBnIiwKICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5IiwKICAgICAgInR3aXR0ZXI6c2l0ZSI6ICJATEFOQUNJT04iLAogICAgICAidHdpdHRlcjp0aXRsZSI6ICJDb3BhIERhdmlzLiBFbCBmaW5hbCBtZW5vcyBwZW5zYWRvOiBkdXJhbnRlIGxhIG1hZHJ1Z2FkYSwgaHVibyBjb250cm9sIGFudGlkb3Bpbmcgc29ycHJlc2EgcGFyYSBsb3MgY2FtcGVvbmVzIiwKICAgICAgInR3aXR0ZXI6Y3JlYXRvciI6ICJAc2ViYXRvcm9rIiwKICAgICAgImFwcGxpY2F0aW9uLW5hbWUiOiAiTEEgTkFDSU9OIiwKICAgICAgIm1zYXBwbGljYXRpb24tc3RhcnR1cmwiOiAiaHR0cDovL3d3dy5sYW5hY2lvbi5jb20uYXIvIiwKICAgICAgIm1zYXBwbGljYXRpb24tdG9vbHRpcCI6ICJOb3RpY2lhcyBhY3R1YWxpemFkYXMgbGFzIDI0IGhzLiIsCiAgICAgICJtc2FwcGxpY2F0aW9uLXdpbmRvdyI6ICJ3aWR0aD04MDA7aGVpZ2h0PTYwMCIsCiAgICAgICJtc2FwcGxpY2F0aW9uLW5hdmJ1dHRvbi1jb2xvciI6ICIjMEVBOERDIiwKICAgICAgIm1zYXBwbGljYXRpb24tdGFzayI6ICJuYW1lPVVsdGltYXMgbm90aWNpYXM7YWN0aW9uLXVyaT1odHRwOi8vd3d3LmxhbmFjaW9uLmNvbS5hci91bHRpbWFzLW5vdGljaWFzO2ljb24tdXJpPWh0dHA6Ly93d3cubGFuYWNpb24uY29tLmFyL2l0ZW0xLmljbyIsCiAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiwKICAgICAgImN4ZW5zZXBhcnNlOnBhZ2VjbGFzcyI6ICJhcnRpY2xlIgogICAgIH0KICAgIF0sCiAgICAiY3NlX2ltYWdlIjogWwogICAgIHsKICAgICAgInNyYyI6ICJodHRwOi8vYnVja2V0LmdsYW5hY2lvbi5jb20vYW5leG9zL2ZvdG9zLzA2LzIzMDkxMDYuanBnIgogICAgIH0KICAgIF0sCiAgICAibmV3c2FydGljbGUiOiBbCiAgICAgewogICAgICAiaGVhZGxpbmUiOiAiQ29wYSBEYXZpcy4gRWwgZmluYWwgbWVub3MgcGVuc2FkbzogZHVyYW50ZSBsYSBtYWRydWdhZGEsIGh1Ym8gY29udHJvbCBhbnRpZG9waW5nIHNvcnByZXNhIHBhcmEgbG9zIGNhbXBlb25lcyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJMdWVnbyBkZSBsb3MgZmVzdGVqbyDDrW50aW1vcywgZWwgZXF1aXBvIGFyZ2VudGlubyByZWNpYmnDsyB1bmEgaW5lc3BlcmFkYSB2aXNpdGEgZGUgbGEgb3JnYW5pemFjacOzbiBwYXJhIHNvbWV0ZXIgYSBsb3MganVnYWRvcmVzIGEgZXjDoW1lbmVzIGRlIHNhbmdyZSB5IGRlIG9yaW5hIiwKICAgICAgImF1dGhvciI6ICJTZWJhc3Rpw6FuIFRvcm9rIiwKICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAxNi0xMS0yOCAwOToxNTowMCIsCiAgICAgICJhcnRpY2xlYm9keSI6ICJUcmFzIGVsIGZlc3Rlam8gw61udGltbywgRGVsIFBvdHJvIHNlIHR1dm8gcXVlIHNvbWV0ZXIgYWwgY29udHJvIGFudGlkb3BpbmcuIEZvdG86IEBDb3BhRGF2aXMxNjc1IFpBR1JFQi4tIExvcyBjYW1wZW9uZXMgZGUgbGEgQ29wYSBEYXZpcyB0dXZpZXJvbiBlbCBmaW5hbCBkZSBmaWVzdGEgbWVub3MgcGVuc2FkbywgeWEgcXVlIHJlY2liaWVyby4uLiIsCiAgICAgICJpbWFnZSI6ICJodHRwOi8vYnVja2V0MS5nbGFuYWNpb24uY29tL2FuZXhvcy9mb3Rvcy8wNi9jb3BhLWRhdmlzLTIzMDkxMDZ3NjIwLmpwZyIsCiAgICAgICJrZXl3b3JkcyI6ICJFbiBlc3RhIG5vdGE6SnVhbiBNYXJ0w61uIGRlbCBQb3Ryb0d1aWRvIFBlbGxhRmVkZXJpY28gRGVsYm9uaXNMZW9uYXJkbyBNYXllckRhbmllbCBPcnNhbmljIgogICAgIH0KICAgIF0sCiAgICAic2VhcmNoYWN0aW9uIjogWwogICAgIHsKICAgICAgInRhcmdldCI6ICJodHRwOi8vYnVzY2FyLmxhbmFjaW9uLmNvbS5hci8iLAogICAgICAicXVlcnktaW5wdXQiOiAibmFtZT1jYWRlbmEtbW92aWwiCiAgICAgfSwKICAgICB7CiAgICAgICJ0YXJnZXQiOiAiaHR0cDovL2J1c2Nhci5sYW5hY2lvbi5jb20uYXIvIiwKICAgICAgInF1ZXJ5LWlucHV0IjogIm5hbWU9Y2FkZW5hIgogICAgIH0KICAgIF0sCiAgICAibGlzdGl0ZW0iOiBbCiAgICAgewogICAgICAiaXRlbSI6ICJMQSBOQUNJT04iLAogICAgICAibmFtZSI6ICJMQSBOQUNJT04iLAogICAgICAicG9zaXRpb24iOiAiMSIKICAgICB9LAogICAgIHsKICAgICAgIml0ZW0iOiAiRGVwb3J0ZXMiLAogICAgICAibmFtZSI6ICJEZXBvcnRlcyIsCiAgICAgICJwb3NpdGlvbiI6ICIyIgogICAgIH0sCiAgICAgewogICAgICAiaXRlbSI6ICJDb3BhIERhdmlzIiwKICAgICAgIm5hbWUiOiAiQ29wYSBEYXZpcyIsCiAgICAgICJwb3NpdGlvbiI6ICIzIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIkNpcG9sbGV0dGk6IG9yZ2FuaXphY2lvbmVzIGRlIG11amVyZXMgZGVudW5jaWFuIGFtZW5hemFzIGNvbiAuLi4iLAogICAiaHRtbFRpdGxlIjogIkNpcG9sbGV0dGk6IG9yZ2FuaXphY2lvbmVzIGRlIG11amVyZXMgZGVudW5jaWFuIGFtZW5hemFzIGNvbiAuLi4iLAogICAibGluayI6ICJodHRwOi8vd3d3LmxhaXpxdWllcmRhZGlhcmlvLmNvbS9DaXBvbGxldHRpLW9yZ2FuaXphY2lvbmVzLWRlLW11amVyZXMtZGVudW5jaWFuLWFtZW5hemFzLWNvbi1hcm1hLWR1cmFudGUtbGEtbWFyY2hhLWRlbC04LWRlLW1hcnpvIiwKICAgImRpc3BsYXlMaW5rIjogInd3dy5sYWl6cXVpZXJkYWRpYXJpby5jb20iLAogICAic25pcHBldCI6ICJoYWNlIDIgZMOtYXMgLi4uIC4uLiBlbnRyZSBvdHJhcyBvcmdhbml6YWNpb25lcywgZGVudW5jaWFyb24gZXN0YSBtYcOxYW5hIGxhcyBhbWVuYXphcyByZWNpYmlkYXMgXG5kdXJhbnRlIGxhIG1hcmNoYSBkZSBtdWplcmVzIGRlIGF5ZXIgcG9yIHBhcnRlIGRlbCBkdWXDsW8gZGXCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJoYWNlIDIgZMOtYXMgXHUwMDNjYlx1MDAzZS4uLlx1MDAzYy9iXHUwMDNlIC4uLiBlbnRyZSBvdHJhcyBvcmdhbml6YWNpb25lcywgZGVudW5jaWFyb24gZXN0YSBtYcOxYW5hIGxhcyBhbWVuYXphcyByZWNpYmlkYXMgXHUwMDNjYnJcdTAwM2Vcblx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgbWFyY2hhIGRlIG11amVyZXMgZGUgYXllciBwb3IgcGFydGUgZGVsIGR1ZcOxbyBkZSZuYnNwOy4uLiIsCiAgICJjYWNoZUlkIjogIlpqX1E0a2JDZnAwSiIsCiAgICJmb3JtYXR0ZWRVcmwiOiAid3d3LmxhaXpxdWllcmRhZGlhcmlvLmNvbS9DaXBvbGxldHRpLW9yZ2FuaXphY2lvbmVzLWRlLW11amVyZXMtZGVudW5jaWFuLSBhbWVuYXphcy1jb24tYXJtYS1kdXJhbnRlLWxhLW1hcmNoYS1kZWwtOC1kZS1tYXJ6byIsCiAgICJodG1sRm9ybWF0dGVkVXJsIjogInd3dy5sYWl6cXVpZXJkYWRpYXJpby5jb20vQ2lwb2xsZXR0aS1vcmdhbml6YWNpb25lcy1kZS1tdWplcmVzLWRlbnVuY2lhbi0gYW1lbmF6YXMtY29uLWFybWEtXHUwMDNjYlx1MDAzZWR1cmFudGUtbGFcdTAwM2MvYlx1MDAzZS1tYXJjaGEtZGVsLTgtZGUtbWFyem8iLAogICAicGFnZW1hcCI6IHsKICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgIHsKICAgICAgIndpZHRoIjogIjI5OSIsCiAgICAgICJoZWlnaHQiOiAiMTY4IiwKICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4zLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NSU09vdlRxbFVSdTA1eHFWdjVOYmJBN3g1NU9aOGtqWmxzajMwcElqQy10ckdaLUFXYkYyengwMVlkIgogICAgIH0KICAgIF0sCiAgICAibWV0YXRhZ3MiOiBbCiAgICAgewogICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiLAogICAgICAiYXV0aG9yIjogIlJlZGFjY2nDs24gUsOtbyBOZWdybyIsCiAgICAgICJvZzpzaXRlX25hbWUiOiAiTGEgSXpxdWllcmRhIERpYXJpbyIsCiAgICAgICJvZzp1cmwiOiAiaHR0cDovL3d3dy5sYWl6cXVpZXJkYWRpYXJpby5jb20vQ2lwb2xsZXR0aS1vcmdhbml6YWNpb25lcy1kZS1tdWplcmVzLWRlbnVuY2lhbi1hbWVuYXphcy1jb24tYXJtYS1kdXJhbnRlLWxhLW1hcmNoYS1kZWwtOC1kZS1tYXJ6byIsCiAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAib2c6dGl0bGUiOiAiQ2lwb2xsZXR0aTogb3JnYW5pemFjaW9uZXMgZGUgbXVqZXJlcyBkZW51bmNpYW4gYW1lbmF6YXMgY29uIGFybWEgZHVyYW50ZSBsYSBtYXJjaGEgZGVsIDggZGUgbWFyem8iLAogICAgICAib2c6ZGVzY3JpcHRpb24iOiAiTGEgZGVudW5jaWEgbGEgcmVhbGl6YXJvbiBlc3RhIG1hw7FhbmEgZW4gbGEgZmlzY2Fsw61hIGRlIENpcG9sbGV0dGkuIEVzIGNvbnRyYSBlbCBwcm9waWV0YXJpbyBkZWwgYmFyIHkgdGllbmRhIEFNSUNJIGRlIGVzYSBsb2NhbGlkYWQsIHZpbmN1bGFkbyBhIGxhIGZhbWlsaWEgSHVlcnRhLCBkdWXDsW9zIGRlIFRleHRpbCBOZXVxdcOpbi4iLAogICAgICAib2c6aW1hZ2UiOiAiaHR0cDovL3d3dy5sYWl6cXVpZXJkYWRpYXJpby5jb20vSU1HL2FydG9uNjg4NDAuanBnIiwKICAgICAgIm9nOmltYWdlOndpZHRoIjogIjgwNiIsCiAgICAgICJvZzppbWFnZTpoZWlnaHQiOiAiNDU0IiwKICAgICAgIm9nOmxvY2FsZSI6ICJlc19MQSIsCiAgICAgICJ0d2l0dGVyOmNhcmQiOiAic3VtbWFyeV9sYXJnZV9pbWFnZSIsCiAgICAgICJ0d2l0dGVyOnNpdGUiOiAiQGl6cXVpZXJkYWRpYXJpbyIsCiAgICAgICJ0d2l0dGVyOnRpdGxlIjogIkNpcG9sbGV0dGk6IG9yZ2FuaXphY2lvbmVzIGRlIG11amVyZXMgZGVudW5jaWFuIGFtZW5hemFzIGNvbiBhcm1hIGR1cmFudGUgbGEgbWFyY2hhIGRlbCA4IGRlIG1hcnpvIiwKICAgICAgInR3aXR0ZXI6ZGVzY3JpcHRpb24iOiAiTGEgZGVudW5jaWEgbGEgcmVhbGl6YXJvbiBlc3RhIG1hw7FhbmEgZW4gbGEgZmlzY2Fsw61hIGRlIENpcG9sbGV0dGkuIEVzIGNvbnRyYSBlbCBwcm9waWV0YXJpbyBkZWwgYmFyIHkgdGllbmRhIEFNSUNJIGRlIGVzYSBsb2NhbGlkYWQsIHZpbmN1bGFkbyBhIGxhIGZhbWlsaWEgSHVlcnRhLCBkdWXDsW9zIGRlIFRleHRpbCBOZXVxdcOpbi4iLAogICAgICAidHdpdHRlcjppbWFnZSI6ICJodHRwOi8vd3d3LmxhaXpxdWllcmRhZGlhcmlvLmNvbS9JTUcvYXJ0b242ODg0MC5qcGciLAogICAgICAiZmI6YXBwX2lkIjogIjczMjYwODUyMzQ2MzI2NSIsCiAgICAgICJmYjphZG1pbnMiOiAiMTYwMDIwMzQxNyIKICAgICB9CiAgICBdLAogICAgImNzZV9pbWFnZSI6IFsKICAgICB7CiAgICAgICJzcmMiOiAiaHR0cDovL3d3dy5sYWl6cXVpZXJkYWRpYXJpby5jb20vSU1HL2FydG9uNjg4NDAuanBnIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIlVuIGZ1ZXJ0ZSB0ZW1wb3JhbCBhem90w7MgYSBsYSBDaXVkYWQgeSBhbCBDb251cmJhbm8gZHVyYW50ZSBsYSAuLi4iLAogICAiaHRtbFRpdGxlIjogIlVuIGZ1ZXJ0ZSB0ZW1wb3JhbCBhem90w7MgYSBsYSBDaXVkYWQgeSBhbCBDb251cmJhbm8gZHVyYW50ZSBsYSAuLi4iLAogICAibGluayI6ICJodHRwOi8vd3d3Lm1pbnV0b3Vuby5jb20vbm90YXMvMTU0MDQzNi11bi1mdWVydGUtdGVtcG9yYWwtYXpvdG8tbGEtY2l1ZGFkLXktYWwtY29udXJiYW5vLWxhLW1hZHJ1Z2FkYS1lc3RlLWp1ZXZlcyIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cubWludXRvdW5vLmNvbSIsCiAgICJzbmlwcGV0IjogImhhY2UgMiBkw61hcyAuLi4gRWwgZGlyZWN0b3IgZGUgRGVmZW5zYSBDaXZpbCBkZSBsYSBDaXVkYWQgZGUgQnVlbm9zIEFpcmVzLCBSYcO6bCBHYXJuaWNhLCBcbmFzZWd1csOzIGVzdGUganVldmVzIHF1ZSA0NyDDoXJib2xlcyBzZSBjYXllcm9uIGR1cmFudGUgbGEgdG9ybWVudGHCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJoYWNlIDIgZMOtYXMgXHUwMDNjYlx1MDAzZS4uLlx1MDAzYy9iXHUwMDNlIEVsIGRpcmVjdG9yIGRlIERlZmVuc2EgQ2l2aWwgZGUgbGEgQ2l1ZGFkIGRlIEJ1ZW5vcyBBaXJlcywgUmHDumwgR2FybmljYSwgXHUwMDNjYnJcdTAwM2VcbmFzZWd1csOzIGVzdGUganVldmVzIHF1ZSA0NyDDoXJib2xlcyBzZSBjYXllcm9uIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgdG9ybWVudGEmbmJzcDsuLi4iLAogICAiY2FjaGVJZCI6ICJsRkRFMXJQZ1JNMEoiLAogICAiZm9ybWF0dGVkVXJsIjogInd3dy5taW51dG91bm8uY29tLy4uLi8xNTQwNDM2LXVuLWZ1ZXJ0ZS10ZW1wb3JhbC1hem90by1sYS1jaXVkYWQteS1hbC0gY29udXJiYW5vLWxhLW1hZHJ1Z2FkYS1lc3RlLWp1ZXZlcyIsCiAgICJodG1sRm9ybWF0dGVkVXJsIjogInd3dy5taW51dG91bm8uY29tLy4uLi8xNTQwNDM2LXVuLWZ1ZXJ0ZS10ZW1wb3JhbC1hem90by1sYS1jaXVkYWQteS1hbC0gY29udXJiYW5vLWxhLW1hZHJ1Z2FkYS1lc3RlLWp1ZXZlcyIsCiAgICJwYWdlbWFwIjogewogICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgewogICAgICAid2lkdGgiOiAiMzAwIiwKICAgICAgImhlaWdodCI6ICIxNjgiLAogICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjMuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1Nhc3B0dVpEdVRZU2JmY0FDNURHb0RSYkc5bnBadzZjS3N5bmdsZlFGV21pQ0hndXJmczd3UGRZbGMiCiAgICAgfQogICAgXSwKICAgICJtZXRhdGFncyI6IFsKICAgICB7CiAgICAgICJvZzpzaXRlX25hbWUiOiAiTWludXRvIFVubyIsCiAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICLDgXJib2xlcyBjYcOtZG9zLCBhdXRvcyBhcGxhc3RhZG9zLCB0cmVuZXMgY29uIGRlbW9yYXMgeSBjb21wbGljYWNpb25lcyBlbiAgZWwgdHLDoW5zaXRvIHNvbiBhbGd1bmFzIGRlIGxhcyBjb25zZWN1ZW5jaWFzIHBvciBlbCBmdWVydGUgdGVtcG9yYWwgcXVlICBlbiBsYSBtYWRydWdhZGEgZGUgZXN0ZSBqdWV2ZXMgYXpvdMOzIGEgbGEgQ2l1ZGFkIHkgYWwgY29udXJiYW5vIGJvbmFlcmVuc2UuIiwKICAgICAgIm9nOnVybCI6ICJodHRwOi8vd3d3Lm1pbnV0b3Vuby5jb20vbm90YXMvMTU0MDQzNi11bi1mdWVydGUtdGVtcG9yYWwtYXpvdG8tbGEtY2l1ZGFkLXktYWwtY29udXJiYW5vLWxhLW1hZHJ1Z2FkYS1lc3RlLWp1ZXZlcyIsCiAgICAgICJvZzp0aXRsZSI6ICJVbiBmdWVydGUgdGVtcG9yYWwgYXpvdMOzIGEgbGEgQ2l1ZGFkIHkgYWwgQ29udXJiYW5vIGR1cmFudGUgbGEgbWFkcnVnYWRhIGRlIGVzdGUganVldmVzIHwgVGVtcG9yYWwsIENsaW1hIiwKICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICJvZzppbWFnZSI6ICJodHRwOi8vc3RhdGljLm1pbnV0b3Vuby5jb20vYWRqdW50b3MvMTUwL2ltYWdlbmVzLzAxMS8yNzcvMDAxMTI3NzI0OC5qcGciLAogICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiLAogICAgICAiZmI6YXBwX2lkIjogIjExNTMyNTkzMzI4MCIsCiAgICAgICJhbDphbmRyb2lkOnVybCI6ICJtb2JpbGVhcHAvbm90YSIsCiAgICAgICJhbDppb3M6dXJsIjogIm1vYmlsZWFwcC9ub3RhIiwKICAgICAgImRpc3RyaWJ1dGlvbiI6ICJnbG9iYWwiLAogICAgICAicmF0aW5nIjogImdlbmVyYWwiLAogICAgICAibGFuZ3VhZ2UiOiAiZXNfRVMiCiAgICAgfQogICAgXSwKICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgewogICAgICAic3JjIjogImh0dHA6Ly9zdGF0aWMubWludXRvdW5vLmNvbS9hZGp1bnRvcy8xNTAvaW1hZ2VuZXMvMDExLzI3Ny8wMDExMjc3MjQ4LmpwZyIKICAgICB9CiAgICBdCiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICJ0aXRsZSI6ICJFbCBkZXNlc3BlcmFkbyBwZWRpZG8gZGUgbG9zIHRyYWJhamFkb3JlcyBhIGEgU2NobWlkIGR1cmFudGUgbGEgLi4uIiwKICAgImh0bWxUaXRsZSI6ICJFbCBkZXNlc3BlcmFkbyBwZWRpZG8gZGUgbG9zIHRyYWJhamFkb3JlcyBhIGEgU2NobWlkIGR1cmFudGUgbGEgLi4uIiwKICAgImxpbmsiOiAiaHR0cDovL3d3dy5lbGRlc3RhcGV3ZWIuY29tL2VsLWRlc2VzcGVyYWRvLXBlZGlkby1sb3MtdHJhYmFqYWRvcmVzLWEtc2NobWlkLWxhLW1hcmNoYS1sYS1jZ3QtbjI2NDk1IiwKICAgImRpc3BsYXlMaW5rIjogInd3dy5lbGRlc3RhcGV3ZWIuY29tIiwKICAgInNuaXBwZXQiOiAiaGFjZSAyIGTDrWFzIC4uLiBFbCBkZXNlc3BlcmFkbyBwZWRpZG8gZGUgbG9zIHRyYWJhamFkb3JlcyBhIGEgU2NobWlkIGR1cmFudGUgbGEgbWFyY2hhIGRlIGxhIFxuQ0dULiBVbiBncnVwbyBkZSBtYW5pZmVzdGFudGVzIHNlIGFjZXJjw7MgYWwgcGFsY28gcGFyYcKgLi4uIiwKICAgImh0bWxTbmlwcGV0IjogImhhY2UgMiBkw61hcyBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgRWwgZGVzZXNwZXJhZG8gcGVkaWRvIGRlIGxvcyB0cmFiYWphZG9yZXMgYSBhIFNjaG1pZCBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIG1hcmNoYSBkZSBsYSBcdTAwM2Niclx1MDAzZVxuQ0dULiBVbiBncnVwbyBkZSBtYW5pZmVzdGFudGVzIHNlIGFjZXJjw7MgYWwgcGFsY28gcGFyYSZuYnNwOy4uLiIsCiAgICJjYWNoZUlkIjogImtkdEtleVhJQnhrSiIsCiAgICJmb3JtYXR0ZWRVcmwiOiAid3d3LmVsZGVzdGFwZXdlYi5jb20vZWwtZGVzZXNwZXJhZG8tcGVkaWRvLWxvcy10cmFiYWphZG9yZXMtYS1zY2htaWQtbGEtIG1hcmNoYS1sYS1jZ3QtbjI2NDk1IiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAid3d3LmVsZGVzdGFwZXdlYi5jb20vZWwtZGVzZXNwZXJhZG8tcGVkaWRvLWxvcy10cmFiYWphZG9yZXMtYS1zY2htaWQtbGEtIG1hcmNoYS1sYS1jZ3QtbjI2NDk1IiwKICAgInBhZ2VtYXAiOiB7CiAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICB7CiAgICAgICJ3aWR0aCI6ICIyODciLAogICAgICAiaGVpZ2h0IjogIjE3NSIsCiAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMi5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjVFlCQTF3OVhaV2Nfd2oydk8tTmVVbHp5ZWZTeE1acW84cUtpYTFUY2w4RWluUVU5V04yUnZ0UUxvIgogICAgIH0KICAgIF0sCiAgICAibWV0YXRhZ3MiOiBbCiAgICAgewogICAgICAib2c6aW1hZ2UiOiAiaHR0cDovL21lZGlhLmVsZGVzdGFwZXdlYi5jb20vYWRqdW50b3MvMTc3L2ltYWdlbmVzLzAwMC8zMTQvMDAwMDMxNDU0OS5qcGciLAogICAgICAib2c6dHlwZSI6ICJhcnRpY2xlIiwKICAgICAgIm9nOnNpdGVfbmFtZSI6ICJFbCBEZXN0YXBlIFdlYiIsCiAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJVbiBncnVwbyBkZSBtYW5pZmVzdGFudGVzIHNlIGFjZXJjw7MgYWwgcGFsY28gcGFyYSByZWNsYW1hcmxlIGFsIHRyaXVudmlyYXRvIHF1ZSBlbmR1cmV6Y2Egc3UgcG9zdHVyYSB5IHF1ZWTDsyByZWdpc3RyYWRvIGVuIHVuIHZpZGVvOiBcdTAwM2NiXHUwMDNlXCLCoUVsIHBhcm8gdGllbmUgcXVlIHNlciB5YSwgbG9jbyFcIi5cdTAwM2MvYlx1MDAzZSIsCiAgICAgICJvZzp1cmwiOiAiaHR0cDovL3d3dy5lbGRlc3RhcGV3ZWIuY29tL2VsLWRlc2VzcGVyYWRvLXBlZGlkby1sb3MtdHJhYmFqYWRvcmVzLWEtc2NobWlkLWxhLW1hcmNoYS1sYS1jZ3QtbjI2NDk1IiwKICAgICAgIm9nOnRpdGxlIjogIkVsIGRlc2VzcGVyYWRvIHBlZGlkbyBkZSBsb3MgdHJhYmFqYWRvcmVzIGEgYSBTY2htaWQgwqAiLAogICAgICAib2c6aW1hZ2U6d2lkdGgiOiAiNzcwIiwKICAgICAgIm9nOmltYWdlOmhlaWdodCI6ICI0NzEiLAogICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAidHdpdHRlcjpzaXRlIjogIkBlbGRlc3RhcGV3ZWIiLAogICAgICAidHdpdHRlcjp0aXRsZSI6ICJFbCBkZXNlc3BlcmFkbyBwZWRpZG8gZGUgbG9zIHRyYWJhamFkb3JlcyBhIGEgU2NobWlkIMKgIiwKICAgICAgInR3aXR0ZXI6ZGVzY3JpcHRpb24iOiAiVW4gZ3J1cG8gZGUgbWFuaWZlc3RhbnRlcyBzZSBhY2VyY8OzIGFsIHBhbGNvIHBhcmEgcmVjbGFtYXJsZSBhbCB0cml1bnZpcmF0byBxdWUgZW5kdXJlemNhIHN1IHBvc3R1cmEgeSBxdWVkw7MgcmVnaXN0cmFkbyBlbiB1biB2aWRlbzogwqFFbCBwYXJvIHRpZW5lIHF1ZSBzZXIgeWEsIGxvY28hLiIsCiAgICAgICJ0d2l0dGVyOmNyZWF0b3IiOiAiQGVsZGVzdGFwZXdlYiIsCiAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHA6Ly9tZWRpYS5lbGRlc3RhcGV3ZWIuY29tL2FkanVudG9zLzE3Ny9pbWFnZW5lcy8wMDAvMzE0LzAwMDAzMTQ1NDkuanBnIiwKICAgICAgInZpZXdwb3J0IjogInVzZXItc2NhbGFibGU9bm8gd2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSIsCiAgICAgICJmYjpwYWdlcyI6ICIxNTQxNjU2MTc5NzczMzYiLAogICAgICAiYWw6YW5kcm9pZDp1cmwiOiAibW9iaWxlYXBwL25vdGEiLAogICAgICAiYWw6aW9zOnVybCI6ICJtb2JpbGVhcHAvbm90YSIsCiAgICAgICJkaXN0cmlidXRpb24iOiAiZ2xvYmFsIiwKICAgICAgInJhdGluZyI6ICJnZW5lcmFsIiwKICAgICAgImxhbmd1YWdlIjogImVzX0FSIgogICAgIH0KICAgIF0sCiAgICAiY3NlX2ltYWdlIjogWwogICAgIHsKICAgICAgInNyYyI6ICJodHRwOi8vbWVkaWEuZWxkZXN0YXBld2ViLmNvbS9hZGp1bnRvcy8xNzcvaW1hZ2VuZXMvMDAwLzMxNC8wMDAwMzE0NTQ5LmpwZyIKICAgICB9CiAgICBdCiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICJ0aXRsZSI6ICJFbCB1c28gZGVsIGNlbHVsYXIgZHVyYW50ZSBsYSBjb21pZGEsIHVuIGZhc3RpZGlvIHBhcmEgbG9zIGFyZ2VudGlub3MgLi4uIiwKICAgImh0bWxUaXRsZSI6ICJFbCB1c28gZGVsIGNlbHVsYXIgZHVyYW50ZSBsYSBjb21pZGEsIHVuIGZhc3RpZGlvIHBhcmEgbG9zIGFyZ2VudGlub3MgLi4uIiwKICAgImxpbmsiOiAiaHR0cDovL3d3dy5sYW5hY2lvbi5jb20uYXIvMTk3MTUwOC1lbC11c28tZGVsLWNlbHVsYXItZHVyYW50ZS1sYS1jb21pZGEtdW4tZmFzdGlkaW8tcGFyYS1sb3MtYXJnZW50aW5vcyIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cubGFuYWNpb24uY29tLmFyIiwKICAgInNuaXBwZXQiOiAiMzAgRGljIDIwMTYgLi4uIEVsIHVzbyBkZWwgY2VsdWxhciBkdXJhbnRlIGxhIGNvbWlkYSwgdW4gZmFzdGlkaW8gcGFyYSBsb3MgYXJnZW50aW5vcy4gRWwgNjQlIGRlIFxucXVpZW5lcyByZXNwb25kaWVyb24gdW5hIGVuY3Vlc3RhIGxvY2FsIGNvbnNpZGVyYSBtdXnCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICIzMCBEaWMgMjAxNiBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgRWwgdXNvIGRlbCBjZWx1bGFyIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgY29taWRhLCB1biBmYXN0aWRpbyBwYXJhIGxvcyBhcmdlbnRpbm9zLiBFbCA2NCUgZGUgXHUwMDNjYnJcdTAwM2VcbnF1aWVuZXMgcmVzcG9uZGllcm9uIHVuYSBlbmN1ZXN0YSBsb2NhbCBjb25zaWRlcmEgbXV5Jm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAibm9SaEJMSkU5cllKIiwKICAgImZvcm1hdHRlZFVybCI6ICJ3d3cubGFuYWNpb24uY29tLmFyLzE5NzE1MDgtZWwtdXNvLWRlbC1jZWx1bGFyLWR1cmFudGUtbGEtY29taWRhLXVuLSBmYXN0aWRpby1wYXJhLWxvcy1hcmdlbnRpbm9zIiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAid3d3LmxhbmFjaW9uLmNvbS5hci8xOTcxNTA4LWVsLXVzby1kZWwtY2VsdWxhci1cdTAwM2NiXHUwMDNlZHVyYW50ZS1sYVx1MDAzYy9iXHUwMDNlLWNvbWlkYS11bi0gZmFzdGlkaW8tcGFyYS1sb3MtYXJnZW50aW5vcyIsCiAgICJwYWdlbWFwIjogewogICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgewogICAgICAid2lkdGgiOiAiMzAwIiwKICAgICAgImhlaWdodCI6ICIxNjgiLAogICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjEuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1JVcjZnc3Z6OGktdDQ4b3VDbTRYaXI0YUVXZ1ZBTUhBT3lBT2tnODlZUWZMdmRHSlJsXzBzX0FNMVgiCiAgICAgfQogICAgXSwKICAgICJtZXRhdGFncyI6IFsKICAgICB7CiAgICAgICJjb3B5cmlnaHQiOiAiTEEgTkFDSU9OIiwKICAgICAgInRpdGxlIjogIkVsIHVzbyBkZWwgY2VsdWxhciBkdXJhbnRlIGxhIGNvbWlkYSwgdW4gZmFzdGlkaW8gcGFyYSBsb3MgYXJnZW50aW5vcyAtIDMwLjEyLjIwMTYiLAogICAgICAibmV3c19rZXl3b3JkcyI6ICJFbCB1c28gZGVsIGNlbHVsYXIgZHVyYW50ZSBsYSBjb21pZGEsIHVuIGZhc3RpZGlvIHBhcmEgbG9zIGFyZ2VudGlub3MsIFRlY25vbG9nw61hLCBUZWNub2xvZ8OtYSwgVmlkYSB5IE9jaW8iLAogICAgICAiZmI6YWRtaW5zIjogIjEwNjkyMDM5MTIiLAogICAgICAiZmI6YXBwX2lkIjogIjIwNTMyNjE5OTQ5MDMyMSIsCiAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAib2c6dGl0bGUiOiAiRWwgdXNvIGRlbCBjZWx1bGFyIGR1cmFudGUgbGEgY29taWRhLCB1biBmYXN0aWRpbyBwYXJhIGxvcyBhcmdlbnRpbm9zIiwKICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIkVsIDY0JSBkZSBxdWllbmVzIHJlc3BvbmRpZXJvbiB1bmEgZW5jdWVzdGEgbG9jYWwgY29uc2lkZXJhIG11eSBtb2xlc3RvIGFsIGNvbWVuc2FsIHF1ZSBlc3TDoSBhYnNvcnRvIGNvbiBsbyBxdWUgc3VjZWRlIGVuIHN1IHBhbnRhbGxhIG1pZW50cmFzIGVzdMOhIHNlbnRhZG8gYSBsYSBtZXNhIiwKICAgICAgIm9nOmltYWdlIjogImh0dHA6Ly9idWNrZXQuZ2xhbmFjaW9uLmNvbS9hbmV4b3MvZm90b3MvNDAvMjMzNTA0MC5qcGciLAogICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnkiLAogICAgICAidHdpdHRlcjpzaXRlIjogIkBMQU5BQ0lPTiIsCiAgICAgICJ0d2l0dGVyOnRpdGxlIjogIkVsIHVzbyBkZWwgY2VsdWxhciBkdXJhbnRlIGxhIGNvbWlkYSwgdW4gZmFzdGlkaW8gcGFyYSBsb3MgYXJnZW50aW5vcyIsCiAgICAgICJhcHBsaWNhdGlvbi1uYW1lIjogIkxBIE5BQ0lPTiIsCiAgICAgICJtc2FwcGxpY2F0aW9uLXN0YXJ0dXJsIjogImh0dHA6Ly93d3cubGFuYWNpb24uY29tLmFyLyIsCiAgICAgICJtc2FwcGxpY2F0aW9uLXRvb2x0aXAiOiAiTm90aWNpYXMgYWN0dWFsaXphZGFzIGxhcyAyNCBocy4iLAogICAgICAibXNhcHBsaWNhdGlvbi13aW5kb3ciOiAid2lkdGg9ODAwO2hlaWdodD02MDAiLAogICAgICAibXNhcHBsaWNhdGlvbi1uYXZidXR0b24tY29sb3IiOiAiIzBFQThEQyIsCiAgICAgICJtc2FwcGxpY2F0aW9uLXRhc2siOiAibmFtZT1VbHRpbWFzIG5vdGljaWFzO2FjdGlvbi11cmk9aHR0cDovL3d3dy5sYW5hY2lvbi5jb20uYXIvdWx0aW1hcy1ub3RpY2lhcztpY29uLXVyaT1odHRwOi8vd3d3LmxhbmFjaW9uLmNvbS5hci9pdGVtMS5pY28iLAogICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIsCiAgICAgICJjeGVuc2VwYXJzZTpwYWdlY2xhc3MiOiAiYXJ0aWNsZSIKICAgICB9CiAgICBdLAogICAgImNzZV9pbWFnZSI6IFsKICAgICB7CiAgICAgICJzcmMiOiAiaHR0cDovL2J1Y2tldC5nbGFuYWNpb24uY29tL2FuZXhvcy9mb3Rvcy80MC8yMzM1MDQwLmpwZyIKICAgICB9CiAgICBdLAogICAgIm5ld3NhcnRpY2xlIjogWwogICAgIHsKICAgICAgImhlYWRsaW5lIjogIkVsIHVzbyBkZWwgY2VsdWxhciBkdXJhbnRlIGxhIGNvbWlkYSwgdW4gZmFzdGlkaW8gcGFyYSBsb3MgYXJnZW50aW5vcyIsCiAgICAgICJkZXNjcmlwdGlvbiI6ICJFbCA2NCUgZGUgcXVpZW5lcyByZXNwb25kaWVyb24gdW5hIGVuY3Vlc3RhIGxvY2FsIGNvbnNpZGVyYSBtdXkgbW9sZXN0byBhbCBjb21lbnNhbCBxdWUgZXN0w6EgYWJzb3J0byBjb24gbG8gcXVlIHN1Y2VkZSBlbiBzdSBwYW50YWxsYSBtaWVudHJhcyBlc3TDoSBzZW50YWRvIGEgbGEgbWVzYSIsCiAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMTYtMTItMzAgMDA6MDE6MDAiLAogICAgICAiYXJ0aWNsZWJvZHkiOiAiRm90bzogU3RvY2tzbmFwLmlvMCBMYSBjb25zdWx0b3JhIEQnQWxlc3NpbyBJcm9sIGVuY3Vlc3TDsyBhIHVuIGdydXBvIGRlIDQwMCB2b2x1bnRhcmlvcyBwYXJhIGNvbm9jZXIgY3XDoWxlcyBlcmFuLCBhbCBtb21lbnRvIGRlIHNlbnRhcnNlIGEgbGEgbWVzYSwgbG9zIG1vZGFsZXMgKG8gbGEgZmFsdGEgZGUgZWxsb3MpIHJlbGFjaW9uYWRvcy4uLiIsCiAgICAgICJpbWFnZSI6ICJodHRwOi8vYnVja2V0MS5nbGFuYWNpb24uY29tL2FuZXhvcy9mb3Rvcy80MC90ZWNub2xvZ2lhLTIzMzUwNDB3NjIwLmpwZyIKICAgICB9CiAgICBdLAogICAgInNlYXJjaGFjdGlvbiI6IFsKICAgICB7CiAgICAgICJ0YXJnZXQiOiAiaHR0cDovL2J1c2Nhci5sYW5hY2lvbi5jb20uYXIvIiwKICAgICAgInF1ZXJ5LWlucHV0IjogIm5hbWU9Y2FkZW5hLW1vdmlsIgogICAgIH0sCiAgICAgewogICAgICAidGFyZ2V0IjogImh0dHA6Ly9idXNjYXIubGFuYWNpb24uY29tLmFyLyIsCiAgICAgICJxdWVyeS1pbnB1dCI6ICJuYW1lPWNhZGVuYSIKICAgICB9CiAgICBdLAogICAgImxpc3RpdGVtIjogWwogICAgIHsKICAgICAgIml0ZW0iOiAiTEEgTkFDSU9OIiwKICAgICAgIm5hbWUiOiAiTEEgTkFDSU9OIiwKICAgICAgInBvc2l0aW9uIjogIjEiCiAgICAgfSwKICAgICB7CiAgICAgICJpdGVtIjogIlRlY25vbG9nw61hIiwKICAgICAgIm5hbWUiOiAiVGVjbm9sb2fDrWEiLAogICAgICAicG9zaXRpb24iOiAiMiIKICAgICB9LAogICAgIHsKICAgICAgIml0ZW0iOiAiVGVjbm9sb2fDrWEiLAogICAgICAibmFtZSI6ICJUZWNub2xvZ8OtYSIsCiAgICAgICJwb3NpdGlvbiI6ICIzIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIlJvYmxlZG8gY3Vlc3Rpb27DsyDigJxkZXNtYW5lc+KAnSBkdXJhbnRlIGxhIG1hcmNoYSBkZWwgOE0gLSBFbCBEaWFyaW8gLi4uIiwKICAgImh0bWxUaXRsZSI6ICJSb2JsZWRvIGN1ZXN0aW9uw7Mg4oCcZGVzbWFuZXPigJ0gZHVyYW50ZSBsYSBtYXJjaGEgZGVsIDhNIC0gRWwgRGlhcmlvIC4uLiIsCiAgICJsaW5rIjogImh0dHA6Ly93d3cuZWxkaWFyaW9kZWxhcGFtcGEuY29tLmFyL2luZGV4LnBocC84OC1wb3J0YWRhL2dyaWxsYS8yNjgyOS1yb2JsZWRvLWN1ZXN0aW9uby1kZXNtYW5lcy1kdXJhbnRlLWxhLW1hcmNoYS1kZWwtOG0iLAogICAiZGlzcGxheUxpbmsiOiAid3d3LmVsZGlhcmlvZGVsYXBhbXBhLmNvbS5hciIsCiAgICJzbmlwcGV0IjogImhhY2UgMiBkw61hcyAuLi4gTGEgdGl0dWxhciBkZSBsYSBTZWNyZXRhcsOtYSBkZSBsYSBNdWplciBjcml0aWPDsyBsYXMgcGludGFkYXMgZW4gZWRpZmljaW9zIGRlIGxhIGNpdWRhZCBcbmR1cmFudGUgbGEgbW92aWxpemFjacOzbiBkZSBheWVyIGVuIFNhbnRhIFJvc2E6IFwiTm8gbm9zwqAuLi4iLAogICAiaHRtbFNuaXBwZXQiOiAiaGFjZSAyIGTDrWFzIFx1MDAzY2JcdTAwM2UuLi5cdTAwM2MvYlx1MDAzZSBMYSB0aXR1bGFyIGRlIGxhIFNlY3JldGFyw61hIGRlIGxhIE11amVyIGNyaXRpY8OzIGxhcyBwaW50YWRhcyBlbiBlZGlmaWNpb3MgZGUgbGEgY2l1ZGFkIFx1MDAzY2JyXHUwMDNlXG5cdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIG1vdmlsaXphY2nDs24gZGUgYXllciBlbiBTYW50YSBSb3NhOiAmcXVvdDtObyBub3MmbmJzcDsuLi4iLAogICAiY2FjaGVJZCI6ICI5bURsWUdEUkhQMEoiLAogICAiZm9ybWF0dGVkVXJsIjogInd3dy5lbGRpYXJpb2RlbGFwYW1wYS5jb20uYXIvLi4uLzI2ODI5LXJvYmxlZG8tY3Vlc3Rpb25vLWRlc21hbmVzLSBkdXJhbnRlLWxhLW1hcmNoYS1kZWwtOG0iLAogICAiaHRtbEZvcm1hdHRlZFVybCI6ICJ3d3cuZWxkaWFyaW9kZWxhcGFtcGEuY29tLmFyLy4uLi8yNjgyOS1yb2JsZWRvLWN1ZXN0aW9uby1kZXNtYW5lcy0gXHUwMDNjYlx1MDAzZWR1cmFudGUtbGFcdTAwM2MvYlx1MDAzZS1tYXJjaGEtZGVsLThtIiwKICAgInBhZ2VtYXAiOiB7CiAgICAibWV0YXRhZ3MiOiBbCiAgICAgewogICAgICAib2c6dGl0bGUiOiAiUm9ibGVkbyBjdWVzdGlvbsOzIOKAnGRlc21hbmVz4oCdIGR1cmFudGUgbGEgbWFyY2hhIGRlbCA4TSIsCiAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAib2c6aW1hZ2UiOiAiaHR0cDovL3d3dy5lbGRpYXJpb2RlbGFwYW1wYS5jb20uYXIvaW1hZ2VzLzIwMTcvTWFyem8vMDktMDMtMjAxNy9yb2JsZWRvLmpwZyIsCiAgICAgICJvZzp1cmwiOiAiaHR0cDovL3d3dy5lbGRpYXJpb2RlbGFwYW1wYS5jb20uYXIvaW5kZXgucGhwLzg4LXBvcnRhZGEvZ3JpbGxhLzI2ODI5LXJvYmxlZG8tY3Vlc3Rpb25vLWRlc21hbmVzLWR1cmFudGUtbGEtbWFyY2hhLWRlbC04bSIsCiAgICAgICJvZzpzaXRlX25hbWUiOiAiRWwgRGlhcmlvIGRlIExhIFBhbXBhIiwKICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIkxhIHRpdHVsYXIgZGUgbGEgU2VjcmV0YXLDrWEgZGUgbGEgTXVqZXIgY3JpdGljw7MgbGFzIHBpbnRhZGFzIGVuIGVkaWZpY2lvcyBkZSBsYSBjaXVkYWQgZHVyYW50ZSBsYSBtb3ZpbGl6YWNpw7NuIGRlIGF5ZXIgZW4gU2FudGEgUm9zYTogXCJObyBub3Mgc2VudGltb3MgcmVwcmVzZW50YWRhcyBwYXJhIG5hZGFcIi4iLAogICAgICAiZmI6YXBwX2lkIjogIjEzMjIyOTk0Njc5NTE4OSIsCiAgICAgICJmYjphZG1pbnMiOiAiMTAwMDAyNzYyNzIzODU5IiwKICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vIiwKICAgICAgImhhbmRoZWxkZnJpZW5kbHkiOiAidHJ1ZSIsCiAgICAgICJhcHBsZS1tb2JpbGUtd2ViLWFwcC1jYXBhYmxlIjogIllFUyIsCiAgICAgICJ0aGVtZS1jb2xvciI6ICIjQTcwMTAzIgogICAgIH0KICAgIF0sCiAgICAiY3NlX2ltYWdlIjogWwogICAgIHsKICAgICAgInNyYyI6ICJodHRwOi8vd3d3LmVsZGlhcmlvZGVsYXBhbXBhLmNvbS5hci9pbWFnZXMvMjAxNy9NYXJ6by8wOS0wMy0yMDE3L3JvYmxlZG8uanBnIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIkRvcyBhc2FsdG9zIGFybWFkb3Mgb2N1cnJpZXJvbiBkdXJhbnRlIGxhIG5vY2hlIGVuIEd1YXltYWxsw6luIC4uLiIsCiAgICJodG1sVGl0bGUiOiAiRG9zIGFzYWx0b3MgYXJtYWRvcyBvY3Vycmllcm9uIGR1cmFudGUgbGEgbm9jaGUgZW4gR3VheW1hbGzDqW4gLi4uIiwKICAgImxpbmsiOiAiaHR0cDovL3d3dy5kaWFyaW91bm8uY29tLmFyL3BvbGljaWFsZXMvZG9zLWFzYWx0b3MtYXJtYWRvcy1vY3Vycmllcm9uLWxhLW5vY2hlLWd1YXltYWxsZW4tMjAxNzAzMDgtbjEzNTMzNzMuaHRtbCIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cuZGlhcmlvdW5vLmNvbS5hciIsCiAgICJzbmlwcGV0IjogImhhY2UgMyBkw61hcyAuLi4gRG9zIGFzYWx0b3MgYXJtYWRvcyBvY3Vycmllcm9uIGR1cmFudGUgbGEgbm9jaGUgZW4gR3VheW1hbGzDqW4uIExhZHJvbmVzIHNlIFxubGxldmFyb24gZWwgYXV0byBkZSB1biBqb3ZlbiBjdWFuZG8gc2UgZW5jb250cmFiYcKgLi4uIiwKICAgImh0bWxTbmlwcGV0IjogImhhY2UgMyBkw61hcyBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgRG9zIGFzYWx0b3MgYXJtYWRvcyBvY3Vycmllcm9uIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2Ugbm9jaGUgZW4gR3VheW1hbGzDqW4uIExhZHJvbmVzIHNlIFx1MDAzY2JyXHUwMDNlXG5sbGV2YXJvbiBlbCBhdXRvIGRlIHVuIGpvdmVuIGN1YW5kbyBzZSBlbmNvbnRyYWJhJm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAiQlNfdE5oZXZWd3NKIiwKICAgImZvcm1hdHRlZFVybCI6ICJ3d3cuZGlhcmlvdW5vLmNvbS5hci8uLi4vZG9zLWFzYWx0b3MtYXJtYWRvcy1vY3Vycmllcm9uLWxhLW5vY2hlLSBndWF5bWFsbGVuLTIwMTcwMzA4LW4xMzUzMzczLmh0bWwiLAogICAiaHRtbEZvcm1hdHRlZFVybCI6ICJ3d3cuZGlhcmlvdW5vLmNvbS5hci8uLi4vZG9zLWFzYWx0b3MtYXJtYWRvcy1vY3Vycmllcm9uLWxhLW5vY2hlLSBndWF5bWFsbGVuLTIwMTcwMzA4LW4xMzUzMzczLmh0bWwiLAogICAicGFnZW1hcCI6IHsKICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgIHsKICAgICAgIndpZHRoIjogIjI5MCIsCiAgICAgICJoZWlnaHQiOiAiMTc0IiwKICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4xLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NUXy12Y09wSExZT2ZKVDRHMnQ2UmVhS3dlbXhkWExrYklKd284R3FkLVJIYk8zczROUTdtcmpLbnciCiAgICAgfQogICAgXSwKICAgICJtZXRhdGFncyI6IFsKICAgICB7CiAgICAgICJvZzpzaXRlX25hbWUiOiAiRGlhcmlvIFVubyIsCiAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJMYWRyb25lcyBzZSBsbGV2YXJvbiBlbCBhdXRvIGRlIHVuIGpvdmVuIGN1YW5kbyBzZSBlbmNvbnRyYWJhIGVzdGFjaW9uw6FuZG9sby4gT3Ryb3MgbWFsdml2aWVudGVzIGF0YWNhcm9uIHVuYSBlc3RhY2nDs24gZGUgc2VydmljaW8uIiwKICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICJmYjphcHBfaWQiOiAiMTYxMzE2NzY3MzAzOTg1IiwKICAgICAgIm9nOnVybCI6ICJodHRwOi8vd3d3LmRpYXJpb3Vuby5jb20uYXIvcG9saWNpYWxlcy9kb3MtYXNhbHRvcy1hcm1hZG9zLW9jdXJyaWVyb24tbGEtbm9jaGUtZ3VheW1hbGxlbi0yMDE3MDMwOC1uMTM1MzM3My5odG1sIiwKICAgICAgIm9nOnRpdGxlIjogIkRvcyBhc2FsdG9zIGFybWFkb3Mgb2N1cnJpZXJvbiBkdXJhbnRlIGxhIG5vY2hlIGVuIEd1YXltYWxsw6luIiwKICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vc3RhdGljLmRpYXJpb3Vuby5jb20uYXIvYWRqdW50b3MvMjEyL2ltYWdlbmVzLzAxOS84MjcvMDAxOTgyNzAwNy5qcGciLAogICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSIsCiAgICAgICJhbDphbmRyb2lkOnVybCI6ICJtb2JpbGVhcHAvbm90YSIsCiAgICAgICJhbDppb3M6dXJsIjogIm1vYmlsZWFwcC9ub3RhIiwKICAgICAgImRpc3RyaWJ1dGlvbiI6ICJnbG9iYWwiLAogICAgICAicmF0aW5nIjogImdlbmVyYWwiLAogICAgICAibGFuZ3VhZ2UiOiAiZXNfVVkuVVRGLTgiCiAgICAgfQogICAgXSwKICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgewogICAgICAic3JjIjogImh0dHBzOi8vc3RhdGljLmRpYXJpb3Vuby5jb20uYXIvYWRqdW50b3MvMjEyL2ltYWdlbmVzLzAxOS84MjcvMDAxOTgyNzAwNy5qcGciCiAgICAgfQogICAgXQogICB9CiAgfSwKICB7CiAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAidGl0bGUiOiAiQWdyZWRpZXJvbiBhIHRyZXMgcGVyaW9kaXN0YXMgZHVyYW50ZSBsYSBtYXJjaGEgfCBTb2NpZWRhZCAuLi4iLAogICAiaHRtbFRpdGxlIjogIkFncmVkaWVyb24gYSB0cmVzIHBlcmlvZGlzdGFzIGR1cmFudGUgbGEgbWFyY2hhIHwgU29jaWVkYWQgLi4uIiwKICAgImxpbmsiOiAiaHR0cDovL3d3dy5pbmZvbmV3cy5jb20vbm90YS8zMDYzNjUvYWdyZWRpZXJvbi1hLXRyZXMtcGVyaW9kaXN0YXMtZHVyYW50ZS1sYSIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cuaW5mb25ld3MuY29tIiwKICAgInNuaXBwZXQiOiAiQWdyZWRpZXJvbiBhIHRyZXMgcGVyaW9kaXN0YXMgZHVyYW50ZSBsYSBtYXJjaGEuIE1pw6lyY29sZXMgMDggZGUgTWFyem8gfCAyMTozMy4gXG5Dcm9uaXN0YXMgZGUgdHJlcyBjYW5hbGVzIGRlIG5vdGljaWFzIHJlY2liaWVyb24gaW5zdWx0b3MgeSBlbXB1am9uZXMgbWllbnRyYXPCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJBZ3JlZGllcm9uIGEgdHJlcyBwZXJpb2Rpc3RhcyBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIG1hcmNoYS4gTWnDqXJjb2xlcyAwOCBkZSBNYXJ6byB8IDIxOjMzLiBcdTAwM2Niclx1MDAzZVxuQ3JvbmlzdGFzIGRlIHRyZXMgY2FuYWxlcyBkZSBub3RpY2lhcyByZWNpYmllcm9uIGluc3VsdG9zIHkgZW1wdWpvbmVzIG1pZW50cmFzJm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAiMWZhWmpNV2xRU2dKIiwKICAgImZvcm1hdHRlZFVybCI6ICJ3d3cuaW5mb25ld3MuY29tLy4uLi9hZ3JlZGllcm9uLWEtdHJlcy1wZXJpb2Rpc3Rhcy1kdXJhbnRlLWxhIiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAid3d3LmluZm9uZXdzLmNvbS8uLi4vYWdyZWRpZXJvbi1hLXRyZXMtcGVyaW9kaXN0YXMtXHUwMDNjYlx1MDAzZWR1cmFudGUtbGFcdTAwM2MvYlx1MDAzZSIsCiAgICJwYWdlbWFwIjogewogICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgewogICAgICAid2lkdGgiOiAiMjc5IiwKICAgICAgImhlaWdodCI6ICIxODEiLAogICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjEuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1M4aGRsdW54LVZkYll4X085bFZMX2FwS004d1FiSk1KSWc2aWxLNmlpVEFRRk90Z19HY0ZqYTl3NCIKICAgICB9CiAgICBdLAogICAgIm1ldGF0YWdzIjogWwogICAgIHsKICAgICAgInZpZXdwb3J0IjogImluaXRpYWwtc2NhbGU9MS4wLCB1c2VyLXNjYWxhYmxlPW5vIiwKICAgICAgInR3aXR0ZXI6dGl0bGUiOiAiQWdyZWRpZXJvbiBhIHRyZXMgcGVyaW9kaXN0YXMgZHVyYW50ZSBsYSBtYXJjaGEiLAogICAgICAib2c6dGl0bGUiOiAiQWdyZWRpZXJvbiBhIHRyZXMgcGVyaW9kaXN0YXMgZHVyYW50ZSBsYSBtYXJjaGEiLAogICAgICAib2c6ZGVzY3JpcHRpb24iOiAiQ3JvbmlzdGFzIGRlIHRyZXMgY2FuYWxlcyBkZSBub3RpY2lhcyByZWNpYmllcm9uIGluc3VsdG9zIHkgZW1wdWpvbmVzIG1pZW50cmFzIGN1YnLDrWFuIGxhIGhpc3TDs3JpY2EgbW92aWxpemFjacOzbi4iLAogICAgICAidHdpdHRlcjpkZXNjcmlwdGlvbiI6ICJDcm9uaXN0YXMgZGUgdHJlcyBjYW5hbGVzIGRlIG5vdGljaWFzIHJlY2liaWVyb24gaW5zdWx0b3MgeSBlbXB1am9uZXMgbWllbnRyYXMgY3VicsOtYW4gbGEgaGlzdMOzcmljYSBtb3ZpbGl6YWNpw7NuLiIsCiAgICAgICJjbGFzc2lmaWNhdGlvbiI6ICJub3Rhcywgbm90aWNpYXMsIGNvbXVuaWRhZCBpbmZvcm1hdGl2YSwgcG9ydGFsIGRlIG5vdGljaWFzLCBwZXJpb2Rpc21vIiwKICAgICAgImFydGljbGU6c2VjdGlvbiI6ICJTb2NpZWRhZCIsCiAgICAgICJhcnRpY2xlOnRhZyI6ICIjOE0gUGFybyBJbnRlcm5hY2lvbmFsIGRlIE11amVyZXMsU29jaWVkYWQsRWwgQXJnZW50aW5vLGVsYXJnZW50aW5vLmNvbSxOb3RpY2lhcyxBcmdlbnRpbmEsVGVjbm9sb2fDrWEsUG9sw610aWNhLFNvY2llZGFkLE11bmRvLEVzcGVjdMOhY3Vsb3MsRGVwb3J0ZXMsRGVwb3J0ZXMgZXhyZW1vcyxNdWx0aW1lZGlhLFZpZGVvcyxDTjIzLFRpZW1wbyBBcmdlbnRpbm8sR3J1cG8gVmVpbnRpdHLDqXMsQ2FuYWwgQ04yMyxHcnVwbyAyMyxQZXJpb2Rpc21vLEludGVybmFjaW9uYWxlcyIsCiAgICAgICJhcnRpY2xlOnB1Ymxpc2hlciI6ICJodHRwczovL3d3dy5mYWNlYm9vay5jb20vSU5GT25ld3Njb20iLAogICAgICAibmV3c19rZXl3b3JkcyI6ICIjOE0gUGFybyBJbnRlcm5hY2lvbmFsIGRlIE11amVyZXMsU29jaWVkYWQsRWwgQXJnZW50aW5vLGVsYXJnZW50aW5vLmNvbSxOb3RpY2lhcyxBcmdlbnRpbmEsVGVjbm9sb2fDrWEsUG9sw610aWNhLFNvY2llZGFkLE11bmRvLEVzcGVjdMOhY3Vsb3MsRGVwb3J0ZXMsRGVwb3J0ZXMgZXhyZW1vcyxNdWx0aW1lZGlhLFZpZGVvcyxDTjIzLFRpZW1wbyBBcmdlbnRpbm8sR3J1cG8gVmVpbnRpdHLDqXMsQ2FuYWwgQ04yMyxHcnVwbyAyMyxQZXJpb2Rpc21vLEludGVybmFjaW9uYWxlcyIsCiAgICAgICJhcnRpY2xlOnB1Ymxpc2hlZF90aW1lIjogIjIwMTctMDMtMDhUMDA6MDA6MDAtMDM6MDAiLAogICAgICAiYXJ0aWNsZTptb2RpZmllZF90aW1lIjogIjIwMTctMDMtMDlUMDA6NTE6NTEtMDM6MDAiLAogICAgICAidHdpdHRlcjpjYXJkIjogImdhbGxlcnkiLAogICAgICAidHdpdHRlcjppbWFnZTAiOiAiaHR0cDovL2luZm9uZXdzLnR2L3N1YnBvcnRhbHMvc3RhdGljL2YvWVdSMlppOXBiV0ZuWlc1bGN5OHlNREUzTHpBekx6VTRZekJoTm1aaU5qUTFZMll1YW5CbmZIdzRNREI4ZkRnd01IeDhkR2gxYldJLzU4YzBhNmZiNjQ1Y2YuanBnP3YxLjAyMCIsCiAgICAgICJvZzppbWFnZSI6ICJodHRwOi8vaW5mb25ld3MudHYvc3VicG9ydGFscy9zdGF0aWMvZi9ZV1IyWmk5cGJXRm5aVzVsY3k4eU1ERTNMekF6THpVNFl6QmhObVppTmpRMVkyWXVhbkJuZkh3NE1EQjhmRGd3TUh4OGRHaDFiV0kvNThjMGE2ZmI2NDVjZi5qcGc/djEuMDIwIiwKICAgICAgIm9nOnVybCI6ICJodHRwOi8vd3d3LmluZm9uZXdzLmNvbS9ub3RhLzMwNjM2NSIsCiAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAib2c6c2l0ZV9uYW1lIjogIklORk9uZXdzIiwKICAgICAgInRoZW1lLWNvbG9yIjogIiMyNjJGNUMiLAogICAgICAiZmI6YXBwX2lkIjogIjYyMTMzNzU5Nzg4OTU1OCIsCiAgICAgICJmYjpwYWdlcyI6ICIyMDc1MzkwMDI2NDQyNjkiCiAgICAgfQogICAgXSwKICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgewogICAgICAic3JjIjogImh0dHA6Ly9pbmZvbmV3cy50di9zdWJwb3J0YWxzL3N0YXRpYy9mL1lXUjJaaTlwYldGblpXNWxjeTh5TURFM0x6QXpMelU0WXpCaE5tWmlOalExWTJZdWFuQm5mSHc0TURCOGZEZ3dNSHg4ZEdoMWJXSS81OGMwYTZmYjY0NWNmLmpwZz92MS4wMjAiCiAgICAgfQogICAgXSwKICAgICJuZXdzYXJ0aWNsZSI6IFsKICAgICB7CiAgICAgICJhcnRpY2xlc2VjdGlvbiI6ICJTb2NpZWRhZCIsCiAgICAgICJuYW1lIjogIkFncmVkaWVyb24gYSB0cmVzIHBlcmlvZGlzdGFzIGR1cmFudGUgbGEgbWFyY2hhIiwKICAgICAgImRhdGVwdWJsaXNoZWQiOiAiTWnDqXJjb2xlcyAwOCBkZSBNYXJ6byBkZSAyMDE3IiwKICAgICAgImRlc2NyaXB0aW9uIjogIkNyb25pc3RhcyBkZSB0cmVzIGNhbmFsZXMgZGUgbm90aWNpYXMgcmVjaWJpZXJvbiBpbnN1bHRvcyB5IGVtcHVqb25lcyBtaWVudHJhcyBjdWJyw61hbiBsYSBoaXN0w7NyaWNhIG1vdmlsaXphY2nDs24uIiwKICAgICAgImFydGljbGVib2R5IjogIk1hcmlhbmEgQWJpdXNvIExhcyBwZXJpb2Rpc3RhcyBHaXNlbGEgQnVzYW5pY2hlIChUZWxlZmUsIEFNIERlbCBQbGF0YSksIE1hcmluYSBBYml1c1x1MDAzYy9zdHJvbmdcdTAwM2VcdTAwM2NzdHJvbmdcdTAwM2VvIChUTiwgUmFkaW8gZGUgbGEgQ2l1ZGFkKSB5IEx1Y2lhbmEgQXJpYXMgKEFtw6lyaWNhIDI0KSBmdWVyb24gYWdyZWRpZGFzIGR1cmFudGUgbGEgbW92aWxpemFjaS4uLiIsCiAgICAgICJpbWFnZSI6ICJodHRwOi8vaW5mb25ld3MudHYvc3VicG9ydGFscy9zdGF0aWMvZi9ZV1IyWmk5cGJXRm5aVzVsY3k4eU1ERTNMekF6THpVNFl6QmhObVppTmpRMVkyWXVhbkJuZkh3Mk5UQjhmRFkxTUh4OGRHaDFiV0kvNThjMGE2ZmI2NDVjZi5qcGc/djEuMDIwIgogICAgIH0KICAgIF0KICAgfQogIH0KIF0KfQo=
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:39 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=21
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:40 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:40 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/0C_wce1ktBBDZi8QqkHgP3C6Y1g"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '69684'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:40 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=31
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:41 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:41 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/sjYVKRUQraaYcV-SGgUl8wNL8Hk"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '21122'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogImtpbmQiOiAiY3VzdG9tc2VhcmNoI3NlYXJjaCIsCiAidXJsIjogewogICJ0eXBlIjogImFwcGxpY2F0aW9uL2pzb24iLAogICJ0ZW1wbGF0ZSI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9jdXN0b21zZWFyY2gvdjE/cT17c2VhcmNoVGVybXN9Jm51bT17Y291bnQ/fSZzdGFydD17c3RhcnRJbmRleD99JmxyPXtsYW5ndWFnZT99JnNhZmU9e3NhZmU/fSZjeD17Y3g/fSZjcmVmPXtjcmVmP30mc29ydD17c29ydD99JmZpbHRlcj17ZmlsdGVyP30mZ2w9e2dsP30mY3I9e2NyP30mZ29vZ2xlaG9zdD17Z29vZ2xlSG9zdD99JmMyY29mZj17ZGlzYWJsZUNuVHdUcmFuc2xhdGlvbj99JmhxPXtocT99JmhsPXtobD99JnNpdGVTZWFyY2g9e3NpdGVTZWFyY2g/fSZzaXRlU2VhcmNoRmlsdGVyPXtzaXRlU2VhcmNoRmlsdGVyP30mZXhhY3RUZXJtcz17ZXhhY3RUZXJtcz99JmV4Y2x1ZGVUZXJtcz17ZXhjbHVkZVRlcm1zP30mbGlua1NpdGU9e2xpbmtTaXRlP30mb3JUZXJtcz17b3JUZXJtcz99JnJlbGF0ZWRTaXRlPXtyZWxhdGVkU2l0ZT99JmRhdGVSZXN0cmljdD17ZGF0ZVJlc3RyaWN0P30mbG93UmFuZ2U9e2xvd1JhbmdlP30maGlnaFJhbmdlPXtoaWdoUmFuZ2U/fSZzZWFyY2hUeXBlPXtzZWFyY2hUeXBlfSZmaWxlVHlwZT17ZmlsZVR5cGU/fSZyaWdodHM9e3JpZ2h0cz99JmltZ1NpemU9e2ltZ1NpemU/fSZpbWdUeXBlPXtpbWdUeXBlP30maW1nQ29sb3JUeXBlPXtpbWdDb2xvclR5cGU/fSZpbWdEb21pbmFudENvbG9yPXtpbWdEb21pbmFudENvbG9yP30mYWx0PWpzb24iCiB9LAogInF1ZXJpZXMiOiB7CiAgInJlcXVlc3QiOiBbCiAgIHsKICAgICJ0aXRsZSI6ICJHb29nbGUgQ3VzdG9tIFNlYXJjaCAtIGFsbGludGV4dDpcImR1cmFudGUgbGFcIiIsCiAgICAidG90YWxSZXN1bHRzIjogIjc4NzAwMCIsCiAgICAic2VhcmNoVGVybXMiOiAiYWxsaW50ZXh0OlwiZHVyYW50ZSBsYVwiIiwKICAgICJjb3VudCI6IDEwLAogICAgInN0YXJ0SW5kZXgiOiAzMSwKICAgICJpbnB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgIm91dHB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgInNhZmUiOiAib2ZmIiwKICAgICJjeCI6ICIwMDgzNDk1MTIwOTk2MTYwODcyNTc6Ml9hYTVmeDVmN2UiLAogICAgImNyIjogImNvdW50cnlBUiIsCiAgICAiZmlsZVR5cGUiOiAiLXBkZiIKICAgfQogIF0sCiAgInByZXZpb3VzUGFnZSI6IFsKICAgewogICAgInRpdGxlIjogIkdvb2dsZSBDdXN0b20gU2VhcmNoIC0gYWxsaW50ZXh0OlwiZHVyYW50ZSBsYVwiIiwKICAgICJ0b3RhbFJlc3VsdHMiOiAiNzg3MDAwIiwKICAgICJzZWFyY2hUZXJtcyI6ICJhbGxpbnRleHQ6XCJkdXJhbnRlIGxhXCIiLAogICAgImNvdW50IjogMTAsCiAgICAic3RhcnRJbmRleCI6IDIxLAogICAgImlucHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAib3V0cHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAic2FmZSI6ICJvZmYiLAogICAgImN4IjogIjAwODM0OTUxMjA5OTYxNjA4NzI1NzoyX2FhNWZ4NWY3ZSIsCiAgICAiY3IiOiAiY291bnRyeUFSIiwKICAgICJmaWxlVHlwZSI6ICItcGRmIgogICB9CiAgXSwKICAibmV4dFBhZ2UiOiBbCiAgIHsKICAgICJ0aXRsZSI6ICJHb29nbGUgQ3VzdG9tIFNlYXJjaCAtIGFsbGludGV4dDpcImR1cmFudGUgbGFcIiIsCiAgICAidG90YWxSZXN1bHRzIjogIjc4NzAwMCIsCiAgICAic2VhcmNoVGVybXMiOiAiYWxsaW50ZXh0OlwiZHVyYW50ZSBsYVwiIiwKICAgICJjb3VudCI6IDEwLAogICAgInN0YXJ0SW5kZXgiOiA0MSwKICAgICJpbnB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgIm91dHB1dEVuY29kaW5nIjogInV0ZjgiLAogICAgInNhZmUiOiAib2ZmIiwKICAgICJjeCI6ICIwMDgzNDk1MTIwOTk2MTYwODcyNTc6Ml9hYTVmeDVmN2UiLAogICAgImNyIjogImNvdW50cnlBUiIsCiAgICAiZmlsZVR5cGUiOiAiLXBkZiIKICAgfQogIF0KIH0sCiAiY29udGV4dCI6IHsKICAidGl0bGUiOiAiTGluZ3VhRmluZGVyIGRldmVsb3BtZW50IgogfSwKICJzZWFyY2hJbmZvcm1hdGlvbiI6IHsKICAic2VhcmNoVGltZSI6IDAuNTMxMDE2LAogICJmb3JtYXR0ZWRTZWFyY2hUaW1lIjogIjAuNTMiLAogICJ0b3RhbFJlc3VsdHMiOiAiNzg3MDAwIiwKICAiZm9ybWF0dGVkVG90YWxSZXN1bHRzIjogIjc4NywwMDAiCiB9LAogIml0ZW1zIjogWwogIHsKICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICJ0aXRsZSI6ICJEZXNhcGFyZWNpZG9zOiBNaWxpdGFyZXMgTXVlcnRvcyBEdXJhbnRlIGxhIEd1ZXJyYSBTdWNpYSIsCiAgICJodG1sVGl0bGUiOiAiRGVzYXBhcmVjaWRvczogTWlsaXRhcmVzIE11ZXJ0b3MgRHVyYW50ZSBsYSBHdWVycmEgU3VjaWEiLAogICAibGluayI6ICJodHRwOi8vd3d3LmRlc2FwYXJlY2lkb3Mub3JnL2FyZy9kb2MvY2lmcmFzL21pbGkuaHRtbCIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cuZGVzYXBhcmVjaWRvcy5vcmciLAogICAic25pcHBldCI6ICJEdXJhbnRlIGxhIGRpY3RhZHVyYSBtaWxpdGFyIGVuIEFyZ2VudGluYSwgc2UgZXN0aW1hIHF1ZSAzMCwwMDAgcGVyc29uYXMgZnVlcm9uIFxuZGVzYXBhcmVjaWRhcyBwb3IgbGFzIEZ1ZXJ6YXMgZGUgU2VndXJpZGFkLiBFbiBjb21wYXJhY2nDs24sIGVudHJlIDUwMCBhwqAuLi4iLAogICAiaHRtbFNuaXBwZXQiOiAiXHUwMDNjYlx1MDAzZUR1cmFudGUgbGFcdTAwM2MvYlx1MDAzZSBkaWN0YWR1cmEgbWlsaXRhciBlbiBBcmdlbnRpbmEsIHNlIGVzdGltYSBxdWUgMzAsMDAwIHBlcnNvbmFzIGZ1ZXJvbiBcdTAwM2Niclx1MDAzZVxuZGVzYXBhcmVjaWRhcyBwb3IgbGFzIEZ1ZXJ6YXMgZGUgU2VndXJpZGFkLiBFbiBjb21wYXJhY2nDs24sIGVudHJlIDUwMCBhJm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAiZWwxdFVZbDVqVWtKIiwKICAgImZvcm1hdHRlZFVybCI6ICJ3d3cuZGVzYXBhcmVjaWRvcy5vcmcvYXJnL2RvYy9jaWZyYXMvbWlsaS5odG1sIiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAid3d3LmRlc2FwYXJlY2lkb3Mub3JnL2FyZy9kb2MvY2lmcmFzL21pbGkuaHRtbCIKICB9LAogIHsKICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICJ0aXRsZSI6ICJCYWxhbmNlIGRlbCB0cmFiYWpvIHByZXZlbnRpdm8gYXNpc3RlbmNpYWwgZHVyYW50ZSBsYSBmaWVzdGEgLi4uIiwKICAgImh0bWxUaXRsZSI6ICJCYWxhbmNlIGRlbCB0cmFiYWpvIHByZXZlbnRpdm8gYXNpc3RlbmNpYWwgZHVyYW50ZSBsYSBmaWVzdGEgLi4uIiwKICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuYXJnZW50aW5hLmdvYi5hci9ub3RpY2lhcy9iYWxhbmNlLWRlbC10cmFiYWpvLXByZXZlbnRpdm8tYXNpc3RlbmNpYWwtZHVyYW50ZS1sYS1maWVzdGEtZWxlY3Ryb25pY2EtZW4tbWFyLWRlbC1wbGF0YSIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cuYXJnZW50aW5hLmdvYi5hciIsCiAgICJzbmlwcGV0IjogIjIgRmViIDIwMTcgLi4uIEJhbGFuY2UgZGVsIHRyYWJham8gcHJldmVudGl2byBhc2lzdGVuY2lhbCBkdXJhbnRlIGxhIGZpZXN0YSBlbGVjdHLDs25pY2EgZW4gTWFyIFxuZGVsIFBsYXRhLiBDb21wYXJ0aXIgZW4gcmVkZXMgc29jaWFsZXMuIENvbXBhcnRpciBlbiBGYWNlYm9va8KgLi4uIiwKICAgImh0bWxTbmlwcGV0IjogIjIgRmViIDIwMTcgXHUwMDNjYlx1MDAzZS4uLlx1MDAzYy9iXHUwMDNlIEJhbGFuY2UgZGVsIHRyYWJham8gcHJldmVudGl2byBhc2lzdGVuY2lhbCBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIGZpZXN0YSBlbGVjdHLDs25pY2EgZW4gTWFyIFx1MDAzY2JyXHUwMDNlXG5kZWwgUGxhdGEuIENvbXBhcnRpciBlbiByZWRlcyBzb2NpYWxlcy4gQ29tcGFydGlyIGVuIEZhY2Vib29rJm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAiM05wSlVYdFNLNVFKIiwKICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5hcmdlbnRpbmEuZ29iLmFyLy4uLi9iYWxhbmNlLWRlbC10cmFiYWpvLXByZXZlbnRpdm8tYXNpc3RlbmNpYWwtIGR1cmFudGUtbGEtZmllc3RhLWVsZWN0cm9uaWNhLWVuLW1hci1kZWwtcGxhdGEiLAogICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5hcmdlbnRpbmEuZ29iLmFyLy4uLi9iYWxhbmNlLWRlbC10cmFiYWpvLXByZXZlbnRpdm8tYXNpc3RlbmNpYWwtIFx1MDAzY2JcdTAwM2VkdXJhbnRlLWxhXHUwMDNjL2JcdTAwM2UtZmllc3RhLWVsZWN0cm9uaWNhLWVuLW1hci1kZWwtcGxhdGEiLAogICAicGFnZW1hcCI6IHsKICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgIHsKICAgICAgIndpZHRoIjogIjMwMCIsCiAgICAgICJoZWlnaHQiOiAiMTY4IiwKICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4xLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NRd05PTzg3QURCd05DV1ZQZ29NV1M0YjlfSDRUYThHeFRTS010a0otMXdob1FUUUFKNjEtcEZIWWliIgogICAgIH0KICAgIF0sCiAgICAibWV0YXRhZ3MiOiBbCiAgICAgewogICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIsCiAgICAgICJ0aGVtZS1jb2xvciI6ICIjMDA3MmI4IiwKICAgICAgIm1zYXBwbGljYXRpb24tbmF2YnV0dG9uLWNvbG9yIjogIiMwMDcyYjgiLAogICAgICAiYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZSI6ICIjMDA3MmI4IiwKICAgICAgIm9nOnNpdGVfbmFtZSI6ICJBcmdlbnRpbmEuZ29iLmFyIiwKICAgICAgIm9nOnVybCI6ICJodHRwczovL3d3dy5hcmdlbnRpbmEuZ29iLmFyL25vdGljaWFzL2JhbGFuY2UtZGVsLXRyYWJham8tcHJldmVudGl2by1hc2lzdGVuY2lhbC1kdXJhbnRlLWxhLWZpZXN0YS1lbGVjdHJvbmljYS1lbi1tYXItZGVsLXBsYXRhIiwKICAgICAgIm9nOnRpdGxlIjogIkJhbGFuY2UgZGVsIHRyYWJham8gcHJldmVudGl2byBhc2lzdGVuY2lhbCBkdXJhbnRlIGxhIGZpZXN0YSBlbGVjdHLDs25pY2EgZW4gTWFyIGRlbCBQbGF0YSIsCiAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJFbCBlcXVpcG8gZGUgbGEgU2VjcmV0YXLDrWEgZGUgUG9sw610aWNhcyBJbnRlZ3JhbGVzIHNvYnJlIERyb2dhcyBkZSBsYSBOYWNpw7NuIEFyZ2VudGluYSAoU0VEUk9OQVIpLCBlbmNhYmV6YWRvIHBvciBzdSB0aXR1bGFyLCBSb2JlcnRvIE1vcm8sIHNlIHJldW5pw7MgY29uIGVsIHNlY3JldGFyaW8gZGUgU2FsdWQgZGUgbGEgTXVuaWNpcGFsaWRhZCBkZSBHZW5lcmFsIFB1ZXlycmVkw7NuLCBHdXN0YXZvIEJsYW5jbywgY29uIGVsIGZpbiBkZSBhbmFsaXphciBlbCB0cmFiYWpvIGRlc2Fycm9sbGFkbyBlbiBtYXRlcmlhIGRlIHByZXZlbmNpw7NuIHkgYXNpc3RlbmNpYSBkZWwgY29uc3VtbyBhYnVzaXZvIGRlIGRyb2dhcyB5IGFsY29ob2wsIHF1ZSBzZSBsbGV2w7MgYSBjYWJvIGR1cmFudGUgbGEgbWFzaXZhIGZpZXN0YSBlbGVjdHLDs25pY2EgZGVsIHBhc2FkbyBmaW4gZGUgc2VtYW5hIGVuIE1hciBkZWwgUGxhdGEuIiwKICAgICAgIm9nOnVwZGF0ZWRfdGltZSI6ICIyMDE3LTAyLTAyVDE5OjE3OjI0LTAzOjAwIiwKICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vd3d3LmFyZ2VudGluYS5nb2IuYXIvc2l0ZXMvZGVmYXVsdC9maWxlcy93ZWJfMzYxNC5qcGciLAogICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnkiLAogICAgICAidHdpdHRlcjp1cmwiOiAiaHR0cHM6Ly93d3cuYXJnZW50aW5hLmdvYi5hci9ub3RpY2lhcy9iYWxhbmNlLWRlbC10cmFiYWpvLXByZXZlbnRpdm8tYXNpc3RlbmNpYWwtZHVyYW50ZS1sYS1maWVzdGEtZWxlY3Ryb25pY2EtZW4tbWFyLWRlbC1wbGF0YSIsCiAgICAgICJ0d2l0dGVyOnRpdGxlIjogIkJhbGFuY2UgZGVsIHRyYWJham8gcHJldmVudGl2byBhc2lzdGVuY2lhbCBkdXJhbnRlIGxhIGZpZXN0YSBlbGVjdHLDs25pY2EgZW4gTWFyIGRlbCBQbGF0YSIsCiAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIkVsIGVxdWlwbyBkZSBsYSBTZWNyZXRhcsOtYSBkZSBQb2zDrXRpY2FzIEludGVncmFsZXMgc29icmUgRHJvZ2FzIGRlIGxhIE5hY2nDs24gQXJnZW50aW5hIChTRURST05BUiksIGVuY2FiZXphZG8gcG9yIHN1IHRpdHVsYXIsIFJvYmVydG8gTW9ybywgc2UgcmV1bmnDsyBjb24gZWwgc2VjcmV0YXJpbyBkZSBTYWx1ZCBkZSBsYSBNdW5pY2lwYWxpZGFkIGRlIEdlbmVyYWwgUHVleXJyZWTDs24sIEd1c3Rhdm8gQmxhbmNvLCBjb24gZWwgZmluIGRlIGFuYWxpemFyIGVsIHRyYWJham8gZGVzYXJyb2xsYWRvIGVuIG1hdGVyaWEgZGUgcHJldmVuY2nDs24geSBhc2lzdGVuY2lhIGRlbCBjb25zdW1vIGFidXNpdm8gZGUgZHJvZ2FzIHkgYWxjb2hvbCwgcXVlIHNlIGxsZXbDsyBhIGNhYm8gZHVyYW50ZSBsYSBtYXNpdmEgZmllc3RhIGVsZWN0csOzbmljYSBkZWwgcGFzYWRvIGZpbiBkZSBzZW1hbmEgZW4gTWFyIGRlbCBQbGF0YS4iLAogICAgICAidHdpdHRlcjppbWFnZTpzcmMiOiAiaHR0cHM6Ly93d3cuYXJnZW50aW5hLmdvYi5hci9zaXRlcy9kZWZhdWx0L2ZpbGVzL2FyZ2VudGluYS1mYi5wbmciLAogICAgICAiYXJ0aWNsZTphdXRob3IiOiAiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2Nhc2Fyb3NhZGFhcmdlbnRpbmEvIiwKICAgICAgImFydGljbGU6cHVibGlzaGVkX3RpbWUiOiAiMjAxNy0wMi0wMlQxMTozMTozMy0wMzowMCIsCiAgICAgICJhcnRpY2xlOm1vZGlmaWVkX3RpbWUiOiAiMjAxNy0wMi0wMlQxOToxNzoyNC0wMzowMCIKICAgICB9CiAgICBdLAogICAgImNzZV9pbWFnZSI6IFsKICAgICB7CiAgICAgICJzcmMiOiAiaHR0cHM6Ly93d3cuYXJnZW50aW5hLmdvYi5hci9zaXRlcy9kZWZhdWx0L2ZpbGVzL3dlYl8zNjE0LmpwZyIKICAgICB9CiAgICBdCiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICJ0aXRsZSI6ICJnb2JpZXJubyB5IHNvY2llZGFkIGVuIGNoaWxlIGR1cmFudGUgbGEg4oCccmVwdWJsaWNhIGNvbnNlcnZhZG9yYeKAnSIsCiAgICJodG1sVGl0bGUiOiAiZ29iaWVybm8geSBzb2NpZWRhZCBlbiBjaGlsZSBkdXJhbnRlIGxhIOKAnHJlcHVibGljYSBjb25zZXJ2YWRvcmHigJ0iLAogICAibGluayI6ICJodHRwOi8vcmF2aWduYW5pZGlnaXRhbC5jb20uYXIvX2JvbF9yYXZpZy9uMDEvbjAxYTA3LnBkZiIsCiAgICJkaXNwbGF5TGluayI6ICJyYXZpZ25hbmlkaWdpdGFsLmNvbS5hciIsCiAgICJzbmlwcGV0IjogIkdPQklFUk5PIFkgU09DSUVEQUQgRU4gQ0hJTEUgRFVSQU5URSBMQSDigJxSRVBVQkxJQ0EuIFxuQ09OU0VSVkFET1JB4oCdIDEgODMwLTE4NjUuIFNJTU9OIENPTExJRVIqLiBMQSBFU1RBQklMSURBRCBwb2zDrXRpY2EgZGUgXG5DaGlsZSAobyzCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJHT0JJRVJOTyBZIFNPQ0lFREFEIEVOIENISUxFIFx1MDAzY2JcdTAwM2VEVVJBTlRFIExBXHUwMDNjL2JcdTAwM2Ug4oCcUkVQVUJMSUNBLiBcdTAwM2Niclx1MDAzZVxuQ09OU0VSVkFET1JB4oCdIDEgODMwLTE4NjUuIFNJTU9OIENPTExJRVIqLiBMQSBFU1RBQklMSURBRCBwb2zDrXRpY2EgZGUgXHUwMDNjYnJcdTAwM2VcbkNoaWxlIChvLCZuYnNwOy4uLiIsCiAgICJjYWNoZUlkIjogIkk2Q1B0Vk5xdWFVSiIsCiAgICJtaW1lIjogImFwcGxpY2F0aW9uL3BkZiIsCiAgICJmaWxlRm9ybWF0IjogIlBERi9BZG9iZSBBY3JvYmF0IiwKICAgImZvcm1hdHRlZFVybCI6ICJyYXZpZ25hbmlkaWdpdGFsLmNvbS5hci9fYm9sX3JhdmlnL24wMS9uMDFhMDcucGRmIiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAicmF2aWduYW5pZGlnaXRhbC5jb20uYXIvX2JvbF9yYXZpZy9uMDEvbjAxYTA3LnBkZiIsCiAgICJwYWdlbWFwIjogewogICAgIm1ldGF0YWdzIjogWwogICAgIHsKICAgICAgIm1vZGRhdGUiOiAiRnJpIEFwciAyMyAwOTo1ODoyNiAyMDEwIiwKICAgICAgInByb2R1Y2VyIjogIkFkb2JlIEFjcm9iYXQgNy4wIEltYWdlIENvbnZlcnNpb24gUGx1Zy1pbiIsCiAgICAgICJjcmVhdG9yIjogIkFkb2JlIEFjcm9iYXQgNy4wIiwKICAgICAgImNyZWF0aW9uZGF0ZSI6ICJGcmkgQXByIDIzIDA5OjU4OjA1IDIwMTAiCiAgICAgfQogICAgXQogICB9CiAgfSwKICB7CiAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAidGl0bGUiOiAiVHLDoW5zaXRvIGVuIFRpZ3JlIGR1cmFudGUgbGEgY29tcGV0ZW5jaWEgSVJPTk1BTiA3MC4zIC4uLiIsCiAgICJodG1sVGl0bGUiOiAiVHLDoW5zaXRvIGVuIFRpZ3JlIGR1cmFudGUgbGEgY29tcGV0ZW5jaWEgSVJPTk1BTiA3MC4zIC4uLiIsCiAgICJsaW5rIjogImh0dHA6Ly93d3cudGlncmUuZ292LmFyL25vdGljaWFzL3RyYW5zaXRvLWVuLXRpZ3JlLWR1cmFudGUtbGEtY29tcGV0ZW5jaWEtaXJvbm1hbi03MC0zLyIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cudGlncmUuZ292LmFyIiwKICAgInNuaXBwZXQiOiAiaGFjZSAyIGTDrWFzIC4uLiBUcsOhbnNpdG8gZW4gVGlncmUgZHVyYW50ZSBsYSBjb21wZXRlbmNpYSBJUk9OTUFOIDcwLjMuIDggQ29tcGV0ZW5jaWEgXG5JUk9OTUFOICg3KS4gQ29tcGFydGlyIGVuIEZhY2Vib29rIMK3IFR3aXR0ZWFyIMK3IENvbXBhcnRpciBlbiBHK8KgLi4uIiwKICAgImh0bWxTbmlwcGV0IjogImhhY2UgMiBkw61hcyBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgVHLDoW5zaXRvIGVuIFRpZ3JlIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgY29tcGV0ZW5jaWEgSVJPTk1BTiA3MC4zLiA4IENvbXBldGVuY2lhIFx1MDAzY2JyXHUwMDNlXG5JUk9OTUFOICg3KS4gQ29tcGFydGlyIGVuIEZhY2Vib29rICZtaWRkb3Q7IFR3aXR0ZWFyICZtaWRkb3Q7IENvbXBhcnRpciBlbiBHKyZuYnNwOy4uLiIsCiAgICJjYWNoZUlkIjogIk12QjcwRUp0ZGh3SiIsCiAgICJmb3JtYXR0ZWRVcmwiOiAid3d3LnRpZ3JlLmdvdi5hci8uLi4vdHJhbnNpdG8tZW4tdGlncmUtZHVyYW50ZS1sYS1jb21wZXRlbmNpYS1pcm9ubWFuLTcwLTMvIiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAid3d3LnRpZ3JlLmdvdi5hci8uLi4vdHJhbnNpdG8tZW4tdGlncmUtXHUwMDNjYlx1MDAzZWR1cmFudGUtbGFcdTAwM2MvYlx1MDAzZS1jb21wZXRlbmNpYS1pcm9ubWFuLTcwLTMvIiwKICAgInBhZ2VtYXAiOiB7CiAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICB7CiAgICAgICJ3aWR0aCI6ICIxMTUiLAogICAgICAiaGVpZ2h0IjogIjYzIiwKICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4zLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NSS1k3M0gtejRmd19ScXZkbVJwcWtsOG9HRTBseVVacldzRW1QYzMxX1k3SUlwUjFCY3FoakoiCiAgICAgfQogICAgXSwKICAgICJtZXRhdGFncyI6IFsKICAgICB7CiAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wIiwKICAgICAgImdvb2dsZS10cmFuc2xhdGUtY3VzdG9taXphdGlvbiI6ICI2ODdjYTQ0MzBiNTNjMGQ5LTIzNjQzNDFlZmNmYTYxOWItZzlmZjg4OGRhMTE4NjQ5ZDEtMTAiCiAgICAgfQogICAgXSwKICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgewogICAgICAic3JjIjogImh0dHA6Ly93d3cudGlncmUuZ292LmFyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE2LzAyL1NXX29yaWctMTQ0eDc5LmpwZyIKICAgICB9CiAgICBdCiAgIH0KICB9LAogIHsKICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICJ0aXRsZSI6ICJQaW50YXJvbiBsYSBiYXPDrWxpY2EgZGUgU2FudG8gRG9taW5nbyBkdXJhbnRlIGxhIG1hcmNoYSIsCiAgICJodG1sVGl0bGUiOiAiUGludGFyb24gbGEgYmFzw61saWNhIGRlIFNhbnRvIERvbWluZ28gZHVyYW50ZSBsYSBtYXJjaGEiLAogICAibGluayI6ICJodHRwOi8vd3d3LmNhZGVuYTMuY29tL2NvbnRlbmlkby8yMDE3LzAzLzA5L1BpbnRhcm9uLWxhLWJhc2lsaWNhLWRlLVNhbnRvLURvbWluZ28tZHVyYW50ZS1sYS1tYXJjaGEtMTc5MzkxLmFzcCIsCiAgICJkaXNwbGF5TGluayI6ICJ3d3cuY2FkZW5hMy5jb20iLAogICAic25pcHBldCI6ICJQaW50YXJvbiBsYSBiYXPDrWxpY2EgZGUgU2FudG8gRG9taW5nbyBkdXJhbnRlIGxhIG1hcmNoYS4gMDkvMDMvMjAxNyB8IDA3OjQ3IHwgRWwgXG5wYWRyZSBNYW51ZWwgTWFydMOtbmV6IGNvbnTDsyBhIENhZGVuYSAzIHF1ZSBzZSB0cmF0w7MgZGUgdW4gZ3J1cG8gbWluw7pzY3Vsby4iLAogICAiaHRtbFNuaXBwZXQiOiAiUGludGFyb24gbGEgYmFzw61saWNhIGRlIFNhbnRvIERvbWluZ28gXHUwMDNjYlx1MDAzZWR1cmFudGUgbGFcdTAwM2MvYlx1MDAzZSBtYXJjaGEuIDA5LzAzLzIwMTcgfCAwNzo0NyB8IEVsIFx1MDAzY2JyXHUwMDNlXG5wYWRyZSBNYW51ZWwgTWFydMOtbmV6IGNvbnTDsyBhIENhZGVuYSAzIHF1ZSBzZSB0cmF0w7MgZGUgdW4gZ3J1cG8gbWluw7pzY3Vsby4iLAogICAiY2FjaGVJZCI6ICI2WHM4c0tiWTJ6UUoiLAogICAiZm9ybWF0dGVkVXJsIjogInd3dy5jYWRlbmEzLmNvbS8uLi4vUGludGFyb24tbGEtYmFzaWxpY2EtZGUtU2FudG8tRG9taW5nby1kdXJhbnRlLWxhLSBtYXJjaGEtMTc5MzkxLmFzcCIsCiAgICJodG1sRm9ybWF0dGVkVXJsIjogInd3dy5jYWRlbmEzLmNvbS8uLi4vUGludGFyb24tbGEtYmFzaWxpY2EtZGUtU2FudG8tRG9taW5nby1cdTAwM2NiXHUwMDNlZHVyYW50ZS1sYVx1MDAzYy9iXHUwMDNlLSBtYXJjaGEtMTc5MzkxLmFzcCIsCiAgICJwYWdlbWFwIjogewogICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgewogICAgICAid2lkdGgiOiAiMjgwIiwKICAgICAgImhlaWdodCI6ICIxODAiLAogICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjEuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1M1QmhOY2VSWGwzdkV6ejYyUklYWEZvRVZFNi1wc3plaHRjUzFjR2huZnB1ZkJYZDhxVjREc2lQUSIKICAgICB9CiAgICBdLAogICAgIm1ldGF0YWdzIjogWwogICAgIHsKICAgICAgImNvcHlyaWdodCI6ICJDYWRlbmEgMyBBcmdlbnRpbmEgMjAwMi0yMDE3IC0gVG9kb3MgbG9zIGRlcmVjaG9zIHJlc2VydmFkb3MiLAogICAgICAidHdpdHRlcjp3aWRnZXRzOmNzcCI6ICJvbiIsCiAgICAgICJmYjphZG1pbnMiOiAiMTAwMDAxMDUyMjk3Mzc1IiwKICAgICAgImZiOmFwcF9pZCI6ICIyODE5MDMwMTUxOTE5ODgiLAogICAgICAidGl0bGUiOiAiUGludGFyb24gbGEgYmFzw61saWNhIGRlIFNhbnRvIERvbWluZ28gZHVyYW50ZSBsYSBtYXJjaGEiLAogICAgICAiZGMudGl0bGUiOiAiUGludGFyb24gbGEgYmFzw61saWNhIGRlIFNhbnRvIERvbWluZ28gZHVyYW50ZSBsYSBtYXJjaGEgfCBDYWRlbmEgMyBBcmdlbnRpbmEiLAogICAgICAiZ2VvZ3JhcGh5IjogIkFsdmVhciAxMzksIEPDs3Jkb2JhLCBBcmdlbnRpbmEiLAogICAgICAiZGM6dGl0bGUiOiAiUGludGFyb24gbGEgYmFzw61saWNhIGRlIFNhbnRvIERvbWluZ28gZHVyYW50ZSBsYSBtYXJjaGEiLAogICAgICAiZGMuZGVzY3JpcHRpb24iOiAiRWwgcGFkcmUgTWFudWVsIE1hcnTDrW5leiBjb250w7MgYSBDYWRlbmEgMyBxdWUgc2UgdHJhdMOzIGRlIHVuIGdydXBvIG1pbsO6c2N1bG8uIFRhbWJpw6luIGFycm9qYXJvbiBib21iYXMgZGUgcGludHVyYS4gQWRlbcOhcywgc2Ugcm9iw7MgdW4gYmFubmVyIGNvbiBsYSBpbWFnZW4gZGUgdW4gQ3Jpc3RvLiIsCiAgICAgICJkYy5rZXl3b3JkcyI6ICJwaW50YWRhcyxiYXPDrWxpY2EgU2FudG8gRG9taW5nbyxwYXJvIGRlIG11amVyZXMsRMOtYSBkZSBsYSBNdWplciIsCiAgICAgICJuZXdzX2tleXdvcmRzIjogInBpbnRhZGFzLGJhc8OtbGljYSBTYW50byBEb21pbmdvLHBhcm8gZGUgbXVqZXJlcyxEw61hIGRlIGxhIE11amVyIiwKICAgICAgIm9yaWdlbiI6ICJDYWRlbmEgMyBBcmdlbnRpbmEgLSB3d3cuY2FkZW5hMy5jb20iLAogICAgICAiYXV0aG9yIjogIkNhZGVuYSAzIEFyZ2VudGluYSIsCiAgICAgICJkb2MtcmlnaHRzIjogIlByaXZhdGUiLAogICAgICAicmF0aW5nIjogIkdlbmVyYWwiLAogICAgICAiZGlzdHJpYnV0aW9uIjogImdsb2JhbCIsCiAgICAgICJnZW8ucG9zaXRpb24iOiAiLTMxLjQxNTE3LC02NC4xODA3MzMiLAogICAgICAiZ2VvLmNvdW50cnkiOiAiQVItQ8OzcmRvYmEiLAogICAgICAiZ2VvLnBsYWNlbmFtZSI6ICJDw7NyZG9iYSwgQXJnZW50aW5hIiwKICAgICAgImdlby5yZWdpb24iOiAiQVItVCIsCiAgICAgICJpY2JtIjogIi0zMS40MTUxNywtNjQuMTgwNzMzIiwKICAgICAgImxvY2FsaXR5IjogIkPDs3Jkb2JhLCBBcmdlbnRpbmEiLAogICAgICAib2c6aW1hZ2UiOiAiaHR0cDovL3d3dy5jYWRlbmEzLmNvbS9hZG1pbi9wbGF5ZXJzd2YvZm90b3MvQVJDSElfMzUzNzUxLmpwZyIsCiAgICAgICJvZzp1cmwiOiAiaHR0cDovL3d3dy5jYWRlbmEzLmNvbS9jb250ZW5pZG8vMjAxNy8wMy8wOS9QaW50YXJvbi1sYS1iYXNpbGljYS1kZS1TYW50by1Eb21pbmdvLWR1cmFudGUtbGEtbWFyY2hhLTE3OTM5MS5hc3AiLAogICAgICAib2c6c2l0ZV9uYW1lIjogIkNhZGVuYSAzIEFyZ2VudGluYSIsCiAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJFbCBwYWRyZSBNYW51ZWwgTWFydMOtbmV6IGNvbnTDsyBhIENhZGVuYSAzIHF1ZSBzZSB0cmF0w7MgZGUgdW4gZ3J1cG8gbWluw7pzY3Vsby4gVGFtYmnDqW4gYXJyb2phcm9uIGJvbWJhcyBkZSBwaW50dXJhLiBBZGVtw6FzLCBzZSByb2LDsyB1biBiYW5uZXIgY29uIGxhIGltYWdlbiBkZSB1biBDcmlzdG8uIiwKICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICJvZzp0aXRsZSI6ICJQaW50YXJvbiBsYSBiYXPDrWxpY2EgZGUgU2FudG8gRG9taW5nbyBkdXJhbnRlIGxhIG1hcmNoYSIsCiAgICAgICJvZzpsb2NhbGUiOiAiZXNfTEEiLAogICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAidHdpdHRlcjpzaXRlIjogIkBjYWRlbmEzY29tIiwKICAgICAgInR3aXR0ZXI6dGl0bGUiOiAiUGludGFyb24gbGEgYmFzw61saWNhIGRlIFNhbnRvIERvbWluZ28gZHVyYW50ZSBsYSBtYXJjaGEiLAogICAgICAidHdpdHRlcjpkZXNjcmlwdGlvbiI6ICJDYWRlbmEgMyBBcmdlbnRpbmEiLAogICAgICAidHdpdHRlcjppbWFnZSI6ICJodHRwOi8vd3d3LmNhZGVuYTMuY29tL2FkbWluL3BsYXllcnN3Zi9mb3Rvcy9BUkNISV8zNTM3NTEuanBnIgogICAgIH0KICAgIF0sCiAgICAiY3NlX2ltYWdlIjogWwogICAgIHsKICAgICAgInNyYyI6ICJodHRwOi8vd3d3LmNhZGVuYTMuY29tL2FkbWluL3BsYXllcnN3Zi9mb3Rvcy9BUkNISV8zNTM3NTEuanBnIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIkxhcyByZWZvcm1hcyBlc3RydWN0dXJhbGVzIHkgZWwgUGxhbiBkZSBDb252ZXJ0aWJpbGlkYWQgZHVyYW50ZSBsYSAuLi4iLAogICAiaHRtbFRpdGxlIjogIkxhcyByZWZvcm1hcyBlc3RydWN0dXJhbGVzIHkgZWwgUGxhbiBkZSBDb252ZXJ0aWJpbGlkYWQgZHVyYW50ZSBsYSAuLi4iLAogICAibGluayI6ICJodHRwOi8vbGVnYWN5LmZsYWNzby5vcmcuYXIvdXBsb2FkZWRfZmlsZXMvUHVibGljYWNpb25lcy8yN19BRVlUX0xhcy5yZWZvcm1hcy5lc3RydWN0dXJhbGVzLnkuZWwuUGxhbi5kZS5Db252ZXJ0aWJpbGlkYWQucGRmIiwKICAgImRpc3BsYXlMaW5rIjogImxlZ2FjeS5mbGFjc28ub3JnLmFyIiwKICAgInNuaXBwZXQiOiAiRHVyYW50ZSBsYSBkw6ljYWRhIGRlIGxvcyBub3ZlbnRhLCB5IGVzcGVjw61maWNhbWVudGUgZHVyYW50ZSBsYSB2aWdlbmNpYSBkZWwgXG5yw6lnaW1lbiBjb252ZXJ0aWJsZSAoMTk5MS0yMDAxKSwgc2UgcmVnaXN0cmEgc3VjZXNpdmFtZW50ZSBsYSBjb25zb2xpZGFjacOzbiB5IFxubGHCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJcdTAwM2NiXHUwMDNlRHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIGTDqWNhZGEgZGUgbG9zIG5vdmVudGEsIHkgZXNwZWPDrWZpY2FtZW50ZSBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIHZpZ2VuY2lhIGRlbCBcdTAwM2Niclx1MDAzZVxucsOpZ2ltZW4gY29udmVydGlibGUgKDE5OTEtMjAwMSksIHNlIHJlZ2lzdHJhIHN1Y2VzaXZhbWVudGUgbGEgY29uc29saWRhY2nDs24geSBcdTAwM2Niclx1MDAzZVxubGEmbmJzcDsuLi4iLAogICAiY2FjaGVJZCI6ICJWRHpDeXVhZDgyNEoiLAogICAibWltZSI6ICJhcHBsaWNhdGlvbi9wZGYiLAogICAiZmlsZUZvcm1hdCI6ICJQREYvQWRvYmUgQWNyb2JhdCIsCiAgICJmb3JtYXR0ZWRVcmwiOiAibGVnYWN5LmZsYWNzby5vcmcuYXIvLi4uLzI3X0FFWVRfTGFzLnJlZm9ybWFzLmVzdHJ1Y3R1cmFsZXMueS5lbC5QbGFuLmRlLiBDb252ZXJ0aWJpbGlkYWQucGRmIiwKICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAibGVnYWN5LmZsYWNzby5vcmcuYXIvLi4uLzI3X0FFWVRfTGFzLnJlZm9ybWFzLmVzdHJ1Y3R1cmFsZXMueS5lbC5QbGFuLmRlLiBDb252ZXJ0aWJpbGlkYWQucGRmIiwKICAgInBhZ2VtYXAiOiB7CiAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICB7CiAgICAgICJ3aWR0aCI6ICIxODIiLAogICAgICAiaGVpZ2h0IjogIjI3NiIsCiAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMS5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjU2tFeDVja2FLUnFxV0l2Nmw0ejBnY0ZqNllSM08zMDJ0SWVkM2xWNzVXaTcxSXdneFlYd0VrMThhSCIKICAgICB9CiAgICBdLAogICAgIm1ldGF0YWdzIjogWwogICAgIHsKICAgICAgIm1vZGRhdGUiOiAiRDoyMDA3MDcwMzExMDYzNS0wMycwMCciLAogICAgICAiY3JlYXRpb25kYXRlIjogIkQ6MjAwNTExMTAxNTQxNTktMDMnMDAnIiwKICAgICAgInRpdGxlIjogIkJhc3VhbGRvIiwKICAgICAgImNyZWF0b3IiOiAiUXVhcmtYUHJlc3PihKI6IExhc2VyV3JpdGVyIDggOC41LjEiLAogICAgICAiYXV0aG9yIjogImlhZGUiLAogICAgICAicHJvZHVjZXIiOiAiQWNyb2JhdCBEaXN0aWxsZXIgNi4wIGZvciBNYWNpbnRvc2giCiAgICAgfQogICAgXSwKICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgewogICAgICAic3JjIjogImh0dHA6Ly9wdWJsaWNhY2lvbmVzZWNvbm9taWEuZmxhY3NvLm9yZy5hci9pbWFnZXMvZnJvbnRwYWdlcy8yMDE3LzAyLzAxLzI3XzMuSlBHIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIsK/RXMgbm9ybWFsIGVsIGRvbG9yIGRlIGxvcyBwZWNob3MgZHVyYW50ZSBsYSBsYWN0YW5jaWE/IiwKICAgImh0bWxUaXRsZSI6ICLCv0VzIG5vcm1hbCBlbCBkb2xvciBkZSBsb3MgcGVjaG9zIGR1cmFudGUgbGEgbGFjdGFuY2lhPyIsCiAgICJsaW5rIjogImh0dHA6Ly93d3cucGxhbmV0YW1hbWEuY29tLmFyL3ByZWd1bnRhZnJlY3VlbnRlLyVDMiVCRmVzLW5vcm1hbC1lbC1kb2xvci1kZS1sb3MtcGVjaG9zLWR1cmFudGUtbGEtbGFjdGFuY2lhIiwKICAgImRpc3BsYXlMaW5rIjogInd3dy5wbGFuZXRhbWFtYS5jb20uYXIiLAogICAic25pcHBldCI6ICIuLi4gZWwgZG9sb3IgZXJhIG11Y2hpc2ltbywgaWd1YWwgYWd1YW50w6ksIG1lIGRvbGlhIGR1cmFudGUgbGEgc3VjY2nDs24geSBlc2UgZG9sb3IgXG5hbCBxdWUgc2UgcmVmaWVyZW4gY3VhbmRvIGJhamEgbGEgbGVjaGUgYXBlbmFzIGVsbGEgc2UgcHJlbmRpYSBkZWwgcGVjaG8gZXJhwqAuLi4iLAogICAiaHRtbFNuaXBwZXQiOiAiLi4uIGVsIGRvbG9yIGVyYSBtdWNoaXNpbW8sIGlndWFsIGFndWFudMOpLCBtZSBkb2xpYSBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIHN1Y2Npw7NuIHkgZXNlIGRvbG9yIFx1MDAzY2JyXHUwMDNlXG5hbCBxdWUgc2UgcmVmaWVyZW4gY3VhbmRvIGJhamEgbGEgbGVjaGUgYXBlbmFzIGVsbGEgc2UgcHJlbmRpYSBkZWwgcGVjaG8gZXJhJm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAiZXA4X0Y0NGhVUmtKIiwKICAgImZvcm1hdHRlZFVybCI6ICJ3d3cucGxhbmV0YW1hbWEuY29tLmFyLy4uLi/Cv2VzLW5vcm1hbC1lbC1kb2xvci1kZS1sb3MtcGVjaG9zLWR1cmFudGUtbGEtIGxhY3RhbmNpYSIsCiAgICJodG1sRm9ybWF0dGVkVXJsIjogInd3dy5wbGFuZXRhbWFtYS5jb20uYXIvLi4uL8K/ZXMtbm9ybWFsLWVsLWRvbG9yLWRlLWxvcy1wZWNob3MtXHUwMDNjYlx1MDAzZWR1cmFudGUtbGFcdTAwM2MvYlx1MDAzZS0gbGFjdGFuY2lhIiwKICAgInBhZ2VtYXAiOiB7CiAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICB7CiAgICAgICJ3aWR0aCI6ICIyMjUiLAogICAgICAiaGVpZ2h0IjogIjIyNSIsCiAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMC5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjVFVFM1ozSFlwYTVVUWlfYVppbHFDbWt4Y0tFaFNUdXVQUlliV2FvRjhXa01wcFBwQWdGRTBsVm1zIgogICAgIH0KICAgIF0sCiAgICAibWV0YXRhZ3MiOiBbCiAgICAgewogICAgICAiYXBwbGUtbW9iaWxlLXdlYi1hcHAtY2FwYWJsZSI6ICJ5ZXMiLAogICAgICAiYXBwbGUtbW9iaWxlLXdlYi1hcHAtc3RhdHVzLWJhci1zdHlsZSI6ICJibGFjay10cmFuc2x1Y2VudCIsCiAgICAgICJ2aWV3cG9ydCI6ICJpbml0aWFsLXNjYWxlPTEuMCwgbWF4aW11bS1zY2FsZT0xLjIsIHVzZXItc2NhbGFibGU9eWVzLCB3aWR0aD1kZXZpY2Utd2lkdGgiLAogICAgICAiZmI6cGFnZV9pZCI6ICIxNzI1NDc4MjA1MzMiLAogICAgICAib2c6aW1hZ2UiOiAiaHR0cDovL3d3dy5wbGFuZXRhbWFtYS5jb20uYXIvc2l0ZXMvYWxsL3RoZW1lcy9wbWFtYS9pbWFnZXMvbG9nby1mYi5qcGciLAogICAgICAiZmI6YXBwX2lkIjogIjE2NDQ1MzIzMzY3NTIzNiIKICAgICB9CiAgICBdLAogICAgImNzZV9pbWFnZSI6IFsKICAgICB7CiAgICAgICJzcmMiOiAiaHR0cDovL3d3dy5wbGFuZXRhbWFtYS5jb20uYXIvc2l0ZXMvYWxsL3RoZW1lcy9wbWFtYS9pbWFnZXMvbG9nby1mYi5qcGciCiAgICAgfQogICAgXSwKICAgICJhcnRpY2xlIjogWwogICAgIHsKICAgICAgImRhdGVjcmVhdGVkIjogIjIwMTUtMTItMTQiLAogICAgICAidXJsIjogImh0dHA6Ly93d3cucGxhbmV0YW1hbWEuY29tLmFyL3ByZWd1bnRhZnJlY3VlbnRlL8K/ZXMtbm9ybWFsLWVsLWRvbG9yLWRlLWxvcy1wZWNob3MtZHVyYW50ZS1sYS1sYWN0YW5jaWEiLAogICAgICAibmFtZSI6ICLCv0VzIG5vcm1hbCBlbCBkb2xvciBkZSBsb3MgcGVjaG9zIGR1cmFudGUgbGEgbGFjdGFuY2lhPyIsCiAgICAgICJhcnRpY2xlYm9keSI6ICJSZXNwZWN0byBhbCBkb2xvciwgZXMgYSB2ZWNlcyBkaWbDrWNpbCBkZWNpciBxdWUgZXMgbm9ybWFsIHkgcXVlIG5vLCBwdWVzdG8gcXVlIGVzdG8gZGVwZW5kZSBkZWwgbml2ZWwgZGUgdW1icmFsIHF1ZSBjYWRhIHVuYSBwb3NlZS4gTGxhbWFtb3MgXCJub3JtYWxcIiBhIGxvIHF1ZSBlbiBnZW5lcmFsIG11Y2hhcyBtYW3DoXMgbWFuaWZpZXN0YW4uLi4iCiAgICAgfQogICAgXQogICB9CiAgfSwKICB7CiAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAidGl0bGUiOiAiQXByZW5kZXIgYSBsZWVyIHkgZXNjcmliaXIgZHVyYW50ZSBsYSB1bHRpbWEgZGljdGFkdXJhIiwKICAgImh0bWxUaXRsZSI6ICJBcHJlbmRlciBhIGxlZXIgeSBlc2NyaWJpciBkdXJhbnRlIGxhIHVsdGltYSBkaWN0YWR1cmEiLAogICAibGluayI6ICJodHRwOi8vd3d3Lm1lbW9yaWEuZmFoY2UudW5scC5lZHUuYXIvYXJ0X3JldmlzdGFzL3ByLjQ3NzYvcHIuNDc3Ni5wZGYiLAogICAiZGlzcGxheUxpbmsiOiAid3d3Lm1lbW9yaWEuZmFoY2UudW5scC5lZHUuYXIiLAogICAic25pcHBldCI6ICJNYW5ub2NjaGksIEMuICgyMDEwKSBBcHJlbmRlciBhIGxlZXIgeSBlc2NyaWJpciBkdXJhbnRlIGxhIMO6bHRpbWEgZGljdGFkdXJhIFtFbiBcbmzDrW5lYV0gQXJjaGl2b3MgZGUgQ2llbmNpYXMgZGUgbGEgRWR1Y2FjacOzbiwgNGEuIMOpcG9jYSwgNCg0KS4gRGlzcG9uaWJsZSBlbsKgLi4uIiwKICAgImh0bWxTbmlwcGV0IjogIk1hbm5vY2NoaSwgQy4gKDIwMTApIEFwcmVuZGVyIGEgbGVlciB5IGVzY3JpYmlyIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2Ugw7psdGltYSBkaWN0YWR1cmEgW0VuIFx1MDAzY2JyXHUwMDNlXG5sw61uZWFdIEFyY2hpdm9zIGRlIENpZW5jaWFzIGRlIGxhIEVkdWNhY2nDs24sIDRhLiDDqXBvY2EsIDQoNCkuIERpc3BvbmlibGUgZW4mbmJzcDsuLi4iLAogICAibWltZSI6ICJhcHBsaWNhdGlvbi9wZGYiLAogICAiZmlsZUZvcm1hdCI6ICJQREYvQWRvYmUgQWNyb2JhdCIsCiAgICJmb3JtYXR0ZWRVcmwiOiAid3d3Lm1lbW9yaWEuZmFoY2UudW5scC5lZHUuYXIvYXJ0X3JldmlzdGFzL3ByLjQ3NzYvcHIuNDc3Ni5wZGYiLAogICAiaHRtbEZvcm1hdHRlZFVybCI6ICJ3d3cubWVtb3JpYS5mYWhjZS51bmxwLmVkdS5hci9hcnRfcmV2aXN0YXMvcHIuNDc3Ni9wci40Nzc2LnBkZiIsCiAgICJwYWdlbWFwIjogewogICAgIm1ldGF0YWdzIjogWwogICAgIHsKICAgICAgImNyZWF0b3IiOiAiQWRvYmUgSW5EZXNpZ24gQ1M1ICg3LjAuMykiLAogICAgICAidGl0bGUiOiAiQXByZW5kZXIgYSBsZWVyIHkgZXNjcmliaXIgZHVyYW50ZSBsYSB1bHRpbWEgZGljdGFkdXJhIiwKICAgICAgImF1dGhvciI6ICJDaW50aWEgTWFubm9jY2hpIiwKICAgICAgInByb2R1Y2VyIjogIkFkb2JlIFBERiBMaWJyYXJ5IDkuOTsgbW9kaWZpZWQgdXNpbmcgaVRleHQgMi4xLjcgYnkgMVQzWFQiLAogICAgICAic3ViamVjdCI6ICJFZHVjYWNpb247IEFydGljdWxvIiwKICAgICAgIm1vZGRhdGUiOiAiRDoyMDEzMDgwMjE4MjAwMy0wMycwMCciLAogICAgICAiY3JlYXRpb25kYXRlIjogIkQ6MjAxMTA4MTkxNjEwMDktMDMnMDAnIgogICAgIH0KICAgIF0KICAgfQogIH0sCiAgewogICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgInRpdGxlIjogIlZpZGEgY290aWRpYW5hIGR1cmFudGUgbGEgZGljdGFkdXJhIHwgRWR1Y2FjacOzbiB5IG1lbW9yaWEg4oCTIDI0IGRlIC4uLiIsCiAgICJodG1sVGl0bGUiOiAiVmlkYSBjb3RpZGlhbmEgZHVyYW50ZSBsYSBkaWN0YWR1cmEgfCBFZHVjYWNpw7NuIHkgbWVtb3JpYSDigJMgMjQgZGUgLi4uIiwKICAgImxpbmsiOiAiaHR0cDovL2VkdWNhY2lvbnltZW1vcmlhLmVkdWMuYXIvcHJpbWFyaWEvY2F0ZWdvcnkvdmlkYS1jb3RpZGlhbmEtZHVyYW50ZS1sYS1kaWN0YWR1cmEvIiwKICAgImRpc3BsYXlMaW5rIjogImVkdWNhY2lvbnltZW1vcmlhLmVkdWMuYXIiLAogICAic25pcHBldCI6ICJEdXJhbnRlIGxhIHJlcHJlc2nDs24gbXVjaGFzIHBlcnNvbmFzIHZpdmllcm9uIGNvbiBtaWVkby4gTGEgY2l1ZGFkYW7DrWEgZnVlIFxuZGVzaW5mb3JtYWRhIHlhIHF1ZSBsb3MgbWVkaW9zIGRlIGNvbXVuaWNhY2nDs24sIGN1eWEgZnVuY2nDs24gZXMgaW5mb3JtYXIgYSBsYVxuwqAuLi4iLAogICAiaHRtbFNuaXBwZXQiOiAiXHUwMDNjYlx1MDAzZUR1cmFudGUgbGFcdTAwM2MvYlx1MDAzZSByZXByZXNpw7NuIG11Y2hhcyBwZXJzb25hcyB2aXZpZXJvbiBjb24gbWllZG8uIExhIGNpdWRhZGFuw61hIGZ1ZSBcdTAwM2Niclx1MDAzZVxuZGVzaW5mb3JtYWRhIHlhIHF1ZSBsb3MgbWVkaW9zIGRlIGNvbXVuaWNhY2nDs24sIGN1eWEgZnVuY2nDs24gZXMgaW5mb3JtYXIgYSBsYVx1MDAzY2JyXHUwMDNlXG4mbmJzcDsuLi4iLAogICAiY2FjaGVJZCI6ICJGa2NwZUlKNmlUNEoiLAogICAiZm9ybWF0dGVkVXJsIjogImVkdWNhY2lvbnltZW1vcmlhLmVkdWMuYXIvLi4uL3ZpZGEtY290aWRpYW5hLWR1cmFudGUtbGEtZGljdGFkdXJhLyIsCiAgICJodG1sRm9ybWF0dGVkVXJsIjogImVkdWNhY2lvbnltZW1vcmlhLmVkdWMuYXIvLi4uL3ZpZGEtY290aWRpYW5hLVx1MDAzY2JcdTAwM2VkdXJhbnRlLWxhXHUwMDNjL2JcdTAwM2UtZGljdGFkdXJhLyIKICB9LAogIHsKICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICJ0aXRsZSI6ICJDw61jbG8gTWVuc3RydWFsIiwKICAgImh0bWxUaXRsZSI6ICJDw61jbG8gTWVuc3RydWFsIiwKICAgImxpbmsiOiAiaHR0cDovL3d3dy5tc2FsLmdvYi5hci9pbmRleC5waHAvcHJvZ3JhbWFzLXktcGxhbmVzLzM5MS1jaWNsby1tZW5zdHJ1YWwiLAogICAiZGlzcGxheUxpbmsiOiAid3d3Lm1zYWwuZ29iLmFyIiwKICAgInNuaXBwZXQiOiAiRHVyYW50ZSBsYSBwcmltZXJhIG1pdGFkIGRlbCBjaWNsbyBtZW5zdHJ1YWwsIGxvcyBuaXZlbGVzIGRlIGxhIGhvcm1vbmEgbGxhbWFkYSBcbmVzdHLDs2dlbm8gYXVtZW50YW4geSBoYWNlbiBxdWUgbGEgcGFyZWQgaW50ZXJuYSBkZWwgw7p0ZXJvIChxdWUgc2UgbGxhbWHCoC4uLiIsCiAgICJodG1sU25pcHBldCI6ICJcdTAwM2NiXHUwMDNlRHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIHByaW1lcmEgbWl0YWQgZGVsIGNpY2xvIG1lbnN0cnVhbCwgbG9zIG5pdmVsZXMgZGUgbGEgaG9ybW9uYSBsbGFtYWRhIFx1MDAzY2JyXHUwMDNlXG5lc3Ryw7NnZW5vIGF1bWVudGFuIHkgaGFjZW4gcXVlIGxhIHBhcmVkIGludGVybmEgZGVsIMO6dGVybyAocXVlIHNlIGxsYW1hJm5ic3A7Li4uIiwKICAgImNhY2hlSWQiOiAidFBCbXFpRUhKMVFKIiwKICAgImZvcm1hdHRlZFVybCI6ICJ3d3cubXNhbC5nb2IuYXIvaW5kZXgucGhwL3Byb2dyYW1hcy15Li4uLzM5MS1jaWNsby1tZW5zdHJ1YWwiLAogICAiaHRtbEZvcm1hdHRlZFVybCI6ICJ3d3cubXNhbC5nb2IuYXIvaW5kZXgucGhwL3Byb2dyYW1hcy15Li4uLzM5MS1jaWNsby1tZW5zdHJ1YWwiLAogICAicGFnZW1hcCI6IHsKICAgICJtZXRhdGFncyI6IFsKICAgICB7CiAgICAgICJ0aXRsZSI6ICJDw61jbG8gTWVuc3RydWFsIiwKICAgICAgIm9nOmltYWdlIjogImh0dHA6Ly93d3cubXNhbC5nb2IuYXIvaW1hZ2VzL3N0b3JpZXMvdGVtcGxhdGVJbWFnZXMvbG9nb19taW5pc2l0aW8ucG5nIiwKICAgICAgIm9nOnRpdGxlIjogIkPDrWNsbyBNZW5zdHJ1YWwiCiAgICAgfQogICAgXSwKICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgewogICAgICAic3JjIjogImh0dHA6Ly93d3cubXNhbC5nb2IuYXIvaW1hZ2VzL3N0b3JpZXMvdGVtcGxhdGVJbWFnZXMvbG9nb19taW5pc2l0aW8ucG5nIgogICAgIH0KICAgIF0KICAgfQogIH0KIF0KfQo=
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:41 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=41
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:42 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:42 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/TipHli4UMbO-LIEOl82k5XdZqlA"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '25053'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:42 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=51
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:43 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:43 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/3u4wlk9UNZlBLbGAtH5sSJBUSzg"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '19804'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:43 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=61
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:44 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:44 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/5Irlsq0gijS4eCmq-PDHurdACC4"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '25314'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:45 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=71
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:46 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:46 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/raRPhJFnkjnJKRZxmaH83kwMiBM"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '27679'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:46 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=81
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:47 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:47 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/GBaFgITAtorpvEsHBM6Q_XybO0s"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '28581'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:47 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=91
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Expires:
      - Sat, 11 Mar 2017 23:21:48 GMT
      Date:
      - Sat, 11 Mar 2017 23:21:48 GMT
      Cache-Control:
      - private, max-age=0, must-revalidate, no-transform
      Etag:
      - '"Km-rZ3xLOWf3nUikI4cgnYOU2vc/rzQ8V7EBXgJPPNd90uzul0-ZD8M"'
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '62352'
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:48 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyB1ljEE3VAU7hv6GjSgvfYSc5IREHwsd0w&language=es&q=allintext:%22durante%20la%22&start=101
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Vary:
      - Origin
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Sat, 11 Mar 2017 23:21:49 GMT
      Expires:
      - Sat, 11 Mar 2017 23:21:49 GMT
      Cache-Control:
      - private, max-age=0
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      Server:
      - GSE
      Alt-Svc:
      - quic=":443"; ma=2592000; v="36,35,34"
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
         "error": {
          "errors": [
           {
            "domain": "global",
            "reason": "invalid",
            "message": "Invalid Value"
           }
          ],
          "code": 400,
          "message": "Invalid Value"
         }
        }
    http_version: 
  recorded_at: Sat, 11 Mar 2017 23:21:49 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=%27008349512099616087257:2_aa5fx5f7e%27&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Vary:
      - Origin
      - Referer
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Sun, 02 Feb 2020 19:37:56 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "error": {
            "code": 404,
            "message": "Requested entity was not found.",
            "errors": [
              {
                "message": "Requested entity was not found.",
                "domain": "global",
                "reason": "notFound"
              }
            ],
            "status": "NOT_FOUND"
          }
        }
    http_version: 
  recorded_at: Sun, 02 Feb 2020 19:37:56 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=1
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:38 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        ewogICJraW5kIjogImN1c3RvbXNlYXJjaCNzZWFyY2giLAogICJ1cmwiOiB7CiAgICAidHlwZSI6ICJhcHBsaWNhdGlvbi9qc29uIiwKICAgICJ0ZW1wbGF0ZSI6ICJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9jdXN0b21zZWFyY2gvdjE/cT17c2VhcmNoVGVybXN9Jm51bT17Y291bnQ/fSZzdGFydD17c3RhcnRJbmRleD99JmxyPXtsYW5ndWFnZT99JnNhZmU9e3NhZmU/fSZjeD17Y3g/fSZzb3J0PXtzb3J0P30mZmlsdGVyPXtmaWx0ZXI/fSZnbD17Z2w/fSZjcj17Y3I/fSZnb29nbGVob3N0PXtnb29nbGVIb3N0P30mYzJjb2ZmPXtkaXNhYmxlQ25Ud1RyYW5zbGF0aW9uP30maHE9e2hxP30maGw9e2hsP30mc2l0ZVNlYXJjaD17c2l0ZVNlYXJjaD99JnNpdGVTZWFyY2hGaWx0ZXI9e3NpdGVTZWFyY2hGaWx0ZXI/fSZleGFjdFRlcm1zPXtleGFjdFRlcm1zP30mZXhjbHVkZVRlcm1zPXtleGNsdWRlVGVybXM/fSZsaW5rU2l0ZT17bGlua1NpdGU/fSZvclRlcm1zPXtvclRlcm1zP30mcmVsYXRlZFNpdGU9e3JlbGF0ZWRTaXRlP30mZGF0ZVJlc3RyaWN0PXtkYXRlUmVzdHJpY3Q/fSZsb3dSYW5nZT17bG93UmFuZ2U/fSZoaWdoUmFuZ2U9e2hpZ2hSYW5nZT99JnNlYXJjaFR5cGU9e3NlYXJjaFR5cGV9JmZpbGVUeXBlPXtmaWxlVHlwZT99JnJpZ2h0cz17cmlnaHRzP30maW1nU2l6ZT17aW1nU2l6ZT99JmltZ1R5cGU9e2ltZ1R5cGU/fSZpbWdDb2xvclR5cGU9e2ltZ0NvbG9yVHlwZT99JmltZ0RvbWluYW50Q29sb3I9e2ltZ0RvbWluYW50Q29sb3I/fSZhbHQ9anNvbiIKICB9LAogICJxdWVyaWVzIjogewogICAgInJlcXVlc3QiOiBbCiAgICAgIHsKICAgICAgICAidGl0bGUiOiAiR29vZ2xlIEN1c3RvbSBTZWFyY2ggLSBhbGxpbnRleHQ6XCJkdXJhbnRlIGxhXCIiLAogICAgICAgICJ0b3RhbFJlc3VsdHMiOiAiMTg0MDAwMDAiLAogICAgICAgICJzZWFyY2hUZXJtcyI6ICJhbGxpbnRleHQ6XCJkdXJhbnRlIGxhXCIiLAogICAgICAgICJjb3VudCI6IDEwLAogICAgICAgICJzdGFydEluZGV4IjogMSwKICAgICAgICAiaW5wdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICAgICAib3V0cHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAgICAgInNhZmUiOiAib2ZmIiwKICAgICAgICAiY3giOiAiMDA4MzQ5NTEyMDk5NjE2MDg3MjU3OjJfYWE1Zng1ZjdlIiwKICAgICAgICAiY3IiOiAiY291bnRyeUFSIiwKICAgICAgICAiZmlsZVR5cGUiOiAiLXBkZiIKICAgICAgfQogICAgXSwKICAgICJuZXh0UGFnZSI6IFsKICAgICAgewogICAgICAgICJ0aXRsZSI6ICJHb29nbGUgQ3VzdG9tIFNlYXJjaCAtIGFsbGludGV4dDpcImR1cmFudGUgbGFcIiIsCiAgICAgICAgInRvdGFsUmVzdWx0cyI6ICIxODQwMDAwMCIsCiAgICAgICAgInNlYXJjaFRlcm1zIjogImFsbGludGV4dDpcImR1cmFudGUgbGFcIiIsCiAgICAgICAgImNvdW50IjogMTAsCiAgICAgICAgInN0YXJ0SW5kZXgiOiAxMSwKICAgICAgICAiaW5wdXRFbmNvZGluZyI6ICJ1dGY4IiwKICAgICAgICAib3V0cHV0RW5jb2RpbmciOiAidXRmOCIsCiAgICAgICAgInNhZmUiOiAib2ZmIiwKICAgICAgICAiY3giOiAiMDA4MzQ5NTEyMDk5NjE2MDg3MjU3OjJfYWE1Zng1ZjdlIiwKICAgICAgICAiY3IiOiAiY291bnRyeUFSIiwKICAgICAgICAiZmlsZVR5cGUiOiAiLXBkZiIKICAgICAgfQogICAgXQogIH0sCiAgImNvbnRleHQiOiB7CiAgICAidGl0bGUiOiAiTGluZ3VhRmluZGVyIHwgZGV2ZWxvcG1lbnQiCiAgfSwKICAic2VhcmNoSW5mb3JtYXRpb24iOiB7CiAgICAic2VhcmNoVGltZSI6IDAuMzY3NzE3LAogICAgImZvcm1hdHRlZFNlYXJjaFRpbWUiOiAiMC4zNyIsCiAgICAidG90YWxSZXN1bHRzIjogIjE4NDAwMDAwIiwKICAgICJmb3JtYXR0ZWRUb3RhbFJlc3VsdHMiOiAiMTgsNDAwLDAwMCIKICB9LAogICJpdGVtcyI6IFsKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJDcsOtdGljYSBkZSBcIkR1cmFudGUgbGEgdG9ybWVudGFcIiwgcG9yIE5ldGZsaXg6IE1lIHF1aWVyZW4gdm9sdmVyIGxvY2EgLi4uIiwKICAgICAgImh0bWxUaXRsZSI6ICJDcsOtdGljYSBkZSAmcXVvdDtEdXJhbnRlIGxhIHRvcm1lbnRhJnF1b3Q7LCBwb3IgTmV0ZmxpeDogTWUgcXVpZXJlbiB2b2x2ZXIgbG9jYSAuLi4iLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5jbGFyaW4uY29tL2VzcGVjdGFjdWxvcy9jaW5lL2NyaXRpY2EtdG9ybWVudGEtbmV0ZmxpeC1xdWllcmVuLXZvbHZlci1sb2NhXzBfYVB2TlI1SDdILmh0bWwiLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3LmNsYXJpbi5jb20iLAogICAgICAic25pcHBldCI6ICIyMSBBYnIgMjAxOSAuLi4gQWxnbyBkZSBlc3RvIGhheSBxdWUgc2FiZXIgbyBlbnRlbmRlciBwYXJhIHF1ZSBsYSB2aXNpw7NuIGRlIER1cmFudGUgbGEgdG9ybWVudGEgXG5ubyB0b21lIGRlc3ByZXZlbmlkbyBhbCBlc3BlY3RhZG9yLiBOZXdzbGV0dGVycyBDbGFyw61uIFZpdmHCoC4uLiIsCiAgICAgICJodG1sU25pcHBldCI6ICIyMSBBYnIgMjAxOSBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgQWxnbyBkZSBlc3RvIGhheSBxdWUgc2FiZXIgbyBlbnRlbmRlciBwYXJhIHF1ZSBsYSB2aXNpw7NuIGRlIFx1MDAzY2JcdTAwM2VEdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgdG9ybWVudGEgXHUwMDNjYnJcdTAwM2Vcbm5vIHRvbWUgZGVzcHJldmVuaWRvIGFsIGVzcGVjdGFkb3IuIE5ld3NsZXR0ZXJzIENsYXLDrW4gVml2YSZuYnNwOy4uLiIsCiAgICAgICJjYWNoZUlkIjogIk4xbGpybWpONEZVSiIsCiAgICAgICJmb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly93d3cuY2xhcmluLmNvbS8uLi4vY3JpdGljYS10b3JtZW50YS1uZXRmbGl4LXF1aWVyZW4tdm9sdmVyLWxvY2FfMF8gYVB2TlI1SDdILmh0bWwiLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5jbGFyaW4uY29tLy4uLi9jcml0aWNhLXRvcm1lbnRhLW5ldGZsaXgtcXVpZXJlbi12b2x2ZXItbG9jYV8wXyBhUHZOUjVIN0guaHRtbCIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjAuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1JyMGpVT1Z0Wm5vam14ZWpXdXdHNzBLZTVzM0syb0dvRW4wNzc2SER4d2pHa1FCcXBfREpDLTRJTSIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIzMTAiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE2MyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vaW1hZ2VzLmNsYXJpbi5jb20vMjAxOS8wNC8xOC80T1lyV0xCNWlfMTIwMHg2MzBfXzEuanBnIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5X2xhcmdlX2ltYWdlIiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJhdXRob3IiOiAiQ2xhcsOtbi5jb20iLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiQ3LDrXRpY2EgZGUgXCJEdXJhbnRlIGxhIHRvcm1lbnRhXCIsIHBvciBOZXRmbGl4OiBNZSBxdWllcmVuIHZvbHZlciBsb2NhIiwKICAgICAgICAgICAgInByb2R1Y3Q6cHJpY2U6YW1vdW50IjogIjEwMCIsCiAgICAgICAgICAgICJwcm9kdWN0OmF2YWlsYWJpbGl0eSI6ICJpbiBzdG9jayIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNyZWF0b3IiOiAiQENsYXJpbmNvbSIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJBZHJpYW5hIFVnYXJ0ZSBlcyBWZXJhLCBxdWllbiBkZSBnb2xwZSBubyBlcyByZWNvbm9jaWRhIHBvciBzdSBtYXJpZG8uIEVsIENoaW5vIERhcsOtbiBpbnRlbnRhIGF5dWRhcmxhLsKgIiwKICAgICAgICAgICAgImZiOnBhZ2VzIjogIjE1NjA1NzM1Nzc2MjcxMiIsCiAgICAgICAgICAgICJhZ2VhcGFyc2U6cmVjczpwdWJsaXNodGltZSI6ICIyMDE5LTA0LTIxVDE3OjAwOjQ0LjAwMC0wMzAwIiwKICAgICAgICAgICAgInR3aXR0ZXI6aW1hZ2U6YWx0IjogIlRocmlsbGVyIGNvbiDigJxlZmVjdG8gbWFyaXBvc2HigJ0uIFZlcmEsIGNvbiBzdSBoaWppdGEgZW4gdW5hIGRlIGxhcyBkb3MgcmVhbGlkYWRlcyBwYXJhbGVsYXMuIEZPVE86IE5FVEZMSVgiLAogICAgICAgICAgICAiZmI6YXBwX2lkIjogIjQzNzQ5MTk4OTk3MDY4NyIsCiAgICAgICAgICAgICJ0d2l0dGVyOnNpdGUiOiAiQENsYXJpbmNvbSIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyIsCiAgICAgICAgICAgICJwcm9kdWN0OmJyYW5kIjogIkNsYXJpbiIsCiAgICAgICAgICAgICJhZ2VhcGFyc2U6Z2NhLWNhdGVnb3JpZXMiOiAiZXNwZWN0w6FjdWxvcyAtIGNpbmUiLAogICAgICAgICAgICAicHJvZHVjdDpwcmljZTpjdXJyZW5jeSI6ICJBUlMiLAogICAgICAgICAgICAiZmI6YWRtaW5zIjogIjY4MjU2OTY3NiIsCiAgICAgICAgICAgICJwcm9kdWN0OnJldGFpbGVyX2l0ZW1faWQiOiAiYVB2TlI1SDdIIiwKICAgICAgICAgICAgIm9nOnVybCI6ICJodHRwczovL3d3dy5jbGFyaW4uY29tL2VzcGVjdGFjdWxvcy9jaW5lL2NyaXRpY2EtdG9ybWVudGEtbmV0ZmxpeC1xdWllcmVuLXZvbHZlci1sb2NhXzBfYVB2TlI1SDdILmh0bWwiLAogICAgICAgICAgICAicHJvZHVjdDpjb25kaXRpb24iOiAibmV3IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2ltYWdlcy5jbGFyaW4uY29tLzIwMTkvMDQvMTgvNE9ZcldMQjVpXzEyMDB4NjMwX18xLmpwZyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJsaXN0aXRlbSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIml0ZW0iOiAiQ2xhcsOtbi5jb20iLAogICAgICAgICAgICAibmFtZSI6ICJDbGFyw61uLmNvbSIsCiAgICAgICAgICAgICJwb3NpdGlvbiI6ICIxIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIml0ZW0iOiAiRXNwZWN0w6FjdWxvcyIsCiAgICAgICAgICAgICJuYW1lIjogIkVzcGVjdMOhY3Vsb3MiLAogICAgICAgICAgICAicG9zaXRpb24iOiAiMiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJpdGVtIjogIkNpbmUiLAogICAgICAgICAgICAibmFtZSI6ICJDaW5lIiwKICAgICAgICAgICAgInBvc2l0aW9uIjogIjMiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIlphZmZhcm9uaSB5IGxvcyBoYWJlYXMgY29ycHVzIGR1cmFudGUgbGEgZGljdGFkdXJhIC4uLiB8IFDDoWdpbmExMiIsCiAgICAgICJodG1sVGl0bGUiOiAiWmFmZmFyb25pIHkgbG9zIGhhYmVhcyBjb3JwdXMgZHVyYW50ZSBsYSBkaWN0YWR1cmEgLi4uIHwgUMOhZ2luYTEyIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cucGFnaW5hMTIuY29tLmFyLzk2NzEyLXphZmZhcm9uaS15LWxvcy1oYWJlYXMtY29ycHVzLWR1cmFudGUtbGEtZGljdGFkdXJhIiwKICAgICAgImRpc3BsYXlMaW5rIjogInd3dy5wYWdpbmExMi5jb20uYXIiLAogICAgICAic25pcHBldCI6ICIyMCBGZWIgMjAxOCAuLi4gUGVybyBzw60gbWUgcGFyZWNlIGltcG9ydGFudGUgYW5hbGl6YXIgc3UgYWN0dWFjacOzbiBjb21vIGp1ZXogZnJlbnRlIGEgbG9zIFxucmVjbGFtb3MgcG9yIHZpb2xhY2lvbmVzIGEgbG9zIGRlcmVjaG9zIGh1bWFub3MgZHVyYW50ZSBsYcKgLi4uIiwKICAgICAgImh0bWxTbmlwcGV0IjogIjIwIEZlYiAyMDE4IFx1MDAzY2JcdTAwM2UuLi5cdTAwM2MvYlx1MDAzZSBQZXJvIHPDrSBtZSBwYXJlY2UgaW1wb3J0YW50ZSBhbmFsaXphciBzdSBhY3R1YWNpw7NuIGNvbW8ganVleiBmcmVudGUgYSBsb3MgXHUwMDNjYnJcdTAwM2VcbnJlY2xhbW9zIHBvciB2aW9sYWNpb25lcyBhIGxvcyBkZXJlY2hvcyBodW1hbm9zIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UmbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICIteGFmU2I5ZUFKNEoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LnBhZ2luYTEyLmNvbS5hci85NjcxMi16YWZmYXJvbmkteS1sb3MtaGFiZWFzLWNvcnB1cy1kdXJhbnRlLSBsYS1kaWN0YWR1cmEiLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5wYWdpbmExMi5jb20uYXIvOTY3MTItemFmZmFyb25pLXktbG9zLWhhYmVhcy1jb3JwdXMtXHUwMDNjYlx1MDAzZWR1cmFudGUtIGxhXHUwMDNjL2JcdTAwM2UtZGljdGFkdXJhIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMS5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjUWJTdVhGM2lQTThEMmRTZWxONGxmN2U2aUw2LWczZDY5WUJPZEp4WjVMZThoSEtNbU9VbHg1d01VZyIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIzMDAiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE2OCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vaW1hZ2VzLnBhZ2luYTEyLmNvbS5hci9zdHlsZXMvZm9jYWxfMTZfOV85NjB4NTQwL3B1YmxpYy8yMDE4LTAyL25hMDhmbzAxXzkuanBnP2l0b2s9UTNGd2Q3UnIiLAogICAgICAgICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAgICAgICAiYXJ0aWNsZTpwdWJsaXNoZWRfdGltZSI6ICIxNTE5MDQ4NzQ0IiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJQQUdJTkExMiIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJIYWdhbiBlc3RlIGVqZXJjaWNpbzogcG9uZ2FuIFphZmZhcm9uaSB5IEhhYmVhcyBDb3JwdXMgZW4gZWwgYnVzY2Fkb3IgZGUgSW50ZXJuZXQgeSBzZSBlbmNvbnRyYXLDoW4gY29uIHVuIGFsdXZpw7NuIGRlIHJlc3VsdGFkb3MgZGUgY3V5YSBsZWN0dXJhIHN1cmdlIHF1ZSBzZSB0cmF0YSBkZSB1biBqdWV6IHF1ZSBkdXJhbnRlIGxhIGRpY3RhZHVyYSBzZSBkZWRpY2FiYSBpbXBpYWRvc2FtZW50ZSBhIHJlY2hhemFyIGxvcyBwZWRpZG9zIGRlIC4uLiIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNyZWF0b3IiOiAiQFBhZ2luYTEyIiwKICAgICAgICAgICAgImFydGljbGU6cHVibGlzaGVyIjogImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9QYWdpbmExMm9rIiwKICAgICAgICAgICAgIm9nOmltYWdlOnNlY3VyZV91cmwiOiAiaHR0cHM6Ly9pbWFnZXMucGFnaW5hMTIuY29tLmFyL3N0eWxlcy9mb2NhbF8xNl85Xzk2MHg1NDAvcHVibGljLzIwMTgtMDIvbmEwOGZvMDFfOS5qcGc/aXRvaz1RM0Z3ZDdSciIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHBzOi8vaW1hZ2VzLnBhZ2luYTEyLmNvbS5hci9zdHlsZXMvZm9jYWxfMTZfOV85NjB4NTQwL3B1YmxpYy8yMDE4LTAyL25hMDhmbzAxXzkuanBnP2l0b2s9UTNGd2Q3UnIiLAogICAgICAgICAgICAidHdpdHRlcjpzaXRlIjogIkBwYWdpbmExMiIsCiAgICAgICAgICAgICJhcnRpY2xlOm1vZGlmaWVkX3RpbWUiOiAiMTUxOTE5MDc5NSIsCiAgICAgICAgICAgICJuZXdzX2tleXdvcmRzIjogIkVsIHBhw61zIiwKICAgICAgICAgICAgImN4ZW5zZXBhcnNlOnJlY3M6cHVibGlzaHRpbWUiOiAiMjAxOC0wMi0xOVQxMzo1OTowNC4wMDBaIiwKICAgICAgICAgICAgInNoYXJlX2Nkbl9ob3N0IjogImh0dHBzOi8vd3d3LnBhZ2luYTEyLmNvbS5hciIsCiAgICAgICAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAgICAgICAidHdpdHRlcjp0aXRsZSI6ICJaYWZmYXJvbmkgeSBsb3MgaGFiZWFzIGNvcnB1cyBkdXJhbnRlIGxhIGRpY3RhZHVyYSB8IE9waW5pw7NuIiwKICAgICAgICAgICAgImFydGljbGU6c2VjdGlvbiI6ICJFbCBwYcOtcyIsCiAgICAgICAgICAgICJvZzppbWFnZTp1cmwiOiAiaHR0cHM6Ly9pbWFnZXMucGFnaW5hMTIuY29tLmFyL3N0eWxlcy9mb2NhbF8xNl85Xzk2MHg1NDAvcHVibGljLzIwMTgtMDIvbmEwOGZvMDFfOS5qcGc/aXRvaz1RM0Z3ZDdSciIsCiAgICAgICAgICAgICJjeGVuc2VwYXJzZTpwYWdlY2xhc3MiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJvZzp0aXRsZSI6ICJaYWZmYXJvbmkgeSBsb3MgaGFiZWFzIGNvcnB1cyBkdXJhbnRlIGxhIGRpY3RhZHVyYSB8IE9waW5pw7NuIiwKICAgICAgICAgICAgImZiOnBhZ2VzIjogIjE1NDE2MzgzOTkzOTM0MzYiLAogICAgICAgICAgICAiYXJ0aWNsZTphdXRob3IiOiAiUMOhZ2luYTEyIiwKICAgICAgICAgICAgImFydGljbGU6dGFnIjogIkVsIHBhw61zIiwKICAgICAgICAgICAgInZpZXdwb3J0IjogIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLCBtaW5pbXVtLXNjYWxlPTEsIHVzZXItc2NhbGFibGU9eWVzIiwKICAgICAgICAgICAgInR3aXR0ZXI6ZGVzY3JpcHRpb24iOiAiSGFnYW4gZXN0ZSBlamVyY2ljaW86IHBvbmdhbiBaYWZmYXJvbmkgeSBIYWJlYXMgQ29ycHVzIGVuIGVsIGJ1c2NhZG9yIGRlIEludGVybmV0IHkgc2UgZW5jb250cmFyw6FuIGNvbiB1biBhbHV2acOzbiBkZSByZXN1bHRhZG9zIGRlIGN1eWEgbGVjdHVyYSBzdXJnZSBxdWUgc2UgdHJhdGEgZGUgdW4ganVleiBxdWUgZHVyYW50ZSBsYSBkaWN0YWR1cmEgc2UgZGVkaWNhYmEgaW1waWFkb3NhbWVudGUgYSByZWNoYXphciBsb3MgcGVkaWRvcyBkZSAuLi4iLAogICAgICAgICAgICAiY3hlbnNlcGFyc2U6YXJ0aWNsZWlkIjogIjk2NzEyIiwKICAgICAgICAgICAgIm9nOmxvY2FsZSI6ICJlc19BUiIsCiAgICAgICAgICAgICJvZzp1cmwiOiAiaHR0cHM6Ly93d3cucGFnaW5hMTIuY29tLmFyLzk2NzEyLXphZmZhcm9uaS15LWxvcy1oYWJlYXMtY29ycHVzLWR1cmFudGUtbGEtZGljdGFkdXJhIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2ltYWdlcy5wYWdpbmExMi5jb20uYXIvc3R5bGVzL2ZvY2FsXzE2XzlfOTYweDU0MC9wdWJsaWMvMjAxOC0wMi9uYTA4Zm8wMV85LmpwZz9pdG9rPVEzRndkN1JyIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJWaWRlbzogQ3JpbWVuIGVuIFZpbGxhIEdlc2VsOiB1bmEgdGVzdGlnbyBjbGF2ZSBhc2VndXLDsyBxdWUgLi4uIiwKICAgICAgImh0bWxUaXRsZSI6ICJWaWRlbzogQ3JpbWVuIGVuIFZpbGxhIEdlc2VsOiB1bmEgdGVzdGlnbyBjbGF2ZSBhc2VndXLDsyBxdWUgLi4uIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuY2xhcmluLmNvbS9wb2xpY2lhbGVzL3ZpZGVvLWNyaW1lbi12aWxsYS1nZXNlbC10ZXN0aWdvLWNsYXZlLWFzZWd1cm8tZ29scGl6YS1mZXJuYW5kby1ydWdiaWVycy1kZXRlbmlkb3MtZGlqby12b3ktbGxldmFyLXRyb2Zlb18zX3NRTk5qc0lFLmh0bWwiLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3LmNsYXJpbi5jb20iLAogICAgICAic25pcHBldCI6ICJIYWNlIDIgZMOtYXMgLi4uIFZpZGVvOiBDcmltZW4gZW4gVmlsbGEgR2VzZWw6IHVuYSB0ZXN0aWdvIGNsYXZlIGFzZWd1csOzIHF1ZSBkdXJhbnRlIGxhIGdvbHBpemEgYSBcbkZlcm5hbmRvIHVubyBkZSBsb3MgcnVnYmllcnMgZGV0ZW5pZG9zIGRpam86IOKAnE1lIGxvIHZveSBhwqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiSGFjZSAyIGTDrWFzIFx1MDAzY2JcdTAwM2UuLi5cdTAwM2MvYlx1MDAzZSBWaWRlbzogQ3JpbWVuIGVuIFZpbGxhIEdlc2VsOiB1bmEgdGVzdGlnbyBjbGF2ZSBhc2VndXLDsyBxdWUgXHUwMDNjYlx1MDAzZWR1cmFudGUgbGFcdTAwM2MvYlx1MDAzZSBnb2xwaXphIGEgXHUwMDNjYnJcdTAwM2VcbkZlcm5hbmRvIHVubyBkZSBsb3MgcnVnYmllcnMgZGV0ZW5pZG9zIGRpam86IOKAnE1lIGxvIHZveSBhJm5ic3A7Li4uIiwKICAgICAgImNhY2hlSWQiOiAiVV9oZ1JrX0ZPSndKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5jbGFyaW4uY29tLy4uLi92aWRlby1jcmltZW4tdmlsbGEtZ2VzZWwtdGVzdGlnby1jbGF2ZS1hc2VndXJvLSBnb2xwaXphLWZlcm5hbmRvLXJ1Z2JpZXJzLWRldGVuaWRvcy1kaWpvLXZveS1sbGV2YXItdHJvZmVvXzNfc1FOTmpzSUUuIC4uLiIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmNsYXJpbi5jb20vLi4uL3ZpZGVvLWNyaW1lbi12aWxsYS1nZXNlbC10ZXN0aWdvLWNsYXZlLWFzZWd1cm8tIGdvbHBpemEtZmVybmFuZG8tcnVnYmllcnMtZGV0ZW5pZG9zLWRpam8tdm95LWxsZXZhci10cm9mZW9fM19zUU5OanNJRS4gLi4uIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMS5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjUnNXakpfa3pZSDFzeHB1amE3LTNkVkhtaDBBUFJaQzRFMW41OGYtd2dRLUF0U0hZMVNPaU9JRTJXZyIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIzMDAiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjE2OCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm9nOmltYWdlIjogImh0dHBzOi8vdGh1bWJzLnZvZGdjLm5ldC8zLTI0NS1zUU5OanNJRS1uR3FObHQxNTgwNDg2MDA1MTc4XzcyMFAuanBnIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5X2xhcmdlX2ltYWdlIiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAidmlkZW8ub3RoZXIiLAogICAgICAgICAgICAiYXV0aG9yIjogIkNsYXLDrW4uY29tIiwKICAgICAgICAgICAgIm9nOnRpdGxlIjogIlZpZGVvOiBDcmltZW4gZW4gVmlsbGEgR2VzZWw6IHVuYSB0ZXN0aWdvIGNsYXZlIGFzZWd1csOzIHF1ZSBkdXJhbnRlIGxhIGdvbHBpemEgYSBGZXJuYW5kbyB1bm8gZGUgbG9zIHJ1Z2JpZXJzIGRldGVuaWRvcyBkaWpvOiBcIk1lIGxvIHZveSBhIGxsZXZhciBkZSB0cm9mZW9cIiIsCiAgICAgICAgICAgICJwcm9kdWN0OnByaWNlOmFtb3VudCI6ICIxMDAiLAogICAgICAgICAgICAicHJvZHVjdDphdmFpbGFiaWxpdHkiOiAiaW4gc3RvY2siLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiRGV0YWxsw7MgbG8gc3VjZWRpZG8gbGEgbm9jaGUgZGVsIGNyaW1lbi4iLAogICAgICAgICAgICAidHdpdHRlcjppbWFnZTphbHQiOiAiQ2xhcsOtbi5jb20iLAogICAgICAgICAgICAiZmI6YXBwX2lkIjogIjQzNzQ5MTk4OTk3MDY4NyIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubyIsCiAgICAgICAgICAgICJwcm9kdWN0OmJyYW5kIjogIkNsYXJpbiIsCiAgICAgICAgICAgICJhZ2VhcGFyc2U6Z2NhLWNhdGVnb3JpZXMiOiAicG9saWNpYWxlcyIsCiAgICAgICAgICAgICJwcm9kdWN0OnByaWNlOmN1cnJlbmN5IjogIkFSUyIsCiAgICAgICAgICAgICJmYjphZG1pbnMiOiAiNjgyNTY5Njc2IiwKICAgICAgICAgICAgInByb2R1Y3Q6cmV0YWlsZXJfaXRlbV9pZCI6ICJzUU5OanNJRSIsCiAgICAgICAgICAgICJvZzp1cmwiOiAiaHR0cHM6Ly93d3cuY2xhcmluLmNvbS9wb2xpY2lhbGVzL3ZpZGVvLWNyaW1lbi12aWxsYS1nZXNlbC10ZXN0aWdvLWNsYXZlLWFzZWd1cm8tZ29scGl6YS1mZXJuYW5kby1ydWdiaWVycy1kZXRlbmlkb3MtZGlqby12b3ktbGxldmFyLXRyb2Zlb18zX3NRTk5qc0lFLmh0bWwiLAogICAgICAgICAgICAicHJvZHVjdDpjb25kaXRpb24iOiAibmV3IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL3RodW1icy52b2RnYy5uZXQvMy0yNDUtc1FOTmpzSUUtbkdxTmx0MTU4MDQ4NjAwNTE3OF83MjBQLmpwZyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJsaXN0aXRlbSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIml0ZW0iOiAiQ2xhcsOtbi5jb20iLAogICAgICAgICAgICAibmFtZSI6ICJDbGFyw61uLmNvbSIsCiAgICAgICAgICAgICJwb3NpdGlvbiI6ICIxIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIml0ZW0iOiAiUG9saWNpYWxlcyIsCiAgICAgICAgICAgICJuYW1lIjogIlBvbGljaWFsZXMiLAogICAgICAgICAgICAicG9zaXRpb24iOiAiMiIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0sCiAgICB7CiAgICAgICJraW5kIjogImN1c3RvbXNlYXJjaCNyZXN1bHQiLAogICAgICAidGl0bGUiOiAiNSB0aXBzIHBhcmEgZGlzZnJ1dGFyIGRlIHVuYSBzZXh1YWxpZGFkIHBsZW5hIGR1cmFudGUgLi4uIC0gTWFyaWUgQ2xhaXJlIiwKICAgICAgImh0bWxUaXRsZSI6ICI1IHRpcHMgcGFyYSBkaXNmcnV0YXIgZGUgdW5hIHNleHVhbGlkYWQgcGxlbmEgZHVyYW50ZSAuLi4gLSBNYXJpZSBDbGFpcmUiLAogICAgICAibGluayI6ICJodHRwczovL21hcmllY2xhaXJlLnBlcmZpbC5jb20vbm90aWNpYXMvbGlmZXN0eWxlL3NleHVhbGlkYWQtbWVub3BhdXNpYS1yZXNlcXVlZGFkLWxpYmlkby1mYWx0YS1kZS1lc3RpbXVsYWNpb24tcXVlLWhhY2VyLnBodG1sIiwKICAgICAgImRpc3BsYXlMaW5rIjogIm1hcmllY2xhaXJlLnBlcmZpbC5jb20iLAogICAgICAic25pcHBldCI6ICI1IHRpcHMgcGFyYSBkaXNmcnV0YXIgZGUgdW5hIHNleHVhbGlkYWQgcGxlbmEgZHVyYW50ZSBsYSBtZW5vcGF1c2lhLiBNdWNoYXMgXG5tdWplcmVzLCB5IHRhbWJpw6luIGxvcyBob21icmVzIGR1cmFudGUgc3UgYW5kcm9wYXVzaWEsIHB1ZWRlbiBzdWZyaXIgY2FtYmlvc1xuwqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiNSB0aXBzIHBhcmEgZGlzZnJ1dGFyIGRlIHVuYSBzZXh1YWxpZGFkIHBsZW5hIFx1MDAzY2JcdTAwM2VkdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgbWVub3BhdXNpYS4gTXVjaGFzIFx1MDAzY2JyXHUwMDNlXG5tdWplcmVzLCB5IHRhbWJpw6luIGxvcyBob21icmVzIGR1cmFudGUgc3UgYW5kcm9wYXVzaWEsIHB1ZWRlbiBzdWZyaXIgY2FtYmlvc1x1MDAzY2JyXHUwMDNlXG4mbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICIxU01uejJOZVd5OEoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vbWFyaWVjbGFpcmUucGVyZmlsLmNvbS8uLi4vc2V4dWFsaWRhZC1tZW5vcGF1c2lhLXJlc2VxdWVkYWQtbGliaWRvLSBmYWx0YS1kZS1lc3RpbXVsYWNpb24tcXVlLWhhY2VyLnBodG1sIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly9tYXJpZWNsYWlyZS5wZXJmaWwuY29tLy4uLi9zZXh1YWxpZGFkLW1lbm9wYXVzaWEtcmVzZXF1ZWRhZC1saWJpZG8tIGZhbHRhLWRlLWVzdGltdWxhY2lvbi1xdWUtaGFjZXIucGh0bWwiLAogICAgICAicGFnZW1hcCI6IHsKICAgICAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4yLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NTR3htQWh5cWZ0UzhiVEFpQTV4cllpc083QnlzeDRmOGh0T2RxeHRhTVpZV09hOWduaW9FMHJaQVEiLAogICAgICAgICAgICAid2lkdGgiOiAiMzAwIiwKICAgICAgICAgICAgImhlaWdodCI6ICIxNjgiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL2ZvdG9zLnBlcmZpbC5jb20vMjAxOS8wOC8yNi90cmltLzExNDAvNjQxL3NleHVhbGlkYWQteS1tZW5vcGF1c2lhLW5vLXNvbi1kb3MtY29uY2VwdG9zLWVuZnJlbnRhZG9zLTc2ODgzNy5qcGciLAogICAgICAgICAgICAib2c6aW1hZ2U6d2lkdGgiOiAiMTE0MCIsCiAgICAgICAgICAgICJhcnRpY2xlOnB1Ymxpc2hlZF90aW1lIjogIjIwMTktMDgtMjZUMTg6MDA6MDAtMDM6MDAiLAogICAgICAgICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAgICAgICAiYW5hbHl0aWNzLXJ1biI6ICIxIiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJNYXJpZSBDbGFpcmUiLAogICAgICAgICAgICAiYW5hbHl0aWNzLXBhdGgtbmFtZSI6ICIvc2l0aW9zL21hcmllY2xhaXJlIiwKICAgICAgICAgICAgIm5ld3NfaGF0IjogIkxpZmVzdHlsZSIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJNdWNoYXMgbXVqZXJlcywgeSB0YW1iacOpbiBsb3MgaG9tYnJlcyBkdXJhbnRlIHN1IGFuZHJvcGF1c2lhLCBwdWVkZW4gc3VmcmlyIGNhbWJpb3MgcmVsYWNpb25hZG9zIGEgc3VzIHJlbGFjaW9uZXMgc2V4dWFsZXMuIFBvciBlc28gZW4gZXN0YSBub3RhIHRlIGNvbnRhbW9zIGRlIHF1w6kgbWFuZXJhIG1lam9yYXIgdHUgaW50aW1pZGFkLsKgIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y3JlYXRvciI6ICJAbWFyaWVjbGFpcmVhcmciLAogICAgICAgICAgICAidHdpdHRlcjppbWFnZTphbHQiOiAiU2V4dWFsaWRhZCB5IG1lbm9wYXVzaWEgbm8gc29uIGRvcyBjb25jZXB0b3MgZW5mcmVudGFkb3MiLAogICAgICAgICAgICAiYXJ0aWNsZTptb2RpZmllZF90aW1lIjogIjIwMTktMDgtMjZUMTY6NDE6MjktMDM6MDAiLAogICAgICAgICAgICAibmV3c19jaGFubmVsIjogImxpZmVzdHlsZSIsCiAgICAgICAgICAgICJhbmFseXRpY3MtdmlldyI6ICJuZXdzLnNob3ciLAogICAgICAgICAgICAiYW5hbHl0aWNzLWNsaWVudC1pZCI6ICJVQS00ODc5MTE4LTEiLAogICAgICAgICAgICAiZmI6cGFnZXMiOiAiMTI3NjE1NzI3MjUyNTYwIiwKICAgICAgICAgICAgImFydGljbGU6dGFnIjogInNleHVhbGlkYWQsIG1lbm9wYXVzaWEsIHJlc2VxdWVkYWQsIGxpYmlkbywgZmFsdGEgZGUgZXN0aW11bGFjaW9uLCBxdWUsIGhhY2VyIiwKICAgICAgICAgICAgImxhdGFtLWFuYWx5dGljcy1wYXRoLW5hbWUiOiAiL2FyL21hcmllY2xhaXJlIiwKICAgICAgICAgICAgImxhdGFtLWFuYWx5dGljcy1jbGllbnQtaWQiOiAiVUEtMTU1MTc3ODk0LTEiLAogICAgICAgICAgICAiYW5hbHl0aWNzLWRhdGEiOiAie1wic2x1Z1wiOlwic2V4dWFsaWRhZC1tZW5vcGF1c2lhLXJlc2VxdWVkYWQtbGliaWRvLWZhbHRhLWRlLWVzdGltdWxhY2lvbi1xdWUtaGFjZXJcIixcInNlY3Rpb25cIjpcInNpdGlvcy5tYXJpZWNsYWlyZS5ub3RhXCIsXCJhdXRob3JcIjpcIlN0ZXBoYW5pZSBQZXVzY292aWNoXCIsXCJkYXRlXCI6XCJBdWd1c3QsIDI2IDIwMTkgMTg6MDA6MDAgLTAzMDBcIixcImlkXCI6NDM1MDkzfSIsCiAgICAgICAgICAgICJvZzpsb2NhbGUiOiAiZXMiLAogICAgICAgICAgICAidGhlbWUtY29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICJhZHMtbG9hZCI6ICIxIiwKICAgICAgICAgICAgImFkcy1jbGllbnQiOiAiMjg0NzYiLAogICAgICAgICAgICAib2c6aW1hZ2U6dHlwZSI6ICJpbWFnZS9qcGVnIiwKICAgICAgICAgICAgIm1zYXBwbGljYXRpb24tdGlsZWltYWdlIjogIi9tcy1pY29uLTE0NHgxNDQucG5nIiwKICAgICAgICAgICAgImVkaXRvcmlhIjogIk1hcmllIENsYWlyZSIsCiAgICAgICAgICAgICJ0aXRsZSI6ICJNYXJpZSBDbGFpcmUgfCA1IHRpcHMgcGFyYSBkaXNmcnV0YXIgZGUgdW5hIHNleHVhbGlkYWQgcGxlbmEgZHVyYW50ZSBsYSBtZW5vcGF1c2lhIiwKICAgICAgICAgICAgInR3aXR0ZXI6aW1hZ2UiOiAiaHR0cHM6Ly9mb3Rvcy5wZXJmaWwuY29tLzIwMTkvMDgvMjYvdHJpbS8xMTQwLzY0MS9zZXh1YWxpZGFkLXktbWVub3BhdXNpYS1uby1zb24tZG9zLWNvbmNlcHRvcy1lbmZyZW50YWRvcy03Njg4MzcuanBnIiwKICAgICAgICAgICAgImNvbXNjb3JlLWNsaWVudC1pZCI6ICI2OTA2NDAxIiwKICAgICAgICAgICAgInR3aXR0ZXI6c2l0ZSI6ICJAbWFyaWVjbGFpcmVhcmciLAogICAgICAgICAgICAibmV3c19rZXl3b3JkcyI6ICJzZXh1YWxpZGFkLCBtZW5vcGF1c2lhLCByZXNlcXVlZGFkLCBsaWJpZG8sIGZhbHRhIGRlIGVzdGltdWxhY2lvbiwgcXVlLCBoYWNlciIsCiAgICAgICAgICAgICJmYjphZG1pbnMiOiAiMTAwMDAwNzk2NjcyNDU2LDE0ODMxNTEwNDYsMTQxMTMxNzczNSIsCiAgICAgICAgICAgICJkdG5vdGljaWEiOiAiMjAxOS0wOC0yNlQxODowMDowMC0wMzowMCIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMTktMDgtMjZUMTg6MDA6MDAtMDM6MDAiLAogICAgICAgICAgICAibXNhcHBsaWNhdGlvbi10aWxlY29sb3IiOiAiI2ZmZmZmZiIsCiAgICAgICAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAgICAgICAiYXJ0aWNsZTpzZWN0aW9uIjogImxpZmVzdHlsZSIsCiAgICAgICAgICAgICJ0d2l0dGVyOnRpdGxlIjogIjUgdGlwcyBwYXJhIGRpc2ZydXRhciBkZSB1bmEgc2V4dWFsaWRhZCBwbGVuYSBkdXJhbnRlIGxhIG1lbm9wYXVzaWEiLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiNSB0aXBzIHBhcmEgZGlzZnJ1dGFyIGRlIHVuYSBzZXh1YWxpZGFkIHBsZW5hIGR1cmFudGUgbGEgbWVub3BhdXNpYSIsCiAgICAgICAgICAgICJvZzppbWFnZTpoZWlnaHQiOiAiNjQxIiwKICAgICAgICAgICAgImhlZGxpbmUiOiAiTXVjaGFzIG11amVyZXMsIHkgdGFtYmnDqW4gbG9zIGhvbWJyZXMgZHVyYW50ZSBzdSBhbmRyb3BhdXNpYSwgcHVlZGVuIHN1ZnJpciBjYW1iaW9zIHJlbGFjaW9uYWRvcyBhIHN1cyByZWxhY2lvbmVzIHNleHVhbGVzLiBQb3IgZXNvIGVuIGVzdGEgbm90YSB0ZSBjb250YW1vcyBkZSBxdcOpIG1hbmVyYSBtZWpvcmFyIHR1IGludGltaWRhZC7CoCIsCiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9tYXJpZWNsYWlyZS5wZXJmaWwuY29tL25vdGljaWFzL2xpZmVzdHlsZS9zZXh1YWxpZGFkLW1lbm9wYXVzaWEtcmVzZXF1ZWRhZC1saWJpZG8tZmFsdGEtZGUtZXN0aW11bGFjaW9uLXF1ZS1oYWNlci5waHRtbCIsCiAgICAgICAgICAgICJmYjphcHBfaWQiOiAiMTIwNjk0MTg1OTQ3NTA0OCIsCiAgICAgICAgICAgICJsYXN0LXJlbmRlciI6ICIxNy0wMS0xNSAxNTo1MjoxMSIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSwgc2hyaW5rLXRvLWZpdD1ubyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIk11Y2hhcyBtdWplcmVzLCB5IHRhbWJpw6luIGxvcyBob21icmVzIGR1cmFudGUgc3UgYW5kcm9wYXVzaWEsIHB1ZWRlbiBzdWZyaXIgY2FtYmlvcyByZWxhY2lvbmFkb3MgYSBzdXMgcmVsYWNpb25lcyBzZXh1YWxlcy4gUG9yIGVzbyBlbiBlc3RhIG5vdGEgdGUgY29udGFtb3MgZGUgcXXDqSBtYW5lcmEgbWVqb3JhciB0dSBpbnRpbWlkYWQuwqAiLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vbWFyaWVjbGFpcmUucGVyZmlsLmNvbS9ub3RpY2lhcy9saWZlc3R5bGUvc2V4dWFsaWRhZC1tZW5vcGF1c2lhLXJlc2VxdWVkYWQtbGliaWRvLWZhbHRhLWRlLWVzdGltdWxhY2lvbi1xdWUtaGFjZXIucGh0bWwiLAogICAgICAgICAgICAiYWRzLXNlYyI6ICJhcnRpY3VsbyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9mb3Rvcy5wZXJmaWwuY29tLzIwMTkvMDgvMjYvdHJpbS8xMTQwLzY0MS9zZXh1YWxpZGFkLXktbWVub3BhdXNpYS1uby1zb24tZG9zLWNvbmNlcHRvcy1lbmZyZW50YWRvcy03Njg4MzcuanBnIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgfSwKICAgIHsKICAgICAgImtpbmQiOiAiY3VzdG9tc2VhcmNoI3Jlc3VsdCIsCiAgICAgICJ0aXRsZSI6ICJMYSBtYWRyZSBkZSBMYWR5IEdhZ2EgY29uZmllc2EgcXVlIG5vIHN1cG8gYXl1ZGFyIGEgc3UgaGlqYSAuLi4iLAogICAgICAiaHRtbFRpdGxlIjogIkxhIG1hZHJlIGRlIExhZHkgR2FnYSBjb25maWVzYSBxdWUgbm8gc3VwbyBheXVkYXIgYSBzdSBoaWphIC4uLiIsCiAgICAgICJsaW5rIjogImh0dHBzOi8vd3d3LmVvbmxpbmUuY29tL2FyL3ZpZGVvcy8zMDI2NTgvbGEtbWFkcmUtZGUtbGFkeS1nYWdhLWNvbmZpZXNhLXF1ZS1uby1zdXBvLWF5dWRhci1hLXN1LWhpamEtZHVyYW50ZS1sYS1kZXByZXNpb24iLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3LmVvbmxpbmUuY29tIiwKICAgICAgInNuaXBwZXQiOiAiSGFjZSAzIGTDrWFzIC4uLiBMYSBtYWRyZSBkZSBMYWR5IEdhZ2EgY29uZmllc2EgcXVlIG5vIHN1cG8gYXl1ZGFyIGEgc3UgaGlqYSBkdXJhbnRlIGxhIFxuZGVwcmVzacOzbi4gTGEgbWFkcmUgZGUgbGEgZXN0cmVsbGEgc2Ugc2luY2Vyw7Mgc29icmUgbG9zIG1vbWVudG9zwqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiSGFjZSAzIGTDrWFzIFx1MDAzY2JcdTAwM2UuLi5cdTAwM2MvYlx1MDAzZSBMYSBtYWRyZSBkZSBMYWR5IEdhZ2EgY29uZmllc2EgcXVlIG5vIHN1cG8gYXl1ZGFyIGEgc3UgaGlqYSBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIFx1MDAzY2JyXHUwMDNlXG5kZXByZXNpw7NuLiBMYSBtYWRyZSBkZSBsYSBlc3RyZWxsYSBzZSBzaW5jZXLDsyBzb2JyZSBsb3MgbW9tZW50b3MmbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICJfWjhSSi12ZzJyc0oiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmVvbmxpbmUuY29tLy4uLi9sYS1tYWRyZS1kZS1sYWR5LWdhZ2EtY29uZmllc2EtcXVlLW5vLXN1cG8tIGF5dWRhci1hLXN1LWhpamEtZHVyYW50ZS1sYS1kZXByZXNpb24iLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5lb25saW5lLmNvbS8uLi4vbGEtbWFkcmUtZGUtbGFkeS1nYWdhLWNvbmZpZXNhLXF1ZS1uby1zdXBvLSBheXVkYXItYS1zdS1oaWphLVx1MDAzY2JcdTAwM2VkdXJhbnRlLWxhXHUwMDNjL2JcdTAwM2UtZGVwcmVzaW9uIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMi5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjU1Q5QWpNRWE4bFR0cmNqYUoweWh4YUE0aEptaDBORzBQaUhZU19POVdhZFItci01Q0l1R3lfOURBIiwKICAgICAgICAgICAgIndpZHRoIjogIjMwMCIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiMTY4IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly9lb25saW5ldGh1bWJzLWEuYWthbWFpaGQubmV0L2ltYWdlcy8yMTEvODI3L0xhZHlHYWdhXzMwMjY1OF8xMjgweDcyMF8xNjkxMzc3MjE5NjkyLmpwZyIsCiAgICAgICAgICAgICJzYWlsdGhydS5lZGl0aW9uIjogImFyIiwKICAgICAgICAgICAgInR3aXR0ZXI6Y2FyZCI6ICJzdW1tYXJ5X2xhcmdlX2ltYWdlIiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJFISBOZXdzIiwKICAgICAgICAgICAgInNhaWx0aHJ1LnRhZ3MiOiAibGFkeV9nYWdhLHRvcF9uZXdzLHRvcF9zdG9yaWVzIiwKICAgICAgICAgICAgInR3aXR0ZXI6dXJsIjogImh0dHBzOi8vd3d3LmVvbmxpbmUuY29tL2FyL3ZpZGVvcy8zMDI2NTgvbGEtbWFkcmUtZGUtbGFkeS1nYWdhLWNvbmZpZXNhLXF1ZS1uby1zdXBvLWF5dWRhci1hLXN1LWhpamEtZHVyYW50ZS1sYS1kZXByZXNpb24iLAogICAgICAgICAgICAic2FpbHRocnUuY29udGVudHR5cGUiOiAidmlkZW9zIiwKICAgICAgICAgICAgInNhaWx0aHJ1LmVkLmNpZCI6ICJhcl8zMDI2NTgiLAogICAgICAgICAgICAidGl0bGUiOiAiTGEgbWFkcmUgZGUgTGFkeSBHYWdhIGNvbmZpZXNhIHF1ZSBubyBzdXBvIGF5dWRhciBhIHN1IGhpamEgZHVyYW50ZSBsYSBkZXByZXNpw7NuIiwKICAgICAgICAgICAgImJvZHkiOiAiTGEgbWFkcmUgZGUgbGEgZXN0cmVsbGEgc2Ugc2luY2Vyw7Mgc29icmUgbG9zIG1vbWVudG9zIG3DoXMgZHVyb3MgZGUgc3UgZmFtaWxpYS4iLAogICAgICAgICAgICAidHA6cHJlZmVycmVkZm9ybWF0cyI6ICJNUEVHNCxNM1UiLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiTGEgbWFkcmUgZGUgbGEgZXN0cmVsbGEgc2Ugc2luY2Vyw7Mgc29icmUgbG9zIG1vbWVudG9zIG3DoXMgZHVyb3MgZGUgc3UgZmFtaWxpYS4iLAogICAgICAgICAgICAidHdpdHRlcjppbWFnZSI6ICJodHRwczovL2ltYWdlcy5lb25saW5lLmNvbS9yZXNpemUvNjAwLzMwMC9lb25saW5ldGh1bWJzLWEuYWthbWFpaGQubmV0L2ltYWdlcy8yMTEvODI3L0xhZHlHYWdhXzMwMjY1OF8xMjgweDcyMF8xNjkxMzc3MjE5NjkyLmpwZyIsCiAgICAgICAgICAgICJ0d2l0dGVyOnNpdGUiOiAiaHR0cHM6Ly90d2l0dGVyLmNvbS9lb25saW5lIiwKICAgICAgICAgICAgInNhaWx0aHJ1LnRpdGxlIjogIkxhIG1hZHJlIGRlIExhZHkgR2FnYSBjb25maWVzYSBxdWUgbm8gc3VwbyBheXVkYXIgYSBzdSBoaWphIGR1cmFudGUgbGEgZGVwcmVzacOzbiIsCiAgICAgICAgICAgICJvZzp2aWRlbzp0eXBlIjogInZpZGVvL21wNCIsCiAgICAgICAgICAgICJmYjphZG1pbnMiOiAiMTAxMDE2NDkiLAogICAgICAgICAgICAicHVibGljYXRpb25fZGF0ZSI6ICIyMDIwLTAxLTMwVDEzOjEzOjA4IFBTVCIsCiAgICAgICAgICAgICJ0YWJvb2xhLnRpdGxlIjogIkxhIG1hZHJlIGRlIExhZHkgR2FnYSBjb25maWVzYSBxdWUgbm8gc3VwbyBheXVkYXIgYSBzdSBoaWphIGR1cmFudGUgbGEgZGVwcmVzacOzbiIsCiAgICAgICAgICAgICJvZzp2aWRlbzpoZWlnaHQiOiAiMjAwIiwKICAgICAgICAgICAgInRwOnByZWZlcnJlZHJ1bnRpbWVzIjogInVuaXZlcnNhbCxodG1sNSxmbGFzaCIsCiAgICAgICAgICAgICJvZzp2aWRlbzp1cmwiOiAiaHR0cHM6Ly9saW5rLnRoZXBsYXRmb3JtLmNvbS9zL0JkSEpEQy9tZWRpYS9tYUlLMF9KZGxOM0siLAogICAgICAgICAgICAidGFnIjogIkxhZHkgR2FnYSIsCiAgICAgICAgICAgICJpbWFnZSI6ICJodHRwczovL2VvbmxpbmV0aHVtYnMtYS5ha2FtYWloZC5uZXQvaW1hZ2VzLzIxMS84MjcvTGFkeUdhZ2FfMzAyNjU4XzEyODB4NzIwXzE2OTEzNzcyMTk2OTIuanBnIiwKICAgICAgICAgICAgInNhaWx0aHJ1LmRhdGUiOiAiMjAyMC0wMS0zMCAxMzoxMzowOCIsCiAgICAgICAgICAgICJvZzp0eXBlIjogInZpZGVvLm90aGVyIiwKICAgICAgICAgICAgInR3aXR0ZXI6dGl0bGUiOiAiTGEgbWFkcmUgZGUgTGFkeSBHYWdhIGNvbmZpZXNhIHF1ZSBubyBzdXBvIGF5dWRhciBhIHN1IGhpamEgZHVyYW50ZSBsYSBkZXByZXNpw7NuIiwKICAgICAgICAgICAgIm1zdmFsaWRhdGUuMDEiOiAiNTY0Qjk4NkNFM0NFQ0NBRTg0Nzc5MTkxQkVDNkI3NTUiLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiTGEgbWFkcmUgZGUgTGFkeSBHYWdhIGNvbmZpZXNhIHF1ZSBubyBzdXBvIGF5dWRhciBhIHN1IGhpamEgZHVyYW50ZSBsYSBkZXByZXNpw7NuIiwKICAgICAgICAgICAgImdvb2dsZWJvdC1uZXdzIjogImluZGV4LGZvbGxvdyIsCiAgICAgICAgICAgICJzYWlsdGhydS5jaWQiOiAiMzAyNjU4IiwKICAgICAgICAgICAgIm9nOnZpZGVvOndpZHRoIjogIjIwMCIsCiAgICAgICAgICAgICJmYjpwYWdlcyI6ICI4OTAzMzM3MDczNSIsCiAgICAgICAgICAgICJmYjphcHBfaWQiOiAiMTk1NjYyNTI4NjA0IiwKICAgICAgICAgICAgInR3aXR0ZXI6ZGVzY3JpcHRpb24iOiAiTGEgbWFkcmUgZGUgbGEgZXN0cmVsbGEgc2Ugc2luY2Vyw7Mgc29icmUgbG9zIG1vbWVudG9zIG3DoXMgZHVyb3MgZGUgc3UgZmFtaWxpYS4iLAogICAgICAgICAgICAib2c6bG9jYWxlIjogImVzX0FSIiwKICAgICAgICAgICAgIm9nOnVybCI6ICJodHRwczovL3d3dy5lb25saW5lLmNvbS9hci92aWRlb3MvMzAyNjU4L2xhLW1hZHJlLWRlLWxhZHktZ2FnYS1jb25maWVzYS1xdWUtbm8tc3Vwby1heXVkYXItYS1zdS1oaWphLWR1cmFudGUtbGEtZGVwcmVzaW9uIiwKICAgICAgICAgICAgImNhdGVnb3J5IjogIlZpZGVvcyIsCiAgICAgICAgICAgICJzYWlsdGhydS5pbWFnZS5mdWxsIjogImh0dHBzOi8vaW1hZ2VzLmVvbmxpbmUuY29tL3Jlc2l6ZS8zMDAvMzAwL2VvbmxpbmV0aHVtYnMtYS5ha2FtYWloZC5uZXQvaW1hZ2VzLzIxMS84MjcvTGFkeUdhZ2FfMzAyNjU4XzU2MHgzMTVfMTY5MTM3NzIxOTY5OC5qcGciCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiY3NlX2ltYWdlIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW9ubGluZXRodW1icy1hLmFrYW1haWhkLm5ldC9pbWFnZXMvMjExLzgyNy9MYWR5R2FnYV8zMDI2NThfMTI4MHg3MjBfMTY5MTM3NzIxOTY5Mi5qcGciCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIlJlY29tZW5kYWNpb25lcyBwYXJhIGVsIG1hbmVqbyBkZWwgc2hvY2sgc8OpcHRpY28gZW4gbmnDsW9zIC4uLiIsCiAgICAgICJodG1sVGl0bGUiOiAiUmVjb21lbmRhY2lvbmVzIHBhcmEgZWwgbWFuZWpvIGRlbCBzaG9jayBzw6lwdGljbyBlbiBuacOxb3MgLi4uIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuc2FwLm9yZy5hci9kb2NzL3B1YmxpY2FjaW9uZXMvYXJjaGl2b3NhcmcvMjAxOS92MTE3bjFhMTQucGRmIiwKICAgICAgImRpc3BsYXlMaW5rIjogInd3dy5zYXAub3JnLmFyIiwKICAgICAgInNuaXBwZXQiOiAic2hvY2sgc8OpcHRpY28gZW4gbmnDsW9zIGR1cmFudGUgbGEgcHJpbWVyYSBob3JhIChzZWd1bmRhIHBhcnRlKS4gQXJjaCBBcmdlbnQgXG5QZWRpYXRyIDIwMTk7MTE3KDEpOmUyNC1lMzMuIEdMT1NBUklPLiBBVnA6IGFjY2Vzb3MgdmFzY3VsYXJlcyBwZXJpZsOpcmljb3MuIiwKICAgICAgImh0bWxTbmlwcGV0IjogInNob2NrIHPDqXB0aWNvIGVuIG5pw7FvcyBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIHByaW1lcmEgaG9yYSAoc2VndW5kYSBwYXJ0ZSkuIEFyY2ggQXJnZW50IFx1MDAzY2JyXHUwMDNlXG5QZWRpYXRyIDIwMTk7MTE3KDEpOmUyNC1lMzMuIEdMT1NBUklPLiBBVnA6IGFjY2Vzb3MgdmFzY3VsYXJlcyBwZXJpZsOpcmljb3MuIiwKICAgICAgImNhY2hlSWQiOiAiYVJneG5lMUMzWUlKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5zYXAub3JnLmFyL2RvY3MvcHVibGljYWNpb25lcy9hcmNoaXZvc2FyZy8uLi4vdjExN24xYTE0LnBkZiIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LnNhcC5vcmcuYXIvZG9jcy9wdWJsaWNhY2lvbmVzL2FyY2hpdm9zYXJnLy4uLi92MTE3bjFhMTQucGRmIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMS5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjUmViTm1fTHEtVGJobERmRW5jUTdoanUxNHlZSFREcEppb0FtY0pJcC1ZY0oxdXluMGRHUkZZX3VXZyIsCiAgICAgICAgICAgICJ3aWR0aCI6ICIxOTgiLAogICAgICAgICAgICAiaGVpZ2h0IjogIjI1NSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm1vZGRhdGUiOiAiRDoyMDE4MTIwNjE0MzgwNC0wMycwMCciLAogICAgICAgICAgICAiY3JlYXRpb25kYXRlIjogIkQ6MjAxODEyMDYxNDM4MDMtMDMnMDAnIiwKICAgICAgICAgICAgImNyZWF0b3IiOiAiQWRvYmUgSW5EZXNpZ24gQ0MgMjAxNyAoTWFjaW50b3NoKSIsCiAgICAgICAgICAgICJwcm9kdWNlciI6ICJBZG9iZSBQREYgTGlicmFyeSAxNS4wIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImNzZV9pbWFnZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJ4LXJhdy1pbWFnZTovLy84MjlmYzA4NWUwYjYyMzg5MjAxN2M4MGQ2OWFiMzdiZTEyYTM2YTZmOGViNDc5ZGU1N2Y1NWU0MGMyMWJlOTEwIgogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfSwKICAgICAgIm1pbWUiOiAiYXBwbGljYXRpb24vcGRmIiwKICAgICAgImZpbGVGb3JtYXQiOiAiUERGL0Fkb2JlIEFjcm9iYXQiCiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIk1hbnRlbmVyIGxhIG9icmEgc29jaWFsIGR1cmFudGUgbGEgcHJlc3RhY2nDs24gcG9yIGRlc2VtcGxlbyAuLi4iLAogICAgICAiaHRtbFRpdGxlIjogIk1hbnRlbmVyIGxhIG9icmEgc29jaWFsIGR1cmFudGUgbGEgcHJlc3RhY2nDs24gcG9yIGRlc2VtcGxlbyAuLi4iLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5hcmdlbnRpbmEuZ29iLmFyL21hbnRlbmVyLWxhLW9icmEtc29jaWFsLWR1cmFudGUtbGEtcHJlc3RhY2lvbi1wb3ItZGVzZW1wbGVvIiwKICAgICAgImRpc3BsYXlMaW5rIjogInd3dy5hcmdlbnRpbmEuZ29iLmFyIiwKICAgICAgInNuaXBwZXQiOiAiTWFudGVuZXIgbGEgb2JyYSBzb2NpYWwgZHVyYW50ZSBsYSBwcmVzdGFjacOzbiBwb3IgZGVzZW1wbGVvLiBTaSBzb3MgYmVuZWZpY2lhcmlvIFxuZGVsIHNlZ3VybyBkZSBkZXNlbXBsZW8sIHZvcyB5IHR1IGdydXBvIGZhbWlsaWFyIHByaW1hcmlvIHRpZW5lbiBkZXJlY2hvIGHCoC4uLiIsCiAgICAgICJodG1sU25pcHBldCI6ICJNYW50ZW5lciBsYSBvYnJhIHNvY2lhbCBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIHByZXN0YWNpw7NuIHBvciBkZXNlbXBsZW8uIFNpIHNvcyBiZW5lZmljaWFyaW8gXHUwMDNjYnJcdTAwM2VcbmRlbCBzZWd1cm8gZGUgZGVzZW1wbGVvLCB2b3MgeSB0dSBncnVwbyBmYW1pbGlhciBwcmltYXJpbyB0aWVuZW4gZGVyZWNobyBhJm5ic3A7Li4uIiwKICAgICAgImNhY2hlSWQiOiAiMjd6MHFCU09nbXdKIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICJodHRwczovL3d3dy5hcmdlbnRpbmEuZ29iLmFyL21hbnRlbmVyLWxhLW9icmEtc29jaWFsLWR1cmFudGUtbGEtcHJlc3RhY2lvbi0gcG9yLWRlc2VtcGxlbyIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmFyZ2VudGluYS5nb2IuYXIvbWFudGVuZXItbGEtb2JyYS1zb2NpYWwtXHUwMDNjYlx1MDAzZWR1cmFudGUtbGFcdTAwM2MvYlx1MDAzZS1wcmVzdGFjaW9uLSBwb3ItZGVzZW1wbGVvIiwKICAgICAgInBhZ2VtYXAiOiB7CiAgICAgICAgImNzZV90aHVtYm5haWwiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9lbmNyeXB0ZWQtdGJuMy5nc3RhdGljLmNvbS9pbWFnZXM/cT10Ym46QU5kOUdjVHh0cl9mVE1id3JsMTkyN1h5VkFiRFdneW5uamRwZm9JV29iVnd0LVpINWtLMmZlbUF2djUtLWpNIiwKICAgICAgICAgICAgIndpZHRoIjogIjMxMSIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiMTYyIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm1ldGF0YWdzIjogWwogICAgICAgICAgewogICAgICAgICAgICAib2c6aW1hZ2UiOiAiaHR0cHM6Ly93d3cuYXJnZW50aW5hLmdvYi5hci9zaXRlcy9kZWZhdWx0L2ZpbGVzL2FyZ2VudGluYS1mYi5wbmciLAogICAgICAgICAgICAidGhlbWUtY29sb3IiOiAiIzAwNzJiOCIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNhcmQiOiAic3VtbWFyeSIsCiAgICAgICAgICAgICJ0d2l0dGVyOnRpdGxlIjogIk1hbnRlbmVyIGxhIG9icmEgc29jaWFsIGR1cmFudGUgbGEgcHJlc3RhY2nDs24gcG9yIGRlc2VtcGxlbyIsCiAgICAgICAgICAgICJhcnRpY2xlOnB1Ymxpc2hlZF90aW1lIjogIjIwMTgtMDMtMTZUMTE6NTE6MjctMDM6MDAiLAogICAgICAgICAgICAiZ3RtLXBhZHJlIjogIkFOU0VTIiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJBcmdlbnRpbmEuZ29iLmFyIiwKICAgICAgICAgICAgInR3aXR0ZXI6dXJsIjogImh0dHBzOi8vd3d3LmFyZ2VudGluYS5nb2IuYXIvbWFudGVuZXItbGEtb2JyYS1zb2NpYWwtZHVyYW50ZS1sYS1wcmVzdGFjaW9uLXBvci1kZXNlbXBsZW8iLAogICAgICAgICAgICAib2c6dGl0bGUiOiAiTWFudGVuZXIgbGEgb2JyYSBzb2NpYWwgZHVyYW50ZSBsYSBwcmVzdGFjacOzbiBwb3IgZGVzZW1wbGVvIiwKICAgICAgICAgICAgIm9nOnVwZGF0ZWRfdGltZSI6ICIyMDE5LTA3LTAzVDE4OjIwOjM3LTAzOjAwIiwKICAgICAgICAgICAgIm1zYXBwbGljYXRpb24tbmF2YnV0dG9uLWNvbG9yIjogIiMwMDcyYjgiLAogICAgICAgICAgICAib2c6ZGVzY3JpcHRpb24iOiAiU2kgc29zIGJlbmVmaWNpYXJpbyBkZWwgc2VndXJvIGRlIGRlc2VtcGxlbywgdm9zIHkgdHUgZ3J1cG8gZmFtaWxpYXIgcHJpbWFyaW8gdGllbmVuIGRlcmVjaG8gYSBjb250aW51YXIgcmVjaWJpZW5kbyBjb2JlcnR1cmEgbcOpZGljYSBtaWVudHJhcyBkdXJhIGxhIHBlcmNlcGNpw7NuIGRlIGxhIHByZXN0YWNpw7NuLiIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHBzOi8vd3d3LmFyZ2VudGluYS5nb2IuYXIvc2l0ZXMvZGVmYXVsdC9maWxlcy9hcmdlbnRpbmEtZmIucG5nIiwKICAgICAgICAgICAgImd0bS1pZCI6ICIzOTEyMyIsCiAgICAgICAgICAgICJhcHBsZS1tb2JpbGUtd2ViLWFwcC1zdGF0dXMtYmFyLXN0eWxlIjogIiMwMDcyYjgiLAogICAgICAgICAgICAiYXJ0aWNsZTptb2RpZmllZF90aW1lIjogIjIwMTktMDctMDNUMTg6MjA6MzctMDM6MDAiLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIsCiAgICAgICAgICAgICJndG0tcGFkcmVzIjogIjEzMTc3MyIsCiAgICAgICAgICAgICJndG0tcmFpeiI6ICJBTlNFUyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmRlc2NyaXB0aW9uIjogIlNpIHNvcyBiZW5lZmljaWFyaW8gZGVsIHNlZ3VybyBkZSBkZXNlbXBsZW8sIHZvcyB5IHR1IGdydXBvIGZhbWlsaWFyIHByaW1hcmlvIHRpZW5lbiBkZXJlY2hvIGEgY29udGludWFyIHJlY2liaWVuZG8gY29iZXJ0dXJhIG3DqWRpY2EgbWllbnRyYXMgZHVyYSBsYSBwZXJjZXBjacOzbiBkZSBsYSBwcmVzdGFjacOzbi4iLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vd3d3LmFyZ2VudGluYS5nb2IuYXIvbWFudGVuZXItbGEtb2JyYS1zb2NpYWwtZHVyYW50ZS1sYS1wcmVzdGFjaW9uLXBvci1kZXNlbXBsZW8iLAogICAgICAgICAgICAiZ3RtLXRpcG8iOiAidHJhbWl0ZSIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly93d3cuYXJnZW50aW5hLmdvYi5hci9zaXRlcy9kZWZhdWx0L2ZpbGVzL2FyZ2VudGluYS1mYi5wbmciCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIkRlbGljdWVudGVzIGFzYWx0YXJvbiB1bmEgY2FzYSBkZSBmYW1pbGlhIGR1cmFudGUgbGEgbWFkcnVnYWRhIC4uLiIsCiAgICAgICJodG1sVGl0bGUiOiAiRGVsaWN1ZW50ZXMgYXNhbHRhcm9uIHVuYSBjYXNhIGRlIGZhbWlsaWEgZHVyYW50ZSBsYSBtYWRydWdhZGEgLi4uIiwKICAgICAgImxpbmsiOiAiaHR0cDovLzAzNDQyLmNvbS5hci8yMDIwLzAxL2RlbGljdWVudGVzLWFzYWx0YXJvbi11bmEtY2FzYS1kZS1mYW1pbGlhLWR1cmFudGUtbGEtbWFkcnVnYWRhLyIsCiAgICAgICJkaXNwbGF5TGluayI6ICIwMzQ0Mi5jb20uYXIiLAogICAgICAic25pcHBldCI6ICJEZWxpY3VlbnRlcyBhc2FsdGFyb24gdW5hIGNhc2EgZGUgZmFtaWxpYSBkdXJhbnRlIGxhIG1hZHJ1Z2FkYS4gMzEvMDEvMjAyMC4gXG5GYWNlYm9vayDCtyBXaGF0c0FwcCDCtyBUd2l0dGVywqAuLi4iLAogICAgICAiaHRtbFNuaXBwZXQiOiAiRGVsaWN1ZW50ZXMgYXNhbHRhcm9uIHVuYSBjYXNhIGRlIGZhbWlsaWEgXHUwMDNjYlx1MDAzZWR1cmFudGUgbGFcdTAwM2MvYlx1MDAzZSBtYWRydWdhZGEuIDMxLzAxLzIwMjAuIFx1MDAzY2JyXHUwMDNlXG5GYWNlYm9vayAmbWlkZG90OyBXaGF0c0FwcCAmbWlkZG90OyBUd2l0dGVyJm5ic3A7Li4uIiwKICAgICAgImNhY2hlSWQiOiAiNWQ0QmlSSm9abE1KIiwKICAgICAgImZvcm1hdHRlZFVybCI6ICIwMzQ0Mi5jb20uYXIvLi4uL2RlbGljdWVudGVzLWFzYWx0YXJvbi11bmEtY2FzYS1kZS1mYW1pbGlhLWR1cmFudGUtbGEtIG1hZHJ1Z2FkYS8iLAogICAgICAiaHRtbEZvcm1hdHRlZFVybCI6ICIwMzQ0Mi5jb20uYXIvLi4uL2RlbGljdWVudGVzLWFzYWx0YXJvbi11bmEtY2FzYS1kZS1mYW1pbGlhLVx1MDAzY2JcdTAwM2VkdXJhbnRlLWxhXHUwMDNjL2JcdTAwM2UtIG1hZHJ1Z2FkYS8iLAogICAgICAicGFnZW1hcCI6IHsKICAgICAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4wLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NTcmxrTDM5R2U3VEZyYkUybkxrUExqaU5fT3VhVXJoNXR3TTg4NzRHNkFIQnMxcEd5d2hXeU5EMHpJIiwKICAgICAgICAgICAgIndpZHRoIjogIjI3OSIsCiAgICAgICAgICAgICJoZWlnaHQiOiAiMTgxIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImltYWdlb2JqZWN0IjogWwogICAgICAgICAgewogICAgICAgICAgICAidXJsIjogImh0dHA6Ly8wMzQ0Mi5jb20uYXIvbm90aWNpYXMvd3AtY29udGVudC91cGxvYWRzLzIwMTkvMDgvTE9HTy5wbmciCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAid2lkdGgiOiAiNTUwIiwKICAgICAgICAgICAgInVybCI6ICJodHRwOi8vMDM0NDIuY29tLmFyL25vdGljaWFzL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE4LzA0L1BhdHJ1bGwuanBnIiwKICAgICAgICAgICAgImhlaWdodCI6ICIzNTciCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGVyc29uIjogWwogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJwYWJsbyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJvcmdhbml6YXRpb24iOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIjAzNDQyLmNvbS5hciIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJtZXRhdGFncyI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm9nOmltYWdlIjogImh0dHA6Ly8wMzQ0Mi5jb20uYXIvbm90aWNpYXMvd3AtY29udGVudC91cGxvYWRzLzIwMTgvMDQvUGF0cnVsbC5qcGciLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cDovLzAzNDQyLmNvbS5hci9ub3RpY2lhcy93cC1jb250ZW50L3VwbG9hZHMvMjAxOC8wNC9QYXRydWxsLmpwZyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJoYXRvbWZlZWQiOiBbCiAgICAgICAgICB7fQogICAgICAgIF0sCiAgICAgICAgImFydGljbGUiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJkYXRlbW9kaWZpZWQiOiAiMjAyMC0wMS0zMVQwODo0Njo1MS0wMzowMCIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJEZWxpY3VlbnRlcyBhc2FsdGFyb24gdW5hIGNhc2EgZGUgZmFtaWxpYSBkdXJhbnRlIGxhIG1hZHJ1Z2FkYSIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAtMDEtMzFUMDg6NDY6NTErMDA6MDAiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIlZhbmRhbGl6YXJvbiBsb3MgYmHDsW9zIGRlIGxhIHRlcm1pbmFyIGR1cmFudGUgbGEgbWFkcnVnYWRhIC4uLiIsCiAgICAgICJodG1sVGl0bGUiOiAiVmFuZGFsaXphcm9uIGxvcyBiYcOxb3MgZGUgbGEgdGVybWluYXIgZHVyYW50ZSBsYSBtYWRydWdhZGEgLi4uIiwKICAgICAgImxpbmsiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL2Vubm90aWNpYXMvVmFuZGFsaXphcm9uLWxvcy1iYW5vcy1kZS1sYS10ZXJtaW5hci1kdXJhbnRlLWxhLW1hZHJ1Z2FkYS0yMDIwMDEzMS0wMDAyLmh0bWwiLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3LmNhc2lsZGFwbHVzLmNvbSIsCiAgICAgICJzbmlwcGV0IjogIkhhY2UgMiBkw61hcyAuLi4gRHVyYW50ZSBsYSBtYcOxYW5hIGRlIGVzdGUgdmllcm5lcyB1bm8gZGUgbG9zIGJhw7FvcyBkZSBsYSB0ZXJtaW5hbCBkZSDDs21uaWJ1cyBcbmRlIENhc2lsZGEgYW1hbmVjacOzIGNvbiBsYSBydXB0dXJhIGRlIHVubyBkZSBzdXMgZXNwZWpvcyzCoC4uLiIsCiAgICAgICJodG1sU25pcHBldCI6ICJIYWNlIDIgZMOtYXMgXHUwMDNjYlx1MDAzZS4uLlx1MDAzYy9iXHUwMDNlIFx1MDAzY2JcdTAwM2VEdXJhbnRlIGxhXHUwMDNjL2JcdTAwM2UgbWHDsWFuYSBkZSBlc3RlIHZpZXJuZXMgdW5vIGRlIGxvcyBiYcOxb3MgZGUgbGEgdGVybWluYWwgZGUgw7NtbmlidXMgXHUwMDNjYnJcdTAwM2VcbmRlIENhc2lsZGEgYW1hbmVjacOzIGNvbiBsYSBydXB0dXJhIGRlIHVubyBkZSBzdXMgZXNwZWpvcywmbmJzcDsuLi4iLAogICAgICAiY2FjaGVJZCI6ICJhTHlBWWZDNUszWUoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS8uLi4vVmFuZGFsaXphcm9uLWxvcy1iYW5vcy1kZS1sYS10ZXJtaW5hci0gZHVyYW50ZS1sYS1tYWRydWdhZGEtMjAyMDAxMzEtMDAwMi5odG1sIiwKICAgICAgImh0bWxGb3JtYXR0ZWRVcmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tLy4uLi9WYW5kYWxpemFyb24tbG9zLWJhbm9zLWRlLWxhLXRlcm1pbmFyLSBcdTAwM2NiXHUwMDNlZHVyYW50ZS1sYVx1MDAzYy9iXHUwMDNlLW1hZHJ1Z2FkYS0yMDIwMDEzMS0wMDAyLmh0bWwiLAogICAgICAicGFnZW1hcCI6IHsKICAgICAgICAiY3NlX3RodW1ibmFpbCI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgInNyYyI6ICJodHRwczovL2VuY3J5cHRlZC10Ym4wLmdzdGF0aWMuY29tL2ltYWdlcz9xPXRibjpBTmQ5R2NUcXd2Sm0zcHFqc1VkUDlmbTBlelRmMmpfWlJiQ2ZpTk56Y0wwamRqN29fN3Z5RGw1RGtkdnI5VW8iLAogICAgICAgICAgICAid2lkdGgiOiAiMjk5IiwKICAgICAgICAgICAgImhlaWdodCI6ICIxNjgiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiaW1hZ2VvYmplY3QiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNTgwNDgzMDM4MDc1L3NpdGVzL3Jvc2FyaW9wbHVzL2ltZy8yMDIwLzAxLzMxLzUxYWRhMThjLTMwMjEtNDA0MC1hZWZiLTNiM2RlYTg3OTJiOF94MXhfY3JvcDE1ODA0ODI5MzYwMDAuanBnXzUwMTQyMDU5MS5qcGciLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiMSBkZSAzIC0gQXPDrSBxdWVkw7MgZWwgZXNwZWpvIGRlbCBiYcOxbyBkZSBsYSB0ZXJtaW5hbC4iCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTU4MDQ4MzAzODIyMi9zaXRlcy9yb3NhcmlvcGx1cy9pbWcvMjAyMC8wMS8zMS8zZjI4MzAyNi02MTA5LTQxZmItYjZjZC1iMWZlMjNiOTExZDFfMl9jcm9wMTU4MDQ4Mjk3NzQ4MC5qcGdfNTAxNDIwNTkxLmpwZyIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICIyIGRlIDMgLSBBc8OtIHF1ZWTDsyBlbCBlc3Blam8gZGVsIGJhw7FvIGRlIGxhIHRlcm1pbmFsLiIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNTgwNDgzMDM4MzY4L3NpdGVzL3Jvc2FyaW9wbHVzL2ltZy8yMDIwLzAxLzMxLzRmNzZkMTg5LWE2ZGUtNDJhYi04Y2Q4LTNjM2NlYzgxNTk5Ml8xX2Nyb3AxNTgwNDgyOTkxNDUzLmpwZ181MDE0MjA1OTEuanBnIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIjMgZGUgMyAtIEFzw60gcXVlZMOzIGVsIGVzcGVqbyBkZWwgYmHDsW8gZGUgbGEgdGVybWluYWwuIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbnRlbnR1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL19fZXhwb3J0LzE0NTk3OTAwMDA2ODEvc2l0ZXMvcm9zYXJpb3BsdXMvY2FzaWxkYXBsdXMvYXJ0ZS9fYmxhbmsuZ2lmIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlBhZ28gZGUgaGFiZXJlcyB5IGJvbm9zOiB0ZSBjb250YW1vcyB0b2RvIGxvIHF1ZSB0ZW5lcyBzYWJlciIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJWYW5kYWxpemFyb24gbG9zIGJhw7FvcyBkZSBsYSB0ZXJtaW5hciBkdXJhbnRlIGxhIG1hZHJ1Z2FkYSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJWaW9sZW5jaWEgZW4gQ2FzaWxkYTogcmVhbGl6YW4gdW4gZW5jdWVudHJvIGVudHJlIHZlY2lub3MgcGFyYSBkZWJhdGlyIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbnRlbnR1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL19fZXhwb3J0LzE0NTk3OTAwMDA2ODEvc2l0ZXMvcm9zYXJpb3BsdXMvY2FzaWxkYXBsdXMvYXJ0ZS9fYmxhbmsuZ2lmIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkxhIEJvbWJhIFR1Y3VtYW5hIHNlIGJhasOzIGRlbCBGZXN0aXZhbCBkZSBsYSBHdWl0YXJyYSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBZ3J1cGFjacOzbiBDYXNpbGRlbnNlIGRlIMOBcmJpdHJvczogZWwgbnVldm8gY29sZWdpbyBkZSBsYSBjaXVkYWQiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTG9zIE1vbGlub3M6IGRldHV2aWVyb24gYSB1biBob21icmUgYWN1c2FkbyBkZSBhYnVzbyBzZXh1YWwgY29udHJhIGRvcyBtZW5vcmVzIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbnRlbnR1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL19fZXhwb3J0LzE0NTk3OTAwMDA2ODEvc2l0ZXMvcm9zYXJpb3BsdXMvY2FzaWxkYXBsdXMvYXJ0ZS9fYmxhbmsuZ2lmIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlVuIGhvbWJyZSBmYWxsZWNpw7MgZW4gdW4gYWNjaWRlbnRlIHNvYnJlIFJ1dGEgUzI2IgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbnRlbnR1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL19fZXhwb3J0LzE0NTk3OTAwMDA2ODEvc2l0ZXMvcm9zYXJpb3BsdXMvY2FzaWxkYXBsdXMvYXJ0ZS9fYmxhbmsuZ2lmIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlJvYmFyb24gZGVsIGF1dG8gZGUgdW4gZnVuY2lvbmFyaW8gZGluZXJvIHBhcmEgYWN0aXZpZGFkZXMgbXVuaWNpcGFsZXMiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU29sZGluaTogcHVzbyBjw6FtYXJhcyBwYXJhIGVzcGlhciBhIHN1cyBjb21wYcOxZXJhcyBlbiBlbCBiYcOxbyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFbXBlemFyb24gbG9zIGFtaXN0b3NvcyBkZSBjYXJhIGEgdW4gMjAyMCBjb21wZXRpdGl2byIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJQYWdvIGRlIGhhYmVyZXMgeSBib25vczogdGUgY29udGFtb3MgdG9kbyBsbyBxdWUgdGVuZXMgc2FiZXIiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQXVtZW50YXLDoW4gbGEgY2FudGlkYWQgeSBsb3MgbW9udG9zIGRlIGxhcyBiZWNhcyBlc3R1ZGlhbnRpbGVzIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbnRlbnR1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL19fZXhwb3J0LzE0NTk3OTAwMDA2ODEvc2l0ZXMvcm9zYXJpb3BsdXMvY2FzaWxkYXBsdXMvYXJ0ZS9fYmxhbmsuZ2lmIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkxvcyBNb2xpbm9zOiBkZXR1dmllcm9uIGEgdW4gaG9tYnJlIGFjdXNhZG8gZGUgYWJ1c28gc2V4dWFsIGNvbnRyYSBkb3MgbWVub3JlcyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJFc3RlIHZpZXJuZXMgc2UgY29ubWVtb3LDsyBlbCAxMTIgYW5pdmVyc2FyaW8gZGVsIG5hY2ltaWVudG8gZGUgQXRhaHVhbHBhIFl1cGFucXVpIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbnRlbnR1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL19fZXhwb3J0LzE0NTk3OTAwMDA2ODEvc2l0ZXMvcm9zYXJpb3BsdXMvY2FzaWxkYXBsdXMvYXJ0ZS9fYmxhbmsuZ2lmIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIlByaXNpw7NuIHByZXZlbnRpdmEgcGFyYSBlbCBhY3VzYWRvIGRlIGFidXNhciBkZSBkb3MgbWVub3JlcyBlbiBMb3MgTW9saW5vcyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJMYSBNdW5pY2lwYWxpZGFkIHBhZ2FiYSBtw6FzIGRlIDMwIHNlZ3Vyb3MgZGUgdmVow61jdWxvcyBxdWUgeWEgbm8gdXNhYmEiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiRW1wZXphcm9uIGxvcyBhbWlzdG9zb3MgZGUgY2FyYSBhIHVuIDIwMjAgY29tcGV0aXRpdm8iCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiVmFuZGFsaXphcm9uIGxvcyBiYcOxb3MgZGUgbGEgdGVybWluYXIgZHVyYW50ZSBsYSBtYWRydWdhZGEiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiQWdydXBhY2nDs24gQ2FzaWxkZW5zZSBkZSDDgXJiaXRyb3M6IGVsIG51ZXZvIGNvbGVnaW8gZGUgbGEgY2l1ZGFkIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgImNvbnRlbnR1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL19fZXhwb3J0LzE0NTk3OTAwMDA2ODEvc2l0ZXMvcm9zYXJpb3BsdXMvY2FzaWxkYXBsdXMvYXJ0ZS9fYmxhbmsuZ2lmIiwKICAgICAgICAgICAgImRlc2NyaXB0aW9uIjogIkF1bWVudGFyw6FuIGxhIGNhbnRpZGFkIHkgbG9zIG1vbnRvcyBkZSBsYXMgYmVjYXMgZXN0dWRpYW50aWxlcyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJMYSBCb21iYSBUdWN1bWFuYSBzZSBiYWrDsyBkZWwgRmVzdGl2YWwgZGUgbGEgR3VpdGFycmEiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiTGEgQ2FzaXRhIFBvcHVsYXIgYWJyacOzIHN1cyBwdWVydGFzIHBhcmEgaGFibGFyIHNvYnJlIGxhIHZpb2xlbmNpYSIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJMb3MgTW9saW5vczogZGV0dXZpZXJvbiBhIHVuIGhvbWJyZSBhY3VzYWRvIGRlIGFidXNvIHNleHVhbCBjb250cmEgZG9zIG1lbm9yZXMiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAiY29udGVudHVybCI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTQ1OTc5MDAwMDY4MS9zaXRlcy9yb3NhcmlvcGx1cy9jYXNpbGRhcGx1cy9hcnRlL19ibGFuay5naWYiLAogICAgICAgICAgICAiZGVzY3JpcHRpb24iOiAiU29sZGluaTogcHVzbyBjw6FtYXJhcyBwYXJhIGVzcGlhciBhIHN1cyBjb21wYcOxZXJhcyBlbiBlbCBiYcOxbyIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb250ZW50dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNDU5NzkwMDAwNjgxL3NpdGVzL3Jvc2FyaW9wbHVzL2Nhc2lsZGFwbHVzL2FydGUvX2JsYW5rLmdpZiIsCiAgICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJEZXRpZW5lbiBhIHVuIGRlbGluY3VlbnRlIGx1ZWdvIGRlIHJvYmFyIGVuIHbDrWEgbGEgcMO6YmxpY2EiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAicGVyc29uIjogWwogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJnYXNwYXIgZGFsbGEgdmFsbGUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20vX19leHBvcnQvMTU4MDQ4MjkxNzIyOS9zaXRlcy9yb3NhcmlvcGx1cy9pbWcvMjAyMC8wMS8zMS8zZjI4MzAyNi02MTA5LTQxZmItYjZjZC1iMWZlMjNiOTExZDFfY3JvcDE1ODA0ODI5MTY1ODguanBnIiwKICAgICAgICAgICAgIm9nOnR5cGUiOiAiYXJ0aWNsZSIsCiAgICAgICAgICAgICJ0d2l0dGVyOmNhcmQiOiAic3VtbWFyeV9sYXJnZV9pbWFnZSIsCiAgICAgICAgICAgICJ0d2l0dGVyOnRpdGxlIjogIlZhbmRhbGl6YXJvbiBsb3MgYmHDsW9zIGRlIGxhIHRlcm1pbmFyIGR1cmFudGUgbGEgbWFkcnVnYWRhIHwgQ2FzaWxkYVBsdXMuY29tIiwKICAgICAgICAgICAgIm9nOnNpdGVfbmFtZSI6ICJDYXNpbGRhUGx1cyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmRvbWFpbiI6ICJodHRwczovL3d3dy5jYXNpbGRhcGx1cy5jb20iLAogICAgICAgICAgICAidHdpdHRlcjp1cmwiOiAiaHR0cHM6Ly90d2l0dGVyLmNvbS9DYXNpbGRhUGx1cyIsCiAgICAgICAgICAgICJvZzpsb2NhbGl0eSI6ICJSb3NhcmlvIiwKICAgICAgICAgICAgIm9nOnRpdGxlIjogIlZhbmRhbGl6YXJvbiBsb3MgYmHDsW9zIGRlIGxhIHRlcm1pbmFyIGR1cmFudGUgbGEgbWFkcnVnYWRhIHwgQ2FzaWxkYVBsdXMuY29tIiwKICAgICAgICAgICAgInR3aXR0ZXI6aW1hZ2U6aGVpZ2h0IjogIjE2MCIsCiAgICAgICAgICAgICJvZzpkZXNjcmlwdGlvbiI6ICJcdTAwM2NwXHUwMDNlUGFyZWNlIHF1ZSBubyBhcHJlbmRlbiB5IG51ZXZhbWVudGUgdW4gZXNwYWNpbyBwJnVhY3V0ZTtibGljbyBzdWZyaSZvYWN1dGU7IGRhJm50aWxkZTtvcyBwb3IgZGVzY29ub2NpZG9zIHF1ZSBzb2xvIHJvbXBlbiBwb3IgcGxhY2VyXHUwMDNjIHBcdTAwM2UiLAogICAgICAgICAgICAidHdpdHRlcjpjcmVhdG9yIjogIkBjYXNpbGRhcGx1cyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNTgwNDgyOTE3MjI5L3NpdGVzL3Jvc2FyaW9wbHVzL2ltZy8yMDIwLzAxLzMxLzNmMjgzMDI2LTYxMDktNDFmYi1iNmNkLWIxZmUyM2I5MTFkMV9jcm9wMTU4MDQ4MjkxNjU4OC5qcGciLAogICAgICAgICAgICAidHdpdHRlcjpzaXRlIjogIkBjYXNpbGRhcGx1cyIsCiAgICAgICAgICAgICJ0d2l0dGVyOmltYWdlOndpZHRoIjogIjI4MCIsCiAgICAgICAgICAgICJ2aWV3cG9ydCI6ICJ3aWR0aD1kZXZpY2Utd2lkdGgsIG1pbmltdW0tc2NhbGU9MS4wLCBtYXhpbXVtLXNjYWxlPTEuMCwgdXNlci1zY2FsYWJsZT1ubywgaW5pdGlhbC1zY2FsZT0xLjAiLAogICAgICAgICAgICAidHdpdHRlcjpkZXNjcmlwdGlvbiI6ICJcdTAwM2NwXHUwMDNlUGFyZWNlIHF1ZSBubyBhcHJlbmRlbiB5IG51ZXZhbWVudGUgdW4gZXNwYWNpbyBwJnVhY3V0ZTtibGljbyBzdWZyaSZvYWN1dGU7IGRhJm50aWxkZTtvcyBwb3IgZGVzY29ub2NpZG9zIHF1ZSBzb2xvIHJvbXBlbiBwb3IgcGxhY2VyXHUwMDNjIHBcdTAwM2UiLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9lbm5vdGljaWFzL1ZhbmRhbGl6YXJvbi1sb3MtYmFub3MtZGUtbGEtdGVybWluYXItZHVyYW50ZS1sYS1tYWRydWdhZGEtMjAyMDAxMzEtMDAwMi5odG1sIiwKICAgICAgICAgICAgIm9nOmNvdW50cnktbmFtZSI6ICJBcmdlbnRpbmEiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiY3NlX2ltYWdlIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vd3d3LmNhc2lsZGFwbHVzLmNvbS9fX2V4cG9ydC8xNTgwNDgzMDM4MjIyL3NpdGVzL3Jvc2FyaW9wbHVzL2ltZy8yMDIwLzAxLzMxLzNmMjgzMDI2LTYxMDktNDFmYi1iNmNkLWIxZmUyM2I5MTFkMV8yX2Nyb3AxNTgwNDgyOTc3NDgwLmpwZ181MDE0MjA1OTEuanBnIgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgImFydGljbGUiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJpc2ZhbWlseWZyaWVuZGx5IjogIlRydWUiLAogICAgICAgICAgICAiYXJ0aWNsZWJvZHkiOiAiRHVyYW50ZSBsYSBtYcOxYW5hIGRlIGVzdGUgdmllcm5lcyB1bm8gZGUgbG9zIGJhw7FvcyBkZSBsYSB0ZXJtaW5hbCBkZSDDs21uaWJ1cyBkZSBDYXNpbGRhIGFtYW5lY2nDsyBjb24gbGEgcnVwdHVyYSBkZSB1bm8gZGUgc3VzIGVzcGVqb3MsIHByb2R1Y3RvIGRlIGFsZ3VuYSBtYWxhIGRlY2lzacOzbiBkZSBwZXJzb25hcyBxdWUuLi4iLAogICAgICAgICAgICAibmFtZSI6ICJWYW5kYWxpemFyb24gbG9zIGJhw7FvcyBkZSBsYSB0ZXJtaW5hciBkdXJhbnRlIGxhIG1hZHJ1Z2FkYSIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJWYW5kYWxpemFyb24gbG9zIGJhw7FvcyBkZSBsYSB0ZXJtaW5hciBkdXJhbnRlIGxhIG1hZHJ1Z2FkYSIsCiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly93d3cuY2FzaWxkYXBsdXMuY29tL2Vubm90aWNpYXMvVmFuZGFsaXphcm9uLWxvcy1iYW5vcy1kZS1sYS10ZXJtaW5hci1kdXJhbnRlLWxhLW1hZHJ1Z2FkYS0yMDIwMDEzMS0wMDAyLmh0bWwiLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAxLzMxIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiUGFnbyBkZSBoYWJlcmVzIHkgYm9ub3M6IHRlIGNvbnRhbW9zIHRvZG8gbG8gcXVlIHRlbmVzIHNhYmVyIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIlBhZ28gZGUgaGFiZXJlcyB5IGJvbm9zOiB0ZSBjb250YW1vcyB0b2RvIGxvIHF1ZSB0ZW5lcyBzYWJlciIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzAiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL1BhZ28tZGUtaGFiZXJlcy15LWJvbm9zLXRlLWNvbnRhbW9zLXRvZG8tbG8tcXVlLXRlbmVzLXNhYmVyLTIwMjAwMTI5LTAwMDkuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIlZhbmRhbGl6YXJvbiBsb3MgYmHDsW9zIGRlIGxhIHRlcm1pbmFyIGR1cmFudGUgbGEgbWFkcnVnYWRhIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIlZhbmRhbGl6YXJvbiBsb3MgYmHDsW9zIGRlIGxhIHRlcm1pbmFyIGR1cmFudGUgbGEgbWFkcnVnYWRhIiwKICAgICAgICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAyMC8wMS8zMSIsCiAgICAgICAgICAgICJzYW1lYXMiOiAiL2Vubm90aWNpYXMvVmFuZGFsaXphcm9uLWxvcy1iYW5vcy1kZS1sYS10ZXJtaW5hci1kdXJhbnRlLWxhLW1hZHJ1Z2FkYS0yMDIwMDEzMS0wMDAyLmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJWaW9sZW5jaWEgZW4gQ2FzaWxkYTogcmVhbGl6YW4gdW4gZW5jdWVudHJvIGVudHJlIHZlY2lub3MgcGFyYSBkZWJhdGlyIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIlZpb2xlbmNpYSBlbiBDYXNpbGRhOiByZWFsaXphbiB1biBlbmN1ZW50cm8gZW50cmUgdmVjaW5vcyBwYXJhIGRlYmF0aXIiLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAxLzMwIiwKICAgICAgICAgICAgInNhbWVhcyI6ICIvZW5ub3RpY2lhcy9WaW9sZW5jaWEtZW4tQ2FzaWxkYS1yZWFsaXphbi11bi1lbmN1ZW50cm8tZW50cmUtdmVjaW5vcy1wYXJhLWRlYmF0aXItLTIwMjAwMTMwLTAwMDEuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIkxhIEJvbWJhIFR1Y3VtYW5hIHNlIGJhasOzIGRlbCBGZXN0aXZhbCBkZSBsYSBHdWl0YXJyYSIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJMYSBCb21iYSBUdWN1bWFuYSBzZSBiYWrDsyBkZWwgRmVzdGl2YWwgZGUgbGEgR3VpdGFycmEiLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAxLzMxIiwKICAgICAgICAgICAgInNhbWVhcyI6ICIvZW5ub3RpY2lhcy9MYS1Cb21iYS1UdWN1bWFuYS1zZS1iYWpvLWRlbC1GZXN0aXZhbC1kZS1sYS1HdWl0YXJyYS0yMDIwMDEzMC0wMDA3Lmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJBZ3J1cGFjacOzbiBDYXNpbGRlbnNlIGRlIMOBcmJpdHJvczogZWwgbnVldm8gY29sZWdpbyBkZSBsYSBjaXVkYWQiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiQWdydXBhY2nDs24gQ2FzaWxkZW5zZSBkZSDDgXJiaXRyb3M6IGVsIG51ZXZvIGNvbGVnaW8gZGUgbGEgY2l1ZGFkIiwKICAgICAgICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAyMC8wMS8zMSIsCiAgICAgICAgICAgICJzYW1lYXMiOiAiL2Vubm90aWNpYXMvQWdydXBhY2lvbi1DYXNpbGRlbnNlLWRlLUFyYml0cm9zLWVsLW51ZXZvLWNvbGVnaW8tZGUtbGEtY2l1ZGFkLS0yMDIwMDEzMS0wMDAxLmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJMb3MgTW9saW5vczogZGV0dXZpZXJvbiBhIHVuIGhvbWJyZSBhY3VzYWRvIGRlIGFidXNvIHNleHVhbCBjb250cmEgZG9zIG1lbm9yZXMiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiTG9zIE1vbGlub3M6IGRldHV2aWVyb24gYSB1biBob21icmUgYWN1c2FkbyBkZSBhYnVzbyBzZXh1YWwgY29udHJhIGRvcyBtZW5vcmVzIiwKICAgICAgICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAyMC8wMS8zMCIsCiAgICAgICAgICAgICJzYW1lYXMiOiAiL2Vubm90aWNpYXMvTG9zLU1vbGlub3MtZGV0dXZpZXJvbi1hLXVuLWhvbWJyZS1hY3VzYWRvLWRlLWFidXNvLXNleHVhbC1jb250cmEtZG9zLW1lbm9yZXMtMjAyMDAxMzAtMDAwNi5odG1sIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiVW4gaG9tYnJlIGZhbGxlY2nDsyBlbiB1biBhY2NpZGVudGUgc29icmUgUnV0YSBTMjYiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiVW4gaG9tYnJlIGZhbGxlY2nDsyBlbiB1biBhY2NpZGVudGUgc29icmUgUnV0YSBTMjYiLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAyLzAxIiwKICAgICAgICAgICAgInNhbWVhcyI6ICIvZW5ub3RpY2lhcy9Vbi1ob21icmUtZmFsbGVjaW8tZW4tdW4tYWNjaWRlbnRlLXNvYnJlLVJ1dGEtUzI2LTIwMjAwMjAxLTAwMDEuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIlJvYmFyb24gZGVsIGF1dG8gZGUgdW4gZnVuY2lvbmFyaW8gZGluZXJvIHBhcmEgYWN0aXZpZGFkZXMgbXVuaWNpcGFsZXMiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiUm9iYXJvbiBkZWwgYXV0byBkZSB1biBmdW5jaW9uYXJpbyBkaW5lcm8gcGFyYSBhY3RpdmlkYWRlcyBtdW5pY2lwYWxlcyIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzAiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL1JvYmFyb24tZGVsLWF1dG8tZGUtdW4tZnVuY2lvbmFyaW8tZGluZXJvLXBhcmEtYWN0aXZpZGFkZXMtbXVuaWNpcGFsZXMtLTIwMjAwMTMwLTAwMDIuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIlNvbGRpbmk6IHB1c28gY8OhbWFyYXMgcGFyYSBlc3BpYXIgYSBzdXMgY29tcGHDsWVyYXMgZW4gZWwgYmHDsW8iLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiU29sZGluaTogcHVzbyBjw6FtYXJhcyBwYXJhIGVzcGlhciBhIHN1cyBjb21wYcOxZXJhcyBlbiBlbCBiYcOxbyIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzAiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL1NvbGRpbmktcHVzby1jYW1hcmFzLXBhcmEtZXNwaWFyLWEtc3VzLWNvbXBhbmVyYXMtZW4tZWwtYmFuby0yMDIwMDEzMC0wMDA0Lmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJFbXBlemFyb24gbG9zIGFtaXN0b3NvcyBkZSBjYXJhIGEgdW4gMjAyMCBjb21wZXRpdGl2byIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJFbXBlemFyb24gbG9zIGFtaXN0b3NvcyBkZSBjYXJhIGEgdW4gMjAyMCBjb21wZXRpdGl2byIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzEiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL0VtcGV6YXJvbi1sb3MtYW1pc3Rvc29zLWRlLWNhcmEtYS11bi0yMDIwLWNvbXBldGl0aXZvLTIwMjAwMTMxLTAwMDMuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIlBhZ28gZGUgaGFiZXJlcyB5IGJvbm9zOiB0ZSBjb250YW1vcyB0b2RvIGxvIHF1ZSB0ZW5lcyBzYWJlciIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJQYWdvIGRlIGhhYmVyZXMgeSBib25vczogdGUgY29udGFtb3MgdG9kbyBsbyBxdWUgdGVuZXMgc2FiZXIiLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAxLzMwIiwKICAgICAgICAgICAgInNhbWVhcyI6ICIvZW5ub3RpY2lhcy9QYWdvLWRlLWhhYmVyZXMteS1ib25vcy10ZS1jb250YW1vcy10b2RvLWxvLXF1ZS10ZW5lcy1zYWJlci0yMDIwMDEyOS0wMDA5Lmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJBdW1lbnRhcsOhbiBsYSBjYW50aWRhZCB5IGxvcyBtb250b3MgZGUgbGFzIGJlY2FzIGVzdHVkaWFudGlsZXMiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiQXVtZW50YXLDoW4gbGEgY2FudGlkYWQgeSBsb3MgbW9udG9zIGRlIGxhcyBiZWNhcyBlc3R1ZGlhbnRpbGVzIiwKICAgICAgICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAyMC8wMS8zMSIsCiAgICAgICAgICAgICJzYW1lYXMiOiAiL2Vubm90aWNpYXMvQXVtZW50YXJhbi1sYS1jYW50aWRhZC15LWxvcy1tb250b3MtZGUtbGFzLWJlY2FzLWVzdHVkaWFudGlsZXMtMjAyMDAxMzAtMDAwNS5odG1sIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiTG9zIE1vbGlub3M6IGRldHV2aWVyb24gYSB1biBob21icmUgYWN1c2FkbyBkZSBhYnVzbyBzZXh1YWwgY29udHJhIGRvcyBtZW5vcmVzIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIkxvcyBNb2xpbm9zOiBkZXR1dmllcm9uIGEgdW4gaG9tYnJlIGFjdXNhZG8gZGUgYWJ1c28gc2V4dWFsIGNvbnRyYSBkb3MgbWVub3JlcyIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzAiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL0xvcy1Nb2xpbm9zLWRldHV2aWVyb24tYS11bi1ob21icmUtYWN1c2Fkby1kZS1hYnVzby1zZXh1YWwtY29udHJhLWRvcy1tZW5vcmVzLTIwMjAwMTMwLTAwMDYuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIkVzdGUgdmllcm5lcyBzZSBjb25tZW1vcsOzIGVsIDExMiBhbml2ZXJzYXJpbyBkZWwgbmFjaW1pZW50byBkZSBBdGFodWFscGEgWXVwYW5xdWkiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiRXN0ZSB2aWVybmVzIHNlIGNvbm1lbW9yw7MgZWwgMTEyIGFuaXZlcnNhcmlvIGRlbCBuYWNpbWllbnRvIGRlIEF0YWh1YWxwYSBZdXBhbnF1aSIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzEiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL0VzdGUtdmllcm5lcy1zZS1jb25tZW1vcm8tZWwtMTEyLWFuaXZlcnNhcmlvLWRlbC1uYWNpbWllbnRvLWRlLUF0YWh1YWxwYS1ZdXBhbnF1aS0yMDIwMDEzMS0wMDA4Lmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJQcmlzacOzbiBwcmV2ZW50aXZhIHBhcmEgZWwgYWN1c2FkbyBkZSBhYnVzYXIgZGUgZG9zIG1lbm9yZXMgZW4gTG9zIE1vbGlub3MiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiUHJpc2nDs24gcHJldmVudGl2YSBwYXJhIGVsIGFjdXNhZG8gZGUgYWJ1c2FyIGRlIGRvcyBtZW5vcmVzIGVuIExvcyBNb2xpbm9zIiwKICAgICAgICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAyMC8wMS8zMSIsCiAgICAgICAgICAgICJzYW1lYXMiOiAiL2Vubm90aWNpYXMvUHJpc2lvbi1wcmV2ZW50aXZhLXBhcmEtZWwtYWN1c2Fkby1kZS1hYnVzYXItZGUtZG9zLW1lbm9yZXMtZW4tTG9zLU1vbGlub3MtMjAyMDAxMzEtMDAwNy5odG1sIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiTGEgTXVuaWNpcGFsaWRhZCBwYWdhYmEgbcOhcyBkZSAzMCBzZWd1cm9zIGRlIHZlaMOtY3Vsb3MgcXVlIHlhIG5vIHVzYWJhIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIkxhIE11bmljaXBhbGlkYWQgcGFnYWJhIG3DoXMgZGUgMzAgc2VndXJvcyBkZSB2ZWjDrWN1bG9zIHF1ZSB5YSBubyB1c2FiYSIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzEiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL0xhLU11bmljaXBhbGlkYWQtcGFnYWJhLW1hcy1kZS0zMC1zZWd1cm9zLWRlLXZlaGljdWxvcy1xdWUteWEtbm8tdXNhYmEtMjAyMDAxMzEtMDAwNC5odG1sIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiRW1wZXphcm9uIGxvcyBhbWlzdG9zb3MgZGUgY2FyYSBhIHVuIDIwMjAgY29tcGV0aXRpdm8iLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiRW1wZXphcm9uIGxvcyBhbWlzdG9zb3MgZGUgY2FyYSBhIHVuIDIwMjAgY29tcGV0aXRpdm8iLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAxLzMxIiwKICAgICAgICAgICAgInNhbWVhcyI6ICIvZW5ub3RpY2lhcy9FbXBlemFyb24tbG9zLWFtaXN0b3Nvcy1kZS1jYXJhLWEtdW4tMjAyMC1jb21wZXRpdGl2by0yMDIwMDEzMS0wMDAzLmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJWYW5kYWxpemFyb24gbG9zIGJhw7FvcyBkZSBsYSB0ZXJtaW5hciBkdXJhbnRlIGxhIG1hZHJ1Z2FkYSIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJWYW5kYWxpemFyb24gbG9zIGJhw7FvcyBkZSBsYSB0ZXJtaW5hciBkdXJhbnRlIGxhIG1hZHJ1Z2FkYSIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzEiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL1ZhbmRhbGl6YXJvbi1sb3MtYmFub3MtZGUtbGEtdGVybWluYXItZHVyYW50ZS1sYS1tYWRydWdhZGEtMjAyMDAxMzEtMDAwMi5odG1sIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiQWdydXBhY2nDs24gQ2FzaWxkZW5zZSBkZSDDgXJiaXRyb3M6IGVsIG51ZXZvIGNvbGVnaW8gZGUgbGEgY2l1ZGFkIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIkFncnVwYWNpw7NuIENhc2lsZGVuc2UgZGUgw4FyYml0cm9zOiBlbCBudWV2byBjb2xlZ2lvIGRlIGxhIGNpdWRhZCIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzEiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL0FncnVwYWNpb24tQ2FzaWxkZW5zZS1kZS1BcmJpdHJvcy1lbC1udWV2by1jb2xlZ2lvLWRlLWxhLWNpdWRhZC0tMjAyMDAxMzEtMDAwMS5odG1sIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiQXVtZW50YXLDoW4gbGEgY2FudGlkYWQgeSBsb3MgbW9udG9zIGRlIGxhcyBiZWNhcyBlc3R1ZGlhbnRpbGVzIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIkF1bWVudGFyw6FuIGxhIGNhbnRpZGFkIHkgbG9zIG1vbnRvcyBkZSBsYXMgYmVjYXMgZXN0dWRpYW50aWxlcyIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzEiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL0F1bWVudGFyYW4tbGEtY2FudGlkYWQteS1sb3MtbW9udG9zLWRlLWxhcy1iZWNhcy1lc3R1ZGlhbnRpbGVzLTIwMjAwMTMwLTAwMDUuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIkxhIEJvbWJhIFR1Y3VtYW5hIHNlIGJhasOzIGRlbCBGZXN0aXZhbCBkZSBsYSBHdWl0YXJyYSIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJMYSBCb21iYSBUdWN1bWFuYSBzZSBiYWrDsyBkZWwgRmVzdGl2YWwgZGUgbGEgR3VpdGFycmEiLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAxLzMxIiwKICAgICAgICAgICAgInNhbWVhcyI6ICIvZW5ub3RpY2lhcy9MYS1Cb21iYS1UdWN1bWFuYS1zZS1iYWpvLWRlbC1GZXN0aXZhbC1kZS1sYS1HdWl0YXJyYS0yMDIwMDEzMC0wMDA3Lmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJMYSBDYXNpdGEgUG9wdWxhciBhYnJpw7Mgc3VzIHB1ZXJ0YXMgcGFyYSBoYWJsYXIgc29icmUgbGEgdmlvbGVuY2lhIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIkxhIENhc2l0YSBQb3B1bGFyIGFicmnDsyBzdXMgcHVlcnRhcyBwYXJhIGhhYmxhciBzb2JyZSBsYSB2aW9sZW5jaWEiLAogICAgICAgICAgICAiZGF0ZXB1Ymxpc2hlZCI6ICIyMDIwLzAxLzMxIiwKICAgICAgICAgICAgInNhbWVhcyI6ICIvZW5ub3RpY2lhcy9MYS1DYXNpdGEtUG9wdWxhci1hYnJpby1zdXMtcHVlcnRhcy1wYXJhLWhhYmxhci1zb2JyZS1sYS12aW9sZW5jaWEtMjAyMDAxMzAtMDAwOC5odG1sIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiTG9zIE1vbGlub3M6IGRldHV2aWVyb24gYSB1biBob21icmUgYWN1c2FkbyBkZSBhYnVzbyBzZXh1YWwgY29udHJhIGRvcyBtZW5vcmVzIiwKICAgICAgICAgICAgImhlYWRsaW5lIjogIkxvcyBNb2xpbm9zOiBkZXR1dmllcm9uIGEgdW4gaG9tYnJlIGFjdXNhZG8gZGUgYWJ1c28gc2V4dWFsIGNvbnRyYSBkb3MgbWVub3JlcyIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzAiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL0xvcy1Nb2xpbm9zLWRldHV2aWVyb24tYS11bi1ob21icmUtYWN1c2Fkby1kZS1hYnVzby1zZXh1YWwtY29udHJhLWRvcy1tZW5vcmVzLTIwMjAwMTMwLTAwMDYuaHRtbCIKICAgICAgICAgIH0sCiAgICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogIlNvbGRpbmk6IHB1c28gY8OhbWFyYXMgcGFyYSBlc3BpYXIgYSBzdXMgY29tcGHDsWVyYXMgZW4gZWwgYmHDsW8iLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiU29sZGluaTogcHVzbyBjw6FtYXJhcyBwYXJhIGVzcGlhciBhIHN1cyBjb21wYcOxZXJhcyBlbiBlbCBiYcOxbyIsCiAgICAgICAgICAgICJkYXRlcHVibGlzaGVkIjogIjIwMjAvMDEvMzAiLAogICAgICAgICAgICAic2FtZWFzIjogIi9lbm5vdGljaWFzL1NvbGRpbmktcHVzby1jYW1hcmFzLXBhcmEtZXNwaWFyLWEtc3VzLWNvbXBhbmVyYXMtZW4tZWwtYmFuby0yMDIwMDEzMC0wMDA0Lmh0bWwiCiAgICAgICAgICB9LAogICAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJEZXRpZW5lbiBhIHVuIGRlbGluY3VlbnRlIGx1ZWdvIGRlIHJvYmFyIGVuIHbDrWEgbGEgcMO6YmxpY2EiLAogICAgICAgICAgICAiaGVhZGxpbmUiOiAiRGV0aWVuZW4gYSB1biBkZWxpbmN1ZW50ZSBsdWVnbyBkZSByb2JhciBlbiB2w61hIGxhIHDDumJsaWNhIiwKICAgICAgICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAyMC8wMS8zMCIsCiAgICAgICAgICAgICJzYW1lYXMiOiAiL2Vubm90aWNpYXMvRGV0aWVuZW4tYS11bi1kZWxpbmN1ZW50ZS1sdWVnby1kZS1yb2Jhci1lbi12aWEtbGEtcHVibGljYS0yMDIwMDEzMC0wMDAzLmh0bWwiCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICB9LAogICAgewogICAgICAia2luZCI6ICJjdXN0b21zZWFyY2gjcmVzdWx0IiwKICAgICAgInRpdGxlIjogIkVsIGVsZWdhbnRlIGVzdGlsbyBkZSBGYWJpb2xhIFnDocOxZXogZHVyYW50ZSBsYSB2aXNpdGEgYWwgcGFwYSBGcmFuY2lzY28iLAogICAgICAiaHRtbFRpdGxlIjogIkVsIGVsZWdhbnRlIGVzdGlsbyBkZSBGYWJpb2xhIFnDocOxZXogZHVyYW50ZSBsYSB2aXNpdGEgYWwgcGFwYSBGcmFuY2lzY28iLAogICAgICAibGluayI6ICJodHRwczovL3d3dy5nZW50ZS5jb20uYXIvYWN0dWFsaWRhZC9lbC1lbGVnYW50ZS1lc3RpbG8tZGUtZmFiaW9sYS15YW5lei1kdXJhbnRlLWxhLXZpc2l0YS1hbC1wYXBhLWZyYW5jaXNjby8iLAogICAgICAiZGlzcGxheUxpbmsiOiAid3d3LmdlbnRlLmNvbS5hciIsCiAgICAgICJzbmlwcGV0IjogIkhhY2UgMiBkw61hcyAuLi4gRWwgZWxlZ2FudGUgZXN0aWxvIGRlIEZhYmlvbGEgWcOhw7FleiBkdXJhbnRlIGxhIHZpc2l0YSBhbCBwYXBhIEZyYW5jaXNjby4gXG5SZWRhY2Npw7NuIEdlbnRlLiBwb3IgUmVkYWNjacOzbiBHZW50ZS4gMCBDb21wYXJ0aXIuIiwKICAgICAgImh0bWxTbmlwcGV0IjogIkhhY2UgMiBkw61hcyBcdTAwM2NiXHUwMDNlLi4uXHUwMDNjL2JcdTAwM2UgRWwgZWxlZ2FudGUgZXN0aWxvIGRlIEZhYmlvbGEgWcOhw7FleiBcdTAwM2NiXHUwMDNlZHVyYW50ZSBsYVx1MDAzYy9iXHUwMDNlIHZpc2l0YSBhbCBwYXBhIEZyYW5jaXNjby4gXHUwMDNjYnJcdTAwM2VcblJlZGFjY2nDs24gR2VudGUuIHBvciBSZWRhY2Npw7NuIEdlbnRlLiAwIENvbXBhcnRpci4iLAogICAgICAiY2FjaGVJZCI6ICJicE1vSTlZRDNUTUoiLAogICAgICAiZm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmdlbnRlLmNvbS5hci8uLi4vZWwtZWxlZ2FudGUtZXN0aWxvLWRlLWZhYmlvbGEteWFuZXotZHVyYW50ZS1sYS0gdmlzaXRhLWFsLXBhcGEtZnJhbmNpc2NvLyIsCiAgICAgICJodG1sRm9ybWF0dGVkVXJsIjogImh0dHBzOi8vd3d3LmdlbnRlLmNvbS5hci8uLi4vZWwtZWxlZ2FudGUtZXN0aWxvLWRlLWZhYmlvbGEteWFuZXotXHUwMDNjYlx1MDAzZWR1cmFudGUtbGFcdTAwM2MvYlx1MDAzZS0gdmlzaXRhLWFsLXBhcGEtZnJhbmNpc2NvLyIsCiAgICAgICJwYWdlbWFwIjogewogICAgICAgICJjc2VfdGh1bWJuYWlsIjogWwogICAgICAgICAgewogICAgICAgICAgICAic3JjIjogImh0dHBzOi8vZW5jcnlwdGVkLXRibjEuZ3N0YXRpYy5jb20vaW1hZ2VzP3E9dGJuOkFOZDlHY1EwM0k3eklZSzNQanlCU3dIQnU5UjAybU9Kcnctb0RRQ2ExXzVkOFV5U04wRnlDTXRRMEVJSkhOSHgiLAogICAgICAgICAgICAid2lkdGgiOiAiMzA4IiwKICAgICAgICAgICAgImhlaWdodCI6ICIxNjMiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiaW1hZ2VvYmplY3QiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJ1cmwiOiAiaHR0cHM6Ly9zdGF0aWMuZ2VudGUuY29tLmFyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE5LzA4L2xvZ28uanBnIgogICAgICAgICAgfSwKICAgICAgICAgIHsKICAgICAgICAgICAgIndpZHRoIjogIjE5MjAiLAogICAgICAgICAgICAidXJsIjogImh0dHBzOi8vY2RuLmdlbnRlLmNvbS5hci93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wMS9HRU5URS1GYWJpb2xhLVlhbmVzLTMxLTAxLTIwMjAuanBnIiwKICAgICAgICAgICAgImhlaWdodCI6ICIxMDE5IgogICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgIm9yZ2FuaXphdGlvbiI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiR0VOVEUiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibWV0YXRhZ3MiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJvZzppbWFnZSI6ICJodHRwczovL2Nkbi5nZW50ZS5jb20uYXIvd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDEvR0VOVEUtRmFiaW9sYS1ZYW5lcy0zMS0wMS0yMDIwLmpwZyIsCiAgICAgICAgICAgICJvZzp0eXBlIjogImFydGljbGUiLAogICAgICAgICAgICAiYXJ0aWNsZTpzZWN0aW9uIjogIkFjdHVhbGlkYWQiLAogICAgICAgICAgICAiYXJ0aWNsZTpwdWJsaXNoZWRfdGltZSI6ICIyMDIwLTAxLTMxVDE2OjUzOjU4KzAwOjAwIiwKICAgICAgICAgICAgIm9nOmltYWdlOndpZHRoIjogIjE5MjAiLAogICAgICAgICAgICAidHdpdHRlcjpjYXJkIjogInN1bW1hcnlfbGFyZ2VfaW1hZ2UiLAogICAgICAgICAgICAidHdpdHRlcjp0aXRsZSI6ICJFbCBlbGVnYW50ZSBlc3RpbG8gZGUgRmFiaW9sYSBZw6HDsWV6IGR1cmFudGUgbGEgdmlzaXRhIGFsIHBhcGEgRnJhbmNpc2NvIC0gR0VOVEUiLAogICAgICAgICAgICAib2c6c2l0ZV9uYW1lIjogIkdFTlRFIiwKICAgICAgICAgICAgIm9nOnRpdGxlIjogIkVsIGVsZWdhbnRlIGVzdGlsbyBkZSBGYWJpb2xhIFnDocOxZXogZHVyYW50ZSBsYSB2aXNpdGEgYWwgcGFwYSBGcmFuY2lzY28gLSBHRU5URSIsCiAgICAgICAgICAgICJvZzppbWFnZTpoZWlnaHQiOiAiMTAxOSIsCiAgICAgICAgICAgICJvZzp1cGRhdGVkX3RpbWUiOiAiMjAyMC0wMS0zMVQxNjo1Mzo1OSswMDowMCIsCiAgICAgICAgICAgICJtc2FwcGxpY2F0aW9uLXRpbGVpbWFnZSI6ICJodHRwczovL2Nkbi5nZW50ZS5jb20uYXIvd3AtY29udGVudC91cGxvYWRzLzIwMTkvMTAvY3JvcHBlZC1nZW50ZS1mYXZpY29uLTI3MHgyNzAuanBnIiwKICAgICAgICAgICAgIm9nOmRlc2NyaXB0aW9uIjogIkxhIFByaW1lcmEgRGFtYSBhY29tcGHDscOzIGFsIHByZXNpZGVudGUgQWxiZXJ0byBGZXJuw6FuZGV6IGR1cmFudGUgZWwgZW5jdWVudHJvIGNvbiBlbCBTdW1vIFBvbnTDrWZpY2UgZW4gZWwgVmF0aWNhbm8uIExvcyBkZXRhbGxlcyBkZSBzdSBvdXRmaXQgeSBlbCBkaXNlw7FhZG9yIGFyZ2VudGlubyBxdWUgZWxpZ2nDsy4gTGEgUHJpbWVyYSBEYW1hIGFyZ2VudGluYSwgRmFiaW9sYSBZw6HDsWV6LCBhY29tcGHDscOzIGFsIHByZXNpZGVudGUgQWxiZXJ0byBGZXJuw6FuZGV6IGVuIGVsIGVuY3VlbnRybyBjb24gZWwgcGFwYSBGcmFuY2lzY28gZW4gZWwgVmF0aWNhbm8sIGVuIGVsIG1hcmNvIGRlIHVuYeKApiIsCiAgICAgICAgICAgICJvZzppbWFnZTpzZWN1cmVfdXJsIjogImh0dHBzOi8vY2RuLmdlbnRlLmNvbS5hci93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wMS9HRU5URS1GYWJpb2xhLVlhbmVzLTMxLTAxLTIwMjAuanBnIiwKICAgICAgICAgICAgInR3aXR0ZXI6aW1hZ2UiOiAiaHR0cHM6Ly9jZG4uZ2VudGUuY29tLmFyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzAxL0dFTlRFLUZhYmlvbGEtWWFuZXMtMzEtMDEtMjAyMC5qcGciLAogICAgICAgICAgICAiYXJ0aWNsZTp0YWciOiAiQWxiZXJ0byBGZXJuw6FuZGV6IiwKICAgICAgICAgICAgImZiOmFwcF9pZCI6ICI5MjMwNDA2NDE0MTUwMTgiLAogICAgICAgICAgICAiYXJ0aWNsZTptb2RpZmllZF90aW1lIjogIjIwMjAtMDEtMzFUMTY6NTM6NTkrMDA6MDAiLAogICAgICAgICAgICAidmlld3BvcnQiOiAid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEsIG1heGltdW0tc2NhbGU9MSwgdXNlci1zY2FsYWJsZT1ubywgdmlld3BvcnQtZml0PWNvdmVyIiwKICAgICAgICAgICAgInR3aXR0ZXI6ZGVzY3JpcHRpb24iOiAiTGEgUHJpbWVyYSBEYW1hIGFjb21wYcOxw7MgYWwgcHJlc2lkZW50ZSBBbGJlcnRvIEZlcm7DoW5kZXogZHVyYW50ZSBlbCBlbmN1ZW50cm8gY29uIGVsIFN1bW8gUG9udMOtZmljZSBlbiBlbCBWYXRpY2Fuby4gTG9zIGRldGFsbGVzIGRlIHN1IG91dGZpdCB5IGVsIGRpc2XDsWFkb3IgYXJnZW50aW5vIHF1ZSBlbGlnacOzLiBMYSBQcmltZXJhIERhbWEgYXJnZW50aW5hLCBGYWJpb2xhIFnDocOxZXosIGFjb21wYcOxw7MgYWwgcHJlc2lkZW50ZSBBbGJlcnRvIEZlcm7DoW5kZXogZW4gZWwgZW5jdWVudHJvIGNvbiBlbCBwYXBhIEZyYW5jaXNjbyBlbiBlbCBWYXRpY2FubywgZW4gZWwgbWFyY28gZGUgdW5h4oCmIiwKICAgICAgICAgICAgImJyaWRwbHVnaW4iOiAib2F1dGhfdG9rZW46ODU3ZDhhYTMyZWJhNmVkNWM3YWQ3ODM0MDZlNzUxZjliMDkyNjRhZHx2ZXI6My4wLjZ8c2l0ZToxNDM2Nnx3aWRnZXQ6MXxjaGFubmVsczpBcnJheXx3aWR0aDoxMTcwfGhlaWdodDo2NTh8YXV0b3BsYXk6MHxhc3BlY3Q6MXx1c2VyX2lkOjE0OTM2fGRlZmF1bHRfY2hhbm5lbDoxOHxvdnJfZGVmOjF8YXN5bmNfZW1iZWQ6MXxnb29nbGVfc2VvOjB8cGxheWVyOjE4NTE5fHZpZGVvX2ltYWdlOnx1bml0OjEwOTA5fHVuaXRfd2lkdGg6NDgwfHVuaXRfaGVpZ2h0OjI3MHxvbnJlYWR5OiIsCiAgICAgICAgICAgICJvZzpsb2NhbGUiOiAiZXNfRVMiLAogICAgICAgICAgICAib2c6dXJsIjogImh0dHBzOi8vd3d3LmdlbnRlLmNvbS5hci9hY3R1YWxpZGFkL2VsLWVsZWdhbnRlLWVzdGlsby1kZS1mYWJpb2xhLXlhbmV6LWR1cmFudGUtbGEtdmlzaXRhLWFsLXBhcGEtZnJhbmNpc2NvLyIKICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJjc2VfaW1hZ2UiOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgICJzcmMiOiAiaHR0cHM6Ly9jZG4uZ2VudGUuY29tLmFyL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzAxL0dFTlRFLUZhYmlvbGEtWWFuZXMtMzEtMDEtMjAyMC5qcGciCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAiYXJ0aWNsZSI6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgImFydGljbGVib2R5IjogIkxhIFByaW1lcmEgRGFtYSBhY29tcGHDscOzIGFsIHByZXNpZGVudGUgQWxiZXJ0byBGZXJuw6FuZGV6IGR1cmFudGUgZWwgZW5jdWVudHJvIGNvbiBlbCBTdW1vIFBvbnTDrWZpY2UgZW4gZWwgVmF0aWNhbm8uIExvcyBkZXRhbGxlcyBkZSBzdSBvdXRmaXQgeSBlbCBkaXNlw7FhZG9yIGFyZ2VudGlubyBxdWUgZWxpZ2nDsy4gTGEgUHJpbWVyYS4uLiIsCiAgICAgICAgICAgICJkYXRlbW9kaWZpZWQiOiAiMjAyMC0wMS0zMVQxMzo1Mzo1OS0wMzowMCIsCiAgICAgICAgICAgICJhdXRob3IiOiAiUmVkYWNjacOzbiBHZW50ZSIsCiAgICAgICAgICAgICJoZWFkbGluZSI6ICJFbCBlbGVnYW50ZSBlc3RpbG8gZGUgRmFiaW9sYSBZw6HDsWV6IGR1cmFudGUgbGEgdmlzaXRhIGFsIHBhcGEgRnJhbmNpc2NvIiwKICAgICAgICAgICAgImRhdGVwdWJsaXNoZWQiOiAiMjAyMC0wMS0zMVQxMzo1Mzo1OC0wMzowMCIsCiAgICAgICAgICAgICJtYWluZW50aXR5b2ZwYWdlIjogImh0dHBzOi8vd3d3LmdlbnRlLmNvbS5hci9hY3R1YWxpZGFkL2VsLWVsZWdhbnRlLWVzdGlsby1kZS1mYWJpb2xhLXlhbmV6LWR1cmFudGUtbGEtdmlzaXRhLWFsLXBhcGEtZnJhbmNpc2NvLyIKICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgIH0KICBdCn0K
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:38 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=11
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:47 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:47 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=21
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:48 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:48 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=31
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:48 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:48 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=41
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:49 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:49 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=51
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:49 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:49 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=61
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:50 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:50 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=71
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:51 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:51 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=81
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:51 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:51 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=91
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json; charset=UTF-8
      Vary:
      - Origin
      - Referer
      - X-Origin
      Date:
      - Sun, 02 Feb 2020 23:14:52 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:52 GMT
- request:
    method: get
    uri: https://www.googleapis.com/customsearch/v1?alt=json&cr=countryAR&cx=008349512099616087257:2_aa5fx5f7e&fileType=-pdf&key=AIzaSyC7op9KHeb7HBCP5zb_P2h38CLczntDriY&language=es&q=allintext:%22durante%20la%22&start=101
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 400
      message: Bad Request
    headers:
      Vary:
      - Origin
      - Referer
      - X-Origin
      Content-Type:
      - application/json; charset=UTF-8
      Date:
      - Sun, 02 Feb 2020 23:14:52 GMT
      Server:
      - ESF
      Cache-Control:
      - private
      X-Xss-Protection:
      - '0'
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Alt-Svc:
      - quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443";
        ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443";
        ma=2592000
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: |
        {
          "error": {
            "code": 400,
            "message": "Request contains an invalid argument.",
            "errors": [
              {
                "message": "Request contains an invalid argument.",
                "domain": "global",
                "reason": "badRequest"
              }
            ],
            "status": "INVALID_ARGUMENT"
          }
        }
    http_version: 
  recorded_at: Sun, 02 Feb 2020 23:14:52 GMT
recorded_with: VCR 5.0.0
